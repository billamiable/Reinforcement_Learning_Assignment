========== pass 1, file 'train_policy.py' ==========
Scopes now: {'train_policy': <Scope: module >, 'train_policy.minimize_and_clip': <Scope: function minimize_and_clip>, 'train_policy.build_mlp': <Scope: function build_mlp>, 'train_policy.build_rnn': <Scope: function build_rnn>, 'train_policy.build_policy': <Scope: function build_policy>, 'train_policy.build_critic': <Scope: function build_critic>, 'train_policy.pathlength': <Scope: function pathlength>, 'train_policy.discounted_return': <Scope: function discounted_return>, 'train_policy.discount_cumsum': <Scope: function discount_cumsum>, 'train_policy.setup_logger': <Scope: function setup_logger>, 'train_policy.setup_logger.dictcomp': <Scope: function dictcomp>, 'train_policy.Agent': <Scope: class Agent>, 'train_policy.Agent.__init__': <Scope: function __init__>, 'train_policy.Agent.init_tf_sess': <Scope: function init_tf_sess>, 'train_policy.Agent.define_placeholders': <Scope: function define_placeholders>, 'train_policy.Agent.policy_forward_pass': <Scope: function policy_forward_pass>, 'train_policy.Agent.sample_action': <Scope: function sample_action>, 'train_policy.Agent.get_log_prob': <Scope: function get_log_prob>, 'train_policy.Agent.build_computation_graph': <Scope: function build_computation_graph>, 'train_policy.Agent.sample_trajectories': <Scope: function sample_trajectories>, 'train_policy.Agent.sample_trajectory': <Scope: function sample_trajectory>, 'train_policy.Agent.compute_advantage': <Scope: function compute_advantage>, 'train_policy.Agent.estimate_return': <Scope: function estimate_return>, 'train_policy.Agent.update_parameters': <Scope: function update_parameters>, 'train_policy.Agent.update_critic': <Scope: function update_critic>, 'train_policy.Agent.update_policy': <Scope: function update_policy>, 'train_policy.Agent.ppo_loss': <Scope: function ppo_loss>, 'train_policy.train_PG': <Scope: function train_PG>, 'train_policy.train_PG.unpack_sample': <Scope: function unpack_sample>, 'train_policy.train_PG.listcomp': <Scope: function listcomp>, 'train_policy.main': <Scope: function main>, 'train_policy.main.train_func': <Scope: function train_func>}
Module
Import ['numpy as np']
Set np in <Scope: module > to <Node module:numpy>
Use from <Node module:train_policy> to Import <Node import:np>
New edge added for Use from <Node module:train_policy> to Import <Node import:np>
Import ['pdb']
Set pdb in <Scope: module > to <Node module:pdb>
Use from <Node module:train_policy> to Import <Node module:pdb>
New edge added for Use from <Node module:train_policy> to Import <Node module:pdb>
Import ['random']
Set random in <Scope: module > to <Node module:random>
Use from <Node module:train_policy> to Import <Node module:random>
New edge added for Use from <Node module:train_policy> to Import <Node module:random>
Import ['pickle']
Set pickle in <Scope: module > to <Node module:pickle>
Use from <Node module:train_policy> to Import <Node module:pickle>
New edge added for Use from <Node module:train_policy> to Import <Node module:pickle>
Import ['tensorflow as tf']
Set tf in <Scope: module > to <Node module:tensorflow>
Use from <Node module:train_policy> to Import <Node import:tf>
New edge added for Use from <Node module:train_policy> to Import <Node import:tf>
Import ['tensorflow_probability as tfp']
Set tfp in <Scope: module > to <Node module:tensorflow_probability>
Use from <Node module:train_policy> to Import <Node import:tfp>
New edge added for Use from <Node module:train_policy> to Import <Node import:tfp>
Import ['gym']
Set gym in <Scope: module > to <Node module:gym>
Use from <Node module:train_policy> to Import <Node module:gym>
New edge added for Use from <Node module:train_policy> to Import <Node module:gym>
Import ['logz']
Set logz in <Scope: module > to <Node module:logz>
Use from <Node module:train_policy> to Import <Node module:logz>
New edge added for Use from <Node module:train_policy> to Import <Node module:logz>
Import ['scipy.signal']
Set: name scipy.signal not in scope
Use from <Node module:train_policy> to Import <Node module:scipy.signal>
New edge added for Use from <Node module:train_policy> to Import <Node module:scipy.signal>
Import ['os']
Set os in <Scope: module > to <Node module:os>
Use from <Node module:train_policy> to Import <Node module:os>
New edge added for Use from <Node module:train_policy> to Import <Node module:os>
Import ['time']
Set time in <Scope: module > to <Node module:time>
Use from <Node module:train_policy> to Import <Node module:time>
New edge added for Use from <Node module:train_policy> to Import <Node module:time>
Import ['inspect']
Set inspect in <Scope: module > to <Node module:inspect>
Use from <Node module:train_policy> to Import <Node module:inspect>
New edge added for Use from <Node module:train_policy> to Import <Node module:inspect>
ImportFrom: from multiprocessing import ['Process']
Use from <Node module:train_policy> to ImportFrom <Node module:multiprocessing>
New edge added for Use from <Node module:train_policy> to ImportFrom <Node module:multiprocessing>
Set Process in <Scope: module > to <Node import:multiprocessing.Process>
From setting name Process to <Node import:multiprocessing.Process>
ImportFrom: from replay_buffer import ['ReplayBuffer', 'PPOReplayBuffer']
Use from <Node module:train_policy> to ImportFrom <Node module:replay_buffer>
New edge added for Use from <Node module:train_policy> to ImportFrom <Node module:replay_buffer>
Set ReplayBuffer in <Scope: module > to <Node import:replay_buffer.ReplayBuffer>
From setting name ReplayBuffer to <Node import:replay_buffer.ReplayBuffer>
Set PPOReplayBuffer in <Scope: module > to <Node import:replay_buffer.PPOReplayBuffer>
From setting name PPOReplayBuffer to <Node import:replay_buffer.PPOReplayBuffer>
ImportFrom: from point_mass import ['PointEnv']
Use from <Node module:train_policy> to ImportFrom <Node module:point_mass>
New edge added for Use from <Node module:train_policy> to ImportFrom <Node module:point_mass>
Set PointEnv in <Scope: module > to <Node import:point_mass.PointEnv>
From setting name PointEnv to <Node import:point_mass.PointEnv>
ImportFrom: from point_mass_observed import ['ObservedPointEnv']
Use from <Node module:train_policy> to ImportFrom <Node module:point_mass_observed>
New edge added for Use from <Node module:train_policy> to ImportFrom <Node module:point_mass_observed>
Set ObservedPointEnv in <Scope: module > to <Node import:point_mass_observed.ObservedPointEnv>
From setting name ObservedPointEnv to <Node import:point_mass_observed.ObservedPointEnv>
FunctionDef minimize_and_clip
Def from <Node module:train_policy> to Function <Node function:train_policy.minimize_and_clip>
Set minimize_and_clip in <Scope: module > to <Node function:train_policy.minimize_and_clip>
Assign ['gradients'] [<_ast.Call object at 0x107c00d68>]
Call optimizer.compute_gradients
Name objective in context <class '_ast.Load'>
Get objective in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
New edge added for Use from <Node function:train_policy.minimize_and_clip> to Name <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Name var_list in context <class '_ast.Load'>
Get var_list in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Attribute compute_gradients of optimizer in context <class '_ast.Load'>
Resolve optimizer.compute_gradients in context <class '_ast.Load'>
Get optimizer in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Resolved to attr compute_gradients of <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients> (target obj <Node ---:train_policy.minimize_and_clip.^^^argument^^^> known but target attr compute_gradients not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients> (target obj <Node ---:train_policy.minimize_and_clip.^^^argument^^^> known but target attr compute_gradients not resolved; maybe fwd ref or unanalyzed import)
Name gradients in context <class '_ast.Store'>
Set gradients in <Scope: function minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
For-loop
Call enumerate
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Name enumerate in context <class '_ast.Load'>
Get enumerate in <Scope: function minimize_and_clip>: no Node value (or name not in scope)
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
New edge added for Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Name i in context <class '_ast.Store'>
Set i in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name grad in context <class '_ast.Store'>
Set grad in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name var in context <class '_ast.Store'>
Set var in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name grad in context <class '_ast.Load'>
Get grad in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Assign [<_ast.Subscript object at 0x107aec240>] [<_ast.Call object at 0x107aec358>, 'var']
Call tf.clip_by_norm
Name grad in context <class '_ast.Load'>
Get grad in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Name clip_val in context <class '_ast.Load'>
Get clip_val in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Attribute clip_by_norm of tf in context <class '_ast.Load'>
Resolve tf.clip_by_norm in context <class '_ast.Load'>
Get tf in <Scope: function minimize_and_clip>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr clip_by_norm of <Node module:tensorflow>
Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:tensorflow.clip_by_norm> (target obj <Node module:tensorflow> known but target attr clip_by_norm not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:tensorflow.clip_by_norm> (target obj <Node module:tensorflow> known but target attr clip_by_norm not resolved; maybe fwd ref or unanalyzed import)
Name var in context <class '_ast.Load'>
Get var in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Name i in context <class '_ast.Load'>
Get i in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Call optimizer.apply_gradients
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Attribute apply_gradients of optimizer in context <class '_ast.Load'>
Resolve optimizer.apply_gradients in context <class '_ast.Load'>
Get optimizer in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Resolved to attr apply_gradients of <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.apply_gradients> (target obj <Node ---:train_policy.minimize_and_clip.^^^argument^^^> known but target attr apply_gradients not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.apply_gradients> (target obj <Node ---:train_policy.minimize_and_clip.^^^argument^^^> known but target attr apply_gradients not resolved; maybe fwd ref or unanalyzed import)
FunctionDef build_mlp
Def from <Node module:train_policy> to Function <Node function:train_policy.build_mlp>
Set build_mlp in <Scope: module > to <Node function:train_policy.build_mlp>
Attribute tanh of tf in context <class '_ast.Load'>
Resolve tf.tanh in context <class '_ast.Load'>
Get tf in <Scope: function build_mlp>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr tanh of <Node module:tensorflow>
Use from <Node function:train_policy.build_mlp> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_mlp> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
Assign ['i'] [<_ast.Num object at 0x107aec9b0>]
Name i in context <class '_ast.Store'>
Set i in <Scope: function build_mlp>: value None is not a Node
For-loop
Call range
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
New edge added for Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function build_mlp>: no Node value (or name not in scope)
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.range>
New edge added for Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.range>
Name i in context <class '_ast.Store'>
Set i in <Scope: function build_mlp> to <Node ???:*.range>
Assign ['x'] [<_ast.Call object at 0x107aecb70>]
Call tf.layers.dense
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Call <_ast.Str object at 0x107aece48>.format
Name i in context <class '_ast.Load'>
Get i in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ???:*.range>
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.range>
Attribute format of <_ast.Str object at 0x107aece48> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x107aece48>.format in context <class '_ast.Load'>
Resolved to attr format of <Node class:Str>
getattr format on <_ast.Str object at 0x107aece48> returns <Node attribute:Str.format>
Use from <Node function:train_policy.build_mlp> to <Node attribute:Str.format>
New edge added for Use from <Node function:train_policy.build_mlp> to <Node attribute:Str.format>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Attribute dense of tf.layers in context <class '_ast.Load'>
Resolve tf.layers.dense in context <class '_ast.Load'>
Resolve tf.layers in context <class '_ast.Load'>
Get tf in <Scope: function build_mlp>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr layers of <Node module:tensorflow>
Unresolved, returning attr dense of unknown
Use from <Node function:train_policy.build_mlp> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_mlp> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_mlp> to <Node ???:*.dense>
Assign ['x'] [<_ast.Call object at 0x107ae9048>]
Call tf.layers.dense
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ???:*.dense>
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.dense>
Name output_size in context <class '_ast.Load'>
Get output_size in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name output_activation in context <class '_ast.Load'>
Get output_activation in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Call <_ast.Str object at 0x107ae9320>.format
Name i in context <class '_ast.Load'>
Get i in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ???:*.range>
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.range>
Attribute format of <_ast.Str object at 0x107ae9320> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x107ae9320>.format in context <class '_ast.Load'>
Resolved to attr format of <Node class:Str>
getattr format on <_ast.Str object at 0x107ae9320> returns <Node attribute:Str.format>
Use from <Node function:train_policy.build_mlp> to <Node attribute:Str.format>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Attribute dense of tf.layers in context <class '_ast.Load'>
Resolve tf.layers.dense in context <class '_ast.Load'>
Resolve tf.layers in context <class '_ast.Load'>
Get tf in <Scope: function build_mlp>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr layers of <Node module:tensorflow>
Unresolved, returning attr dense of unknown
Use from <Node function:train_policy.build_mlp> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_mlp> to <Node ???:*.dense>
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ???:*.dense>
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.dense>
FunctionDef build_rnn
Def from <Node module:train_policy> to Function <Node function:train_policy.build_rnn>
Set build_rnn in <Scope: module > to <Node function:train_policy.build_rnn>
Attribute tanh of tf in context <class '_ast.Load'>
Resolve tf.tanh in context <class '_ast.Load'>
Get tf in <Scope: function build_rnn>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr tanh of <Node module:tensorflow>
Use from <Node function:train_policy.build_rnn> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_rnn> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
FunctionDef build_policy
Def from <Node module:train_policy> to Function <Node function:train_policy.build_policy>
Set build_policy in <Scope: module > to <Node function:train_policy.build_policy>
Attribute tanh of tf in context <class '_ast.Load'>
Resolve tf.tanh in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr tanh of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call tf.variable_scope
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
New edge added for Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Attribute AUTO_REUSE of tf in context <class '_ast.Load'>
Resolve tf.AUTO_REUSE in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr AUTO_REUSE of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.AUTO_REUSE> (target obj <Node module:tensorflow> known but target attr AUTO_REUSE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.AUTO_REUSE> (target obj <Node module:tensorflow> known but target attr AUTO_REUSE not resolved; maybe fwd ref or unanalyzed import)
Attribute variable_scope of tf in context <class '_ast.Load'>
Resolve tf.variable_scope in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variable_scope of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:train_policy.build_policy> to With <Node attribute:tensorflow.variable_scope>
New edge added for Use from <Node function:train_policy.build_policy> to <Node method:tensorflow.variable_scope.__enter__>
New edge added for Use from <Node function:train_policy.build_policy> to <Node method:tensorflow.variable_scope.__exit__>
Name recurrent in context <class '_ast.Load'>
Get recurrent in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Assign ['x', 'h'] [<_ast.Call object at 0x107af2080>]
Call build_rnn
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name h in context <class '_ast.Load'>
Get h in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name build_rnn in context <class '_ast.Load'>
Get build_rnn in <Scope: function build_policy>, found in <Scope: module >, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_rnn>
New edge added for Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_rnn>
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_policy> to <Node function:train_policy.build_rnn>
Name h in context <class '_ast.Store'>
Set h in <Scope: function build_policy> to <Node function:train_policy.build_rnn>
Assign ['x'] [<_ast.Call object at 0x107af2390>]
Call tf.reshape
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_rnn>
Call x.get_shape
Attribute get_shape of x in context <class '_ast.Load'>
Resolve x.get_shape in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_rnn>
Resolved to attr get_shape of <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_policy> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
Call x.get_shape
Attribute get_shape of x in context <class '_ast.Load'>
Resolve x.get_shape in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_rnn>
Resolved to attr get_shape of <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
Attribute reshape of tf in context <class '_ast.Load'>
Resolve tf.reshape in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reshape of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.reshape> (target obj <Node module:tensorflow> known but target attr reshape not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.reshape> (target obj <Node module:tensorflow> known but target attr reshape not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_policy> to <Node attribute:tensorflow.reshape>
Assign ['x'] [<_ast.Call object at 0x107af2860>]
Call build_mlp
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node attribute:tensorflow.reshape>
Use from <Node function:train_policy.build_policy> to Name <Node attribute:tensorflow.reshape>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name build_mlp in context <class '_ast.Load'>
Get build_mlp in <Scope: function build_policy>, found in <Scope: module >, value <Node function:train_policy.build_mlp>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_mlp>
New edge added for Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_mlp>
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_policy> to <Node function:train_policy.build_mlp>
Assign ['x'] [<_ast.Call object at 0x107af2ba8>]
Call tf.layers.dense
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_mlp>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_mlp>
Name output_size in context <class '_ast.Load'>
Get output_size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name output_activation in context <class '_ast.Load'>
Get output_activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Call tf.initializers.truncated_normal
Attribute truncated_normal of tf.initializers in context <class '_ast.Load'>
Resolve tf.initializers.truncated_normal in context <class '_ast.Load'>
Resolve tf.initializers in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr initializers of <Node module:tensorflow>
Unresolved, returning attr truncated_normal of unknown
Use from <Node function:train_policy.build_policy> to <Node ???:*.truncated_normal> (target obj tf.initializers not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_policy> to <Node ???:*.truncated_normal> (target obj tf.initializers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call tf.zeros_initializer
Attribute zeros_initializer of tf in context <class '_ast.Load'>
Resolve tf.zeros_initializer in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr zeros_initializer of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.zeros_initializer> (target obj <Node module:tensorflow> known but target attr zeros_initializer not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.zeros_initializer> (target obj <Node module:tensorflow> known but target attr zeros_initializer not resolved; maybe fwd ref or unanalyzed import)
Attribute dense of tf.layers in context <class '_ast.Load'>
Resolve tf.layers.dense in context <class '_ast.Load'>
Resolve tf.layers in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr layers of <Node module:tensorflow>
Unresolved, returning attr dense of unknown
Use from <Node function:train_policy.build_policy> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_policy> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_policy> to <Node ???:*.dense>
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ???:*.dense>
Use from <Node function:train_policy.build_policy> to Name <Node ???:*.dense>
Name h in context <class '_ast.Load'>
Get h in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_rnn>
FunctionDef build_critic
Def from <Node module:train_policy> to Function <Node function:train_policy.build_critic>
Set build_critic in <Scope: module > to <Node function:train_policy.build_critic>
Attribute tanh of tf in context <class '_ast.Load'>
Resolve tf.tanh in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr tanh of <Node module:tensorflow>
Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call tf.variable_scope
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
New edge added for Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Attribute AUTO_REUSE of tf in context <class '_ast.Load'>
Resolve tf.AUTO_REUSE in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr AUTO_REUSE of <Node module:tensorflow>
Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.AUTO_REUSE> (target obj <Node module:tensorflow> known but target attr AUTO_REUSE not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.AUTO_REUSE> (target obj <Node module:tensorflow> known but target attr AUTO_REUSE not resolved; maybe fwd ref or unanalyzed import)
Attribute variable_scope of tf in context <class '_ast.Load'>
Resolve tf.variable_scope in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variable_scope of <Node module:tensorflow>
Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:train_policy.build_critic> to With <Node attribute:tensorflow.variable_scope>
New edge added for Use from <Node function:train_policy.build_critic> to <Node method:tensorflow.variable_scope.__enter__>
New edge added for Use from <Node function:train_policy.build_critic> to <Node method:tensorflow.variable_scope.__exit__>
Name recurrent in context <class '_ast.Load'>
Get recurrent in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Assign ['x', 'h'] [<_ast.Call object at 0x107af7978>]
Call build_rnn
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name h in context <class '_ast.Load'>
Get h in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name output_activation in context <class '_ast.Load'>
Get output_activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name build_rnn in context <class '_ast.Load'>
Get build_rnn in <Scope: function build_critic>, found in <Scope: module >, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_rnn>
New edge added for Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_rnn>
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_critic> to <Node function:train_policy.build_rnn>
Name h in context <class '_ast.Store'>
Set h in <Scope: function build_critic> to <Node function:train_policy.build_rnn>
Assign ['x'] [<_ast.Call object at 0x107af7cf8>]
Call tf.reshape
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_rnn>
Call x.get_shape
Attribute get_shape of x in context <class '_ast.Load'>
Resolve x.get_shape in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node function:train_policy.build_rnn>
Resolved to attr get_shape of <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_critic> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_critic> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
Call x.get_shape
Attribute get_shape of x in context <class '_ast.Load'>
Resolve x.get_shape in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node function:train_policy.build_rnn>
Resolved to attr get_shape of <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_critic> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
Attribute reshape of tf in context <class '_ast.Load'>
Resolve tf.reshape in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reshape of <Node module:tensorflow>
Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.reshape> (target obj <Node module:tensorflow> known but target attr reshape not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.reshape> (target obj <Node module:tensorflow> known but target attr reshape not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_critic> to <Node attribute:tensorflow.reshape>
Assign ['x'] [<_ast.Call object at 0x107af8208>]
Call build_mlp
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node attribute:tensorflow.reshape>
Use from <Node function:train_policy.build_critic> to Name <Node attribute:tensorflow.reshape>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name build_mlp in context <class '_ast.Load'>
Get build_mlp in <Scope: function build_critic>, found in <Scope: module >, value <Node function:train_policy.build_mlp>
Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_mlp>
New edge added for Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_mlp>
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_critic> to <Node function:train_policy.build_mlp>
Assign ['x'] [<_ast.Call object at 0x107af85c0>]
Call tf.layers.dense
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node function:train_policy.build_mlp>
Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_mlp>
Name output_size in context <class '_ast.Load'>
Get output_size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name output_activation in context <class '_ast.Load'>
Get output_activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Attribute dense of tf.layers in context <class '_ast.Load'>
Resolve tf.layers.dense in context <class '_ast.Load'>
Resolve tf.layers in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr layers of <Node module:tensorflow>
Unresolved, returning attr dense of unknown
Use from <Node function:train_policy.build_critic> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.build_critic> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_critic> to <Node ???:*.dense>
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ???:*.dense>
Use from <Node function:train_policy.build_critic> to Name <Node ???:*.dense>
FunctionDef pathlength
Def from <Node module:train_policy> to Function <Node function:train_policy.pathlength>
Set pathlength in <Scope: module > to <Node function:train_policy.pathlength>
Call len
Name path in context <class '_ast.Load'>
Get path in <Scope: function pathlength>, found in <Scope: function pathlength>, value <Node ---:train_policy.pathlength.^^^argument^^^>
Use from <Node function:train_policy.pathlength> to Name <Node ---:train_policy.pathlength.^^^argument^^^>
New edge added for Use from <Node function:train_policy.pathlength> to Name <Node ---:train_policy.pathlength.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function pathlength>: no Node value (or name not in scope)
Use from <Node function:train_policy.pathlength> to Name <Node ???:*.len>
New edge added for Use from <Node function:train_policy.pathlength> to Name <Node ???:*.len>
FunctionDef discounted_return
Def from <Node module:train_policy> to Function <Node function:train_policy.discounted_return>
Set discounted_return in <Scope: module > to <Node function:train_policy.discounted_return>
Assign ['discounts'] [<_ast.BinOp object at 0x107af8cc0>]
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function discounted_return>, found in <Scope: function discounted_return>, value <Node ---:train_policy.discounted_return.^^^argument^^^>
Use from <Node function:train_policy.discounted_return> to Name <Node ---:train_policy.discounted_return.^^^argument^^^>
New edge added for Use from <Node function:train_policy.discounted_return> to Name <Node ---:train_policy.discounted_return.^^^argument^^^>
Call np.arange
Call len
Name reward in context <class '_ast.Load'>
Get reward in <Scope: function discounted_return>, found in <Scope: function discounted_return>, value <Node ---:train_policy.discounted_return.^^^argument^^^>
Use from <Node function:train_policy.discounted_return> to Name <Node ---:train_policy.discounted_return.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function discounted_return>: no Node value (or name not in scope)
Use from <Node function:train_policy.discounted_return> to Name <Node ???:*.len>
New edge added for Use from <Node function:train_policy.discounted_return> to Name <Node ???:*.len>
Attribute arange of np in context <class '_ast.Load'>
Resolve np.arange in context <class '_ast.Load'>
Get np in <Scope: function discounted_return>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr arange of <Node module:numpy>
Use from <Node function:train_policy.discounted_return> to <Node attribute:numpy.arange> (target obj <Node module:numpy> known but target attr arange not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.discounted_return> to <Node attribute:numpy.arange> (target obj <Node module:numpy> known but target attr arange not resolved; maybe fwd ref or unanalyzed import)
Name discounts in context <class '_ast.Store'>
Set discounts in <Scope: function discounted_return> to <Node attribute:numpy.arange>
Call sum
Name discounts in context <class '_ast.Load'>
Get discounts in <Scope: function discounted_return>, found in <Scope: function discounted_return>, value <Node attribute:numpy.arange>
Use from <Node function:train_policy.discounted_return> to Name <Node attribute:numpy.arange>
Name reward in context <class '_ast.Load'>
Get reward in <Scope: function discounted_return>, found in <Scope: function discounted_return>, value <Node ---:train_policy.discounted_return.^^^argument^^^>
Use from <Node function:train_policy.discounted_return> to Name <Node ---:train_policy.discounted_return.^^^argument^^^>
Name sum in context <class '_ast.Load'>
Get sum in <Scope: function discounted_return>: no Node value (or name not in scope)
Use from <Node function:train_policy.discounted_return> to Name <Node ???:*.sum>
New edge added for Use from <Node function:train_policy.discounted_return> to Name <Node ???:*.sum>
FunctionDef discount_cumsum
Def from <Node module:train_policy> to Function <Node function:train_policy.discount_cumsum>
Set discount_cumsum in <Scope: module > to <Node function:train_policy.discount_cumsum>
Call scipy.signal.lfilter
Call float
Name discount in context <class '_ast.Load'>
Get discount in <Scope: function discount_cumsum>, found in <Scope: function discount_cumsum>, value <Node ---:train_policy.discount_cumsum.^^^argument^^^>
Use from <Node function:train_policy.discount_cumsum> to Name <Node ---:train_policy.discount_cumsum.^^^argument^^^>
New edge added for Use from <Node function:train_policy.discount_cumsum> to Name <Node ---:train_policy.discount_cumsum.^^^argument^^^>
Name float in context <class '_ast.Load'>
Get float in <Scope: function discount_cumsum>: no Node value (or name not in scope)
Use from <Node function:train_policy.discount_cumsum> to Name <Node ???:*.float>
New edge added for Use from <Node function:train_policy.discount_cumsum> to Name <Node ???:*.float>
Name x in context <class '_ast.Load'>
Get x in <Scope: function discount_cumsum>, found in <Scope: function discount_cumsum>, value <Node ---:train_policy.discount_cumsum.^^^argument^^^>
Use from <Node function:train_policy.discount_cumsum> to Name <Node ---:train_policy.discount_cumsum.^^^argument^^^>
Attribute lfilter of scipy.signal in context <class '_ast.Load'>
Resolve scipy.signal.lfilter in context <class '_ast.Load'>
Resolve scipy.signal in context <class '_ast.Load'>
Get scipy in <Scope: function discount_cumsum>: no Node value (or name not in scope)
Resolved to attr signal of None
Unresolved, returning attr lfilter of unknown
Use from <Node function:train_policy.discount_cumsum> to <Node ???:*.lfilter> (target obj scipy.signal not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.discount_cumsum> to <Node ???:*.lfilter> (target obj scipy.signal not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef setup_logger
Def from <Node module:train_policy> to Function <Node function:train_policy.setup_logger>
Set setup_logger in <Scope: module > to <Node function:train_policy.setup_logger>
Call logz.configure_output_dir
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function setup_logger>, found in <Scope: function setup_logger>, value <Node ---:train_policy.setup_logger.^^^argument^^^>
Use from <Node function:train_policy.setup_logger> to Name <Node ---:train_policy.setup_logger.^^^argument^^^>
New edge added for Use from <Node function:train_policy.setup_logger> to Name <Node ---:train_policy.setup_logger.^^^argument^^^>
Attribute configure_output_dir of logz in context <class '_ast.Load'>
Resolve logz.configure_output_dir in context <class '_ast.Load'>
Get logz in <Scope: function setup_logger>, found in <Scope: module >, value <Node module:logz>
Resolved to attr configure_output_dir of <Node module:logz>
Use from <Node function:train_policy.setup_logger> to <Node attribute:logz.configure_output_dir> (target obj <Node module:logz> known but target attr configure_output_dir not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.setup_logger> to <Node attribute:logz.configure_output_dir> (target obj <Node module:logz> known but target attr configure_output_dir not resolved; maybe fwd ref or unanalyzed import)
Assign ['args'] [<_ast.Subscript object at 0x107afc898>]
Call inspect.getargspec
Name train_PG in context <class '_ast.Load'>
Get train_PG in <Scope: function setup_logger>: no Node value (or name not in scope)
Use from <Node function:train_policy.setup_logger> to Name <Node ???:*.train_PG>
New edge added for Use from <Node function:train_policy.setup_logger> to Name <Node ???:*.train_PG>
Attribute getargspec of inspect in context <class '_ast.Load'>
Resolve inspect.getargspec in context <class '_ast.Load'>
Get inspect in <Scope: function setup_logger>, found in <Scope: module >, value <Node module:inspect>
Resolved to attr getargspec of <Node module:inspect>
Use from <Node function:train_policy.setup_logger> to <Node attribute:inspect.getargspec> (target obj <Node module:inspect> known but target attr getargspec not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.setup_logger> to <Node attribute:inspect.getargspec> (target obj <Node module:inspect> known but target attr getargspec not resolved; maybe fwd ref or unanalyzed import)
Name args in context <class '_ast.Store'>
Set args in <Scope: function setup_logger> to <Node attribute:inspect.getargspec>
Assign ['params'] [<_ast.DictComp object at 0x107afca90>]
DictComp
Name k in context <class '_ast.Load'>
Get k in <Scope: function dictcomp>: no Node value (or name not in scope)
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ???:*.k>
New edge added for Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ???:*.k>
Name k in context <class '_ast.Load'>
Get k in <Scope: function dictcomp>: no Node value (or name not in scope)
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ???:*.k>
Name locals_ in context <class '_ast.Load'>
Get locals_ in <Scope: function dictcomp>, found in <Scope: function setup_logger>, value <Node ---:train_policy.setup_logger.^^^argument^^^>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ---:train_policy.setup_logger.^^^argument^^^>
New edge added for Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ---:train_policy.setup_logger.^^^argument^^^>
Name locals_ in context <class '_ast.Load'>
Get locals_ in <Scope: function dictcomp>, found in <Scope: function setup_logger>, value <Node ---:train_policy.setup_logger.^^^argument^^^>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ---:train_policy.setup_logger.^^^argument^^^>
Name k in context <class '_ast.Load'>
Get k in <Scope: function dictcomp>: no Node value (or name not in scope)
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ???:*.k>
Name args in context <class '_ast.Load'>
Get args in <Scope: function dictcomp>, found in <Scope: function setup_logger>, value <Node attribute:inspect.getargspec>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node attribute:inspect.getargspec>
New edge added for Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node attribute:inspect.getargspec>
Name k in context <class '_ast.Store'>
Set k in <Scope: function dictcomp> to <Node attribute:inspect.getargspec>
Def from <Node function:train_policy.setup_logger> to dictcomp <Node namespace:train_policy.setup_logger.dictcomp>
Name params in context <class '_ast.Store'>
Set params in <Scope: function setup_logger> to <Node namespace:train_policy.setup_logger.dictcomp>
Call logz.save_params
Name params in context <class '_ast.Load'>
Get params in <Scope: function setup_logger>, found in <Scope: function setup_logger>, value <Node namespace:train_policy.setup_logger.dictcomp>
Use from <Node function:train_policy.setup_logger> to Name <Node namespace:train_policy.setup_logger.dictcomp>
New edge added for Use from <Node function:train_policy.setup_logger> to Name <Node namespace:train_policy.setup_logger.dictcomp>
Attribute save_params of logz in context <class '_ast.Load'>
Resolve logz.save_params in context <class '_ast.Load'>
Get logz in <Scope: function setup_logger>, found in <Scope: module >, value <Node module:logz>
Resolved to attr save_params of <Node module:logz>
Use from <Node function:train_policy.setup_logger> to <Node attribute:logz.save_params> (target obj <Node module:logz> known but target attr save_params not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.setup_logger> to <Node attribute:logz.save_params> (target obj <Node module:logz> known but target attr save_params not resolved; maybe fwd ref or unanalyzed import)
ClassDef Agent
Def from <Node module:train_policy> to Class <Node class:train_policy.Agent>
Set Agent in <Scope: module > to <Node class:train_policy.Agent>
Name object in context <class '_ast.Load'>
Get object in <Scope: class Agent>: no Node value (or name not in scope)
Use from <Node class:train_policy.Agent> to Name <Node ???:*.object>
New edge added for Use from <Node class:train_policy.Agent> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.__init__>
Set __init__ in <Scope: class Agent> to <Node method:train_policy.Agent.__init__>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Call <_ast.Call object at 0x107aff160>.__init__
Attribute __init__ of <_ast.Call object at 0x107aff160> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x107aff160>.__init__ in context <class '_ast.Load'>
Resolving super() of <Node class:train_policy.Agent>
super called for <Node class:train_policy.Agent>, but MRO not determined for it (maybe still in pass 1?)
Assign ['self.ob_dim'] [<_ast.Subscript object at 0x107aff2e8>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute ob_dim of self in context <class '_ast.Store'>
Resolve self.ob_dim in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ob_dim of <Node class:train_policy.Agent>
setattr ob_dim on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.ac_dim'] [<_ast.Subscript object at 0x107aff470>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute ac_dim of self in context <class '_ast.Store'>
Resolve self.ac_dim in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
setattr ac_dim on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.task_dim'] [<_ast.Subscript object at 0x107aff5f8>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute task_dim of self in context <class '_ast.Store'>
Resolve self.task_dim in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr task_dim of <Node class:train_policy.Agent>
setattr task_dim on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.reward_dim'] [<_ast.Num object at 0x107aff780>]
Attribute reward_dim of self in context <class '_ast.Store'>
Assign ['self.terminal_dim'] [<_ast.Num object at 0x107aff860>]
Attribute terminal_dim of self in context <class '_ast.Store'>
Assign ['self.meta_ob_dim'] [<_ast.BinOp object at 0x107aff940>]
Attribute ob_dim of self in context <class '_ast.Load'>
Resolve self.ob_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ob_dim of <Node class:train_policy.Agent>
getattr ob_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute reward_dim of self in context <class '_ast.Load'>
Resolve self.reward_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr reward_dim of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.reward_dim> (target obj <Node class:train_policy.Agent> known but target attr reward_dim not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.reward_dim> (target obj <Node class:train_policy.Agent> known but target attr reward_dim not resolved; maybe fwd ref or unanalyzed import)
Attribute terminal_dim of self in context <class '_ast.Load'>
Resolve self.terminal_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr terminal_dim of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.terminal_dim> (target obj <Node class:train_policy.Agent> known but target attr terminal_dim not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.terminal_dim> (target obj <Node class:train_policy.Agent> known but target attr terminal_dim not resolved; maybe fwd ref or unanalyzed import)
Attribute meta_ob_dim of self in context <class '_ast.Store'>
Resolve self.meta_ob_dim in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
setattr meta_ob_dim on self to <Node attribute:train_policy.Agent.terminal_dim>
Assign ['self.scope'] [<_ast.Str object at 0x107affc50>]
Attribute scope of self in context <class '_ast.Store'>
Assign ['self.size'] [<_ast.Subscript object at 0x107affd30>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Store'>
Resolve self.size in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr size of <Node class:train_policy.Agent>
setattr size on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.gru_size'] [<_ast.Subscript object at 0x107affeb8>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Store'>
Resolve self.gru_size in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
setattr gru_size on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.n_layers'] [<_ast.Subscript object at 0x107b02080>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute n_layers of self in context <class '_ast.Store'>
Resolve self.n_layers in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr n_layers of <Node class:train_policy.Agent>
setattr n_layers on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.learning_rate'] [<_ast.Subscript object at 0x107b02208>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute learning_rate of self in context <class '_ast.Store'>
Resolve self.learning_rate in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr learning_rate of <Node class:train_policy.Agent>
setattr learning_rate on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.history'] [<_ast.Subscript object at 0x107b02390>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute history of self in context <class '_ast.Store'>
Resolve self.history in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
setattr history on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.num_value_iters'] [<_ast.Subscript object at 0x107b02518>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute num_value_iters of self in context <class '_ast.Store'>
Resolve self.num_value_iters in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr num_value_iters of <Node class:train_policy.Agent>
setattr num_value_iters on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.l2reg'] [<_ast.Subscript object at 0x107b026a0>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute l2reg of self in context <class '_ast.Store'>
Resolve self.l2reg in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr l2reg of <Node class:train_policy.Agent>
setattr l2reg on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.recurrent'] [<_ast.Subscript object at 0x107b02828>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute recurrent of self in context <class '_ast.Store'>
Resolve self.recurrent in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr recurrent of <Node class:train_policy.Agent>
setattr recurrent on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.animate'] [<_ast.Subscript object at 0x107b029b0>]
Name sample_trajectory_args in context <class '_ast.Load'>
Get sample_trajectory_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute animate of self in context <class '_ast.Store'>
Resolve self.animate in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr animate of <Node class:train_policy.Agent>
setattr animate on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.max_path_length'] [<_ast.Subscript object at 0x107b02b38>]
Name sample_trajectory_args in context <class '_ast.Load'>
Get sample_trajectory_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute max_path_length of self in context <class '_ast.Store'>
Resolve self.max_path_length in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr max_path_length of <Node class:train_policy.Agent>
setattr max_path_length on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.min_timesteps_per_batch'] [<_ast.Subscript object at 0x107b02cc0>]
Name sample_trajectory_args in context <class '_ast.Load'>
Get sample_trajectory_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute min_timesteps_per_batch of self in context <class '_ast.Store'>
Resolve self.min_timesteps_per_batch in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr min_timesteps_per_batch of <Node class:train_policy.Agent>
setattr min_timesteps_per_batch on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.gamma'] [<_ast.Subscript object at 0x107b02e48>]
Name estimate_return_args in context <class '_ast.Load'>
Get estimate_return_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gamma of self in context <class '_ast.Store'>
Resolve self.gamma in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr gamma of <Node class:train_policy.Agent>
setattr gamma on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.nn_critic'] [<_ast.Subscript object at 0x107b02fd0>]
Name estimate_return_args in context <class '_ast.Load'>
Get estimate_return_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute nn_critic of self in context <class '_ast.Store'>
Resolve self.nn_critic in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr nn_critic of <Node class:train_policy.Agent>
setattr nn_critic on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.normalize_advantages'] [<_ast.Subscript object at 0x107b06198>]
Name estimate_return_args in context <class '_ast.Load'>
Get estimate_return_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute normalize_advantages of self in context <class '_ast.Store'>
Resolve self.normalize_advantages in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr normalize_advantages of <Node class:train_policy.Agent>
setattr normalize_advantages on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.replay_buffer'] [<_ast.Call object at 0x107b06320>]
Call ReplayBuffer
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute meta_ob_dim of self in context <class '_ast.Load'>
Resolve self.meta_ob_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
getattr meta_ob_dim on self returns <Node attribute:train_policy.Agent.terminal_dim>
Use from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.terminal_dim>
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute task_dim of self in context <class '_ast.Load'>
Resolve self.task_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr task_dim of <Node class:train_policy.Agent>
getattr task_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name ReplayBuffer in context <class '_ast.Load'>
Get ReplayBuffer in <Scope: function __init__>, found in <Scope: module >, value <Node import:replay_buffer.ReplayBuffer>
Use from <Node method:train_policy.Agent.__init__> to Name <Node import:replay_buffer.ReplayBuffer>
New edge added for Use from <Node method:train_policy.Agent.__init__> to Name <Node import:replay_buffer.ReplayBuffer>
Attribute replay_buffer of self in context <class '_ast.Store'>
Resolve self.replay_buffer in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr replay_buffer of <Node class:train_policy.Agent>
setattr replay_buffer on self to <Node import:replay_buffer.ReplayBuffer>
Assign ['self.val_replay_buffer'] [<_ast.Call object at 0x107b06710>]
Call ReplayBuffer
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute meta_ob_dim of self in context <class '_ast.Load'>
Resolve self.meta_ob_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
getattr meta_ob_dim on self returns <Node attribute:train_policy.Agent.terminal_dim>
Use from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.terminal_dim>
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute task_dim of self in context <class '_ast.Load'>
Resolve self.task_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr task_dim of <Node class:train_policy.Agent>
getattr task_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name ReplayBuffer in context <class '_ast.Load'>
Get ReplayBuffer in <Scope: function __init__>, found in <Scope: module >, value <Node import:replay_buffer.ReplayBuffer>
Use from <Node method:train_policy.Agent.__init__> to Name <Node import:replay_buffer.ReplayBuffer>
Attribute val_replay_buffer of self in context <class '_ast.Store'>
Resolve self.val_replay_buffer in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr val_replay_buffer of <Node class:train_policy.Agent>
setattr val_replay_buffer on self to <Node import:replay_buffer.ReplayBuffer>
FunctionDef init_tf_sess
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.init_tf_sess>
Set init_tf_sess in <Scope: class Agent> to <Node method:train_policy.Agent.init_tf_sess>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['tf_config'] [<_ast.Call object at 0x107b06b70>]
Call tf.ConfigProto
Attribute ConfigProto of tf in context <class '_ast.Load'>
Resolve tf.ConfigProto in context <class '_ast.Load'>
Get tf in <Scope: function init_tf_sess>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr ConfigProto of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.ConfigProto> (target obj <Node module:tensorflow> known but target attr ConfigProto not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.ConfigProto> (target obj <Node module:tensorflow> known but target attr ConfigProto not resolved; maybe fwd ref or unanalyzed import)
Name tf_config in context <class '_ast.Store'>
Set tf_config in <Scope: function init_tf_sess> to <Node attribute:tensorflow.ConfigProto>
Assign ['tf_config.gpu_options.allow_growth'] [<_ast.NameConstant object at 0x107b06dd8>]
Attribute allow_growth of tf_config.gpu_options in context <class '_ast.Store'>
Assign ['self.sess'] [<_ast.Call object at 0x107b06eb8>]
Call tf.Session
Name tf_config in context <class '_ast.Load'>
Get tf_config in <Scope: function init_tf_sess>, found in <Scope: function init_tf_sess>, value <Node attribute:tensorflow.ConfigProto>
Use from <Node method:train_policy.Agent.init_tf_sess> to Name <Node attribute:tensorflow.ConfigProto>
Attribute Session of tf in context <class '_ast.Load'>
Resolve tf.Session in context <class '_ast.Load'>
Get tf in <Scope: function init_tf_sess>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr Session of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session> (target obj <Node module:tensorflow> known but target attr Session not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session> (target obj <Node module:tensorflow> known but target attr Session not resolved; maybe fwd ref or unanalyzed import)
Attribute sess of self in context <class '_ast.Store'>
Resolve self.sess in context <class '_ast.Store'>
Get self in <Scope: function init_tf_sess>, found in <Scope: function init_tf_sess>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
setattr sess on self to <Node attribute:tensorflow.Session>
Call self.sess.__enter__
Attribute __enter__ of self.sess in context <class '_ast.Load'>
Resolve self.sess.__enter__ in context <class '_ast.Load'>
Resolve self.sess in context <class '_ast.Load'>
Get self in <Scope: function init_tf_sess>, found in <Scope: function init_tf_sess>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr __enter__ of <Node attribute:tensorflow.Session>
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session.__enter__> (target obj <Node attribute:tensorflow.Session> known but target attr __enter__ not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session.__enter__> (target obj <Node attribute:tensorflow.Session> known but target attr __enter__ not resolved; maybe fwd ref or unanalyzed import)
Call <_ast.Call object at 0x107b0b1d0>.run
Attribute run of <_ast.Call object at 0x107b0b1d0> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x107b0b1d0>.run in context <class '_ast.Load'>
Unresolved function call as obj, returning attr run of unknown
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node ???:*.run> (target obj <_ast.Call object at 0x107b0b1d0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.init_tf_sess> to <Node ???:*.run> (target obj <_ast.Call object at 0x107b0b1d0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef define_placeholders
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.define_placeholders>
Set define_placeholders in <Scope: class Agent> to <Node method:train_policy.Agent.define_placeholders>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['sy_ob_no'] [<_ast.Call object at 0x107b0b400>]
Call tf.placeholder
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.define_placeholders> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute meta_ob_dim of self in context <class '_ast.Load'>
Resolve self.meta_ob_dim in context <class '_ast.Load'>
Get self in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
getattr meta_ob_dim on self returns <Node attribute:train_policy.Agent.terminal_dim>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:train_policy.Agent.terminal_dim>
New edge added for Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:train_policy.Agent.terminal_dim>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_ob_no in context <class '_ast.Store'>
Set sy_ob_no in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_ac_na'] [<_ast.Call object at 0x107b0b7b8>]
Call tf.placeholder
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_ac_na in context <class '_ast.Store'>
Set sy_ac_na in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_adv_n'] [<_ast.Call object at 0x107b0bb00>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_adv_n in context <class '_ast.Store'>
Set sy_adv_n in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_hidden'] [<_ast.Call object at 0x107b0bdd8>]
Call tf.placeholder
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_hidden in context <class '_ast.Store'>
Set sy_hidden in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_lp_n'] [<_ast.Call object at 0x107b0e160>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_lp_n in context <class '_ast.Store'>
Set sy_lp_n in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_fixed_lp_n'] [<_ast.Call object at 0x107b0e438>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_fixed_lp_n in context <class '_ast.Store'>
Set sy_fixed_lp_n in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Name sy_ob_no in context <class '_ast.Load'>
Get sy_ob_no in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_ac_na in context <class '_ast.Load'>
Get sy_ac_na in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_adv_n in context <class '_ast.Load'>
Get sy_adv_n in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_hidden in context <class '_ast.Load'>
Get sy_hidden in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_lp_n in context <class '_ast.Load'>
Get sy_lp_n in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_fixed_lp_n in context <class '_ast.Load'>
Get sy_fixed_lp_n in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
FunctionDef policy_forward_pass
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.policy_forward_pass>
Set policy_forward_pass in <Scope: class Agent> to <Node method:train_policy.Agent.policy_forward_pass>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['sy_policy_params', 'sy_hidden'] [<_ast.Call object at 0x107b0eac8>]
Call build_policy
Name sy_ob_no in context <class '_ast.Load'>
Get sy_ob_no in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
Name sy_hidden in context <class '_ast.Load'>
Get sy_hidden in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute scope of self in context <class '_ast.Load'>
Resolve self.scope in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr scope of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node attribute:train_policy.Agent.scope> (target obj <Node class:train_policy.Agent> known but target attr scope not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node attribute:train_policy.Agent.scope> (target obj <Node class:train_policy.Agent> known but target attr scope not resolved; maybe fwd ref or unanalyzed import)
Attribute n_layers of self in context <class '_ast.Load'>
Resolve self.n_layers in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr n_layers of <Node class:train_policy.Agent>
getattr n_layers on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr size of <Node class:train_policy.Agent>
getattr size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute recurrent of self in context <class '_ast.Load'>
Resolve self.recurrent in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr recurrent of <Node class:train_policy.Agent>
getattr recurrent on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name build_policy in context <class '_ast.Load'>
Get build_policy in <Scope: function policy_forward_pass>, found in <Scope: module >, value <Node function:train_policy.build_policy>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node function:train_policy.build_policy>
New edge added for Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node function:train_policy.build_policy>
Name sy_policy_params in context <class '_ast.Store'>
Set sy_policy_params in <Scope: function policy_forward_pass> to <Node function:train_policy.build_policy>
Name sy_hidden in context <class '_ast.Store'>
Set sy_hidden in <Scope: function policy_forward_pass> to <Node function:train_policy.build_policy>
Name sy_policy_params in context <class '_ast.Load'>
Get sy_policy_params in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node function:train_policy.build_policy>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node function:train_policy.build_policy>
Name sy_hidden in context <class '_ast.Load'>
Get sy_hidden in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node function:train_policy.build_policy>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node function:train_policy.build_policy>
FunctionDef sample_action
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.sample_action>
Set sample_action in <Scope: class Agent> to <Node method:train_policy.Agent.sample_action>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['sy_mean', 'sy_logstd'] ['policy_parameters']
Name policy_parameters in context <class '_ast.Load'>
Get policy_parameters in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Name sy_mean in context <class '_ast.Store'>
Set sy_mean in <Scope: function sample_action> to <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Name sy_logstd in context <class '_ast.Store'>
Set sy_logstd in <Scope: function sample_action> to <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Assign ['sy_sampled_ac'] [<_ast.BinOp object at 0x107b11390>]
Name sy_mean in context <class '_ast.Load'>
Get sy_mean in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Call tf.exp
Name sy_logstd in context <class '_ast.Load'>
Get sy_logstd in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Attribute exp of tf in context <class '_ast.Load'>
Resolve tf.exp in context <class '_ast.Load'>
Get tf in <Scope: function sample_action>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr exp of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.exp> (target obj <Node module:tensorflow> known but target attr exp not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.exp> (target obj <Node module:tensorflow> known but target attr exp not resolved; maybe fwd ref or unanalyzed import)
Call tf.random_normal
Call tf.shape
Name sy_mean in context <class '_ast.Load'>
Get sy_mean in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Attribute shape of tf in context <class '_ast.Load'>
Resolve tf.shape in context <class '_ast.Load'>
Get tf in <Scope: function sample_action>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr shape of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.shape> (target obj <Node module:tensorflow> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.shape> (target obj <Node module:tensorflow> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Attribute random_normal of tf in context <class '_ast.Load'>
Resolve tf.random_normal in context <class '_ast.Load'>
Get tf in <Scope: function sample_action>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr random_normal of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.random_normal> (target obj <Node module:tensorflow> known but target attr random_normal not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.random_normal> (target obj <Node module:tensorflow> known but target attr random_normal not resolved; maybe fwd ref or unanalyzed import)
Name sy_sampled_ac in context <class '_ast.Store'>
Set sy_sampled_ac in <Scope: function sample_action> to <Node attribute:tensorflow.random_normal>
Name sy_sampled_ac in context <class '_ast.Load'>
Get sy_sampled_ac in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node attribute:tensorflow.random_normal>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node attribute:tensorflow.random_normal>
FunctionDef get_log_prob
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.get_log_prob>
Set get_log_prob in <Scope: class Agent> to <Node method:train_policy.Agent.get_log_prob>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['sy_mean', 'sy_logstd'] ['policy_parameters']
Name policy_parameters in context <class '_ast.Load'>
Get policy_parameters in <Scope: function get_log_prob>, found in <Scope: function get_log_prob>, value <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Use from <Node method:train_policy.Agent.get_log_prob> to Name <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.get_log_prob> to Name <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Name sy_mean in context <class '_ast.Store'>
Set sy_mean in <Scope: function get_log_prob> to <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Name sy_logstd in context <class '_ast.Store'>
Set sy_logstd in <Scope: function get_log_prob> to <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Assign ['sy_lp_n'] [<_ast.Call object at 0x107b11a90>]
Call <_ast.Call object at 0x107b11b00>.log_prob
Name sy_ac_na in context <class '_ast.Load'>
Get sy_ac_na in <Scope: function get_log_prob>, found in <Scope: function get_log_prob>, value <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Use from <Node method:train_policy.Agent.get_log_prob> to Name <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Attribute log_prob of <_ast.Call object at 0x107b11b00> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x107b11b00>.log_prob in context <class '_ast.Load'>
Unresolved function call as obj, returning attr log_prob of unknown
Use from <Node method:train_policy.Agent.get_log_prob> to <Node ???:*.log_prob> (target obj <_ast.Call object at 0x107b11b00> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.get_log_prob> to <Node ???:*.log_prob> (target obj <_ast.Call object at 0x107b11b00> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sy_lp_n in context <class '_ast.Store'>
Set sy_lp_n in <Scope: function get_log_prob> to <Node ???:*.log_prob>
Name sy_lp_n in context <class '_ast.Load'>
Get sy_lp_n in <Scope: function get_log_prob>, found in <Scope: function get_log_prob>, value <Node ???:*.log_prob>
Use from <Node method:train_policy.Agent.get_log_prob> to Name <Node ???:*.log_prob>
FunctionDef build_computation_graph
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.build_computation_graph>
Set build_computation_graph in <Scope: class Agent> to <Node method:train_policy.Agent.build_computation_graph>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['self.sy_ob_no', 'self.sy_ac_na', 'self.sy_adv_n', 'self.sy_hidden', 'self.sy_lp_n', 'self.sy_fixed_lp_n'] [<_ast.Call object at 0x107b16278>]
Call self.define_placeholders
Attribute define_placeholders of self in context <class '_ast.Load'>
Resolve self.define_placeholders in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr define_placeholders of <Node class:train_policy.Agent>
getattr define_placeholders on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ob_no of self in context <class '_ast.Store'>
Resolve self.sy_ob_no in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
setattr sy_ob_no on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ac_na of self in context <class '_ast.Store'>
Resolve self.sy_ac_na in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
setattr sy_ac_na on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_adv_n of self in context <class '_ast.Store'>
Resolve self.sy_adv_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_adv_n of <Node class:train_policy.Agent>
setattr sy_adv_n on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Store'>
Resolve self.sy_hidden in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
setattr sy_hidden on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_lp_n of self in context <class '_ast.Store'>
Resolve self.sy_lp_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
setattr sy_lp_n on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_fixed_lp_n of self in context <class '_ast.Store'>
Resolve self.sy_fixed_lp_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_fixed_lp_n of <Node class:train_policy.Agent>
setattr sy_fixed_lp_n on self to <Node method:train_policy.Agent.define_placeholders>
Assign ['policy_outputs'] [<_ast.Call object at 0x107b16390>]
Call self.policy_forward_pass
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute policy_forward_pass of self in context <class '_ast.Load'>
Resolve self.policy_forward_pass in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_forward_pass of <Node class:train_policy.Agent>
getattr policy_forward_pass on self returns <Node method:train_policy.Agent.policy_forward_pass>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.policy_forward_pass>
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.policy_forward_pass>
Name policy_outputs in context <class '_ast.Store'>
Set policy_outputs in <Scope: function build_computation_graph> to <Node method:train_policy.Agent.policy_forward_pass>
Assign ['self.policy_parameters'] [<_ast.Subscript object at 0x107b165c0>]
Name policy_outputs in context <class '_ast.Load'>
Get policy_outputs in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node method:train_policy.Agent.policy_forward_pass>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node method:train_policy.Agent.policy_forward_pass>
Attribute policy_parameters of self in context <class '_ast.Store'>
Resolve self.policy_parameters in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
setattr policy_parameters on self to <Node method:train_policy.Agent.policy_forward_pass>
Assign ['self.policy_parameters'] [<_ast.Call object at 0x107b16780>]
Call tf.split
Attribute policy_parameters of self in context <class '_ast.Load'>
Resolve self.policy_parameters in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
getattr policy_parameters on self returns <Node method:train_policy.Agent.policy_forward_pass>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.policy_forward_pass>
Attribute split of tf in context <class '_ast.Load'>
Resolve tf.split in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr split of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.split> (target obj <Node module:tensorflow> known but target attr split not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.split> (target obj <Node module:tensorflow> known but target attr split not resolved; maybe fwd ref or unanalyzed import)
Attribute policy_parameters of self in context <class '_ast.Store'>
Resolve self.policy_parameters in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
setattr policy_parameters on self to <Node attribute:tensorflow.split>
Assign ['self.sy_sampled_ac'] [<_ast.Call object at 0x107b16a90>]
Call self.sample_action
Attribute policy_parameters of self in context <class '_ast.Load'>
Resolve self.policy_parameters in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
getattr policy_parameters on self returns <Node attribute:tensorflow.split>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.split>
Attribute sample_action of self in context <class '_ast.Load'>
Resolve self.sample_action in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sample_action of <Node class:train_policy.Agent>
getattr sample_action on self returns <Node method:train_policy.Agent.sample_action>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.sample_action>
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.sample_action>
Attribute sy_sampled_ac of self in context <class '_ast.Store'>
Resolve self.sy_sampled_ac in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_sampled_ac of <Node class:train_policy.Agent>
setattr sy_sampled_ac on self to <Node method:train_policy.Agent.sample_action>
Assign ['self.sy_lp_n'] [<_ast.Call object at 0x107b16c50>]
Call self.get_log_prob
Attribute policy_parameters of self in context <class '_ast.Load'>
Resolve self.policy_parameters in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
getattr policy_parameters on self returns <Node attribute:tensorflow.split>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.split>
Attribute sy_ac_na of self in context <class '_ast.Load'>
Resolve self.sy_ac_na in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
getattr sy_ac_na on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute get_log_prob of self in context <class '_ast.Load'>
Resolve self.get_log_prob in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr get_log_prob of <Node class:train_policy.Agent>
getattr get_log_prob on self returns <Node method:train_policy.Agent.get_log_prob>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.get_log_prob>
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.get_log_prob>
Attribute sy_lp_n of self in context <class '_ast.Store'>
Resolve self.sy_lp_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
setattr sy_lp_n on self to <Node method:train_policy.Agent.get_log_prob>
Assign ['critic_regularizer'] [<_ast.IfExp object at 0x107b16e48>]
Attribute l2reg of self in context <class '_ast.Load'>
Resolve self.l2reg in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr l2reg of <Node class:train_policy.Agent>
getattr l2reg on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Call tf.contrib.layers.l2_regularizer
Attribute l2_regularizer of tf.contrib.layers in context <class '_ast.Load'>
Resolve tf.contrib.layers.l2_regularizer in context <class '_ast.Load'>
Resolve tf.contrib.layers in context <class '_ast.Load'>
Resolve tf.contrib in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr contrib of <Node module:tensorflow>
Unresolved, returning attr layers of unknown
Unresolved, returning attr l2_regularizer of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.l2_regularizer> (target obj tf.contrib.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.l2_regularizer> (target obj tf.contrib.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name critic_regularizer in context <class '_ast.Store'>
Set critic_regularizer in <Scope: function build_computation_graph> to <Node ???:*.l2_regularizer>
Assign ['self.critic_prediction'] [<_ast.Call object at 0x107c32160>]
Call tf.squeeze
Call build_critic
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute n_layers of self in context <class '_ast.Load'>
Resolve self.n_layers in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr n_layers of <Node class:train_policy.Agent>
getattr n_layers on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr size of <Node class:train_policy.Agent>
getattr size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute recurrent of self in context <class '_ast.Load'>
Resolve self.recurrent in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr recurrent of <Node class:train_policy.Agent>
getattr recurrent on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name critic_regularizer in context <class '_ast.Load'>
Get critic_regularizer in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node ???:*.l2_regularizer>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node ???:*.l2_regularizer>
Name build_critic in context <class '_ast.Load'>
Get build_critic in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node function:train_policy.build_critic>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node function:train_policy.build_critic>
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node function:train_policy.build_critic>
Attribute squeeze of tf in context <class '_ast.Load'>
Resolve tf.squeeze in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr squeeze of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.squeeze> (target obj <Node module:tensorflow> known but target attr squeeze not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.squeeze> (target obj <Node module:tensorflow> known but target attr squeeze not resolved; maybe fwd ref or unanalyzed import)
Attribute critic_prediction of self in context <class '_ast.Store'>
Resolve self.critic_prediction in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_prediction of <Node class:train_policy.Agent>
setattr critic_prediction on self to <Node attribute:tensorflow.squeeze>
Assign ['self.sy_target_n'] [<_ast.Call object at 0x107c32780>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute sy_target_n of self in context <class '_ast.Store'>
Resolve self.sy_target_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_target_n of <Node class:train_policy.Agent>
setattr sy_target_n on self to <Node attribute:tensorflow.placeholder>
Assign ['self.critic_loss'] [<_ast.Call object at 0x107c32a90>]
Call tf.losses.mean_squared_error
Attribute sy_target_n of self in context <class '_ast.Load'>
Resolve self.sy_target_n in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_target_n of <Node class:train_policy.Agent>
getattr sy_target_n on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.placeholder>
Attribute critic_prediction of self in context <class '_ast.Load'>
Resolve self.critic_prediction in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_prediction of <Node class:train_policy.Agent>
getattr critic_prediction on self returns <Node attribute:tensorflow.squeeze>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.squeeze>
Attribute mean_squared_error of tf.losses in context <class '_ast.Load'>
Resolve tf.losses.mean_squared_error in context <class '_ast.Load'>
Resolve tf.losses in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr losses of <Node module:tensorflow>
Unresolved, returning attr mean_squared_error of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.mean_squared_error> (target obj tf.losses not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.mean_squared_error> (target obj tf.losses not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute critic_loss of self in context <class '_ast.Store'>
Resolve self.critic_loss in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_loss of <Node class:train_policy.Agent>
setattr critic_loss on self to <Node ???:*.mean_squared_error>
Assign ['self.critic_weights'] [<_ast.Call object at 0x107c32cf8>]
Call tf.get_collection
Attribute GLOBAL_VARIABLES of tf.GraphKeys in context <class '_ast.Load'>
Resolve tf.GraphKeys.GLOBAL_VARIABLES in context <class '_ast.Load'>
Resolve tf.GraphKeys in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr GraphKeys of <Node module:tensorflow>
Unresolved, returning attr GLOBAL_VARIABLES of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.GLOBAL_VARIABLES> (target obj tf.GraphKeys not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.GLOBAL_VARIABLES> (target obj tf.GraphKeys not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_collection of tf in context <class '_ast.Load'>
Resolve tf.get_collection in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr get_collection of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.get_collection> (target obj <Node module:tensorflow> known but target attr get_collection not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.get_collection> (target obj <Node module:tensorflow> known but target attr get_collection not resolved; maybe fwd ref or unanalyzed import)
Attribute critic_weights of self in context <class '_ast.Store'>
Resolve self.critic_weights in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_weights of <Node class:train_policy.Agent>
setattr critic_weights on self to <Node attribute:tensorflow.get_collection>
Assign ['self.critic_update_op'] [<_ast.Call object at 0x107c32f60>]
Call <_ast.Call object at 0x107c32fd0>.minimize
Attribute critic_loss of self in context <class '_ast.Load'>
Resolve self.critic_loss in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_loss of <Node class:train_policy.Agent>
getattr critic_loss on self returns <Node ???:*.mean_squared_error>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.mean_squared_error>
Attribute minimize of <_ast.Call object at 0x107c32fd0> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x107c32fd0>.minimize in context <class '_ast.Load'>
Unresolved function call as obj, returning attr minimize of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.minimize> (target obj <_ast.Call object at 0x107c32fd0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.minimize> (target obj <_ast.Call object at 0x107c32fd0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute critic_update_op of self in context <class '_ast.Store'>
Resolve self.critic_update_op in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_update_op of <Node class:train_policy.Agent>
setattr critic_update_op on self to <Node ???:*.minimize>
Assign ['self.sy_fixed_log_prob_n'] [<_ast.Call object at 0x107c1c278>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute sy_fixed_log_prob_n of self in context <class '_ast.Store'>
Resolve self.sy_fixed_log_prob_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_fixed_log_prob_n of <Node class:train_policy.Agent>
setattr sy_fixed_log_prob_n on self to <Node attribute:tensorflow.placeholder>
Assign ['self.policy_surr_loss'] [<_ast.Call object at 0x107c1c588>]
Call self.ppo_loss
Attribute sy_lp_n of self in context <class '_ast.Load'>
Resolve self.sy_lp_n in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
getattr sy_lp_n on self returns <Node method:train_policy.Agent.get_log_prob>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.get_log_prob>
Attribute sy_fixed_lp_n of self in context <class '_ast.Load'>
Resolve self.sy_fixed_lp_n in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_fixed_lp_n of <Node class:train_policy.Agent>
getattr sy_fixed_lp_n on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_adv_n of self in context <class '_ast.Load'>
Resolve self.sy_adv_n in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_adv_n of <Node class:train_policy.Agent>
getattr sy_adv_n on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute ppo_loss of self in context <class '_ast.Load'>
Resolve self.ppo_loss in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr ppo_loss of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:train_policy.Agent.ppo_loss> (target obj <Node class:train_policy.Agent> known but target attr ppo_loss not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:train_policy.Agent.ppo_loss> (target obj <Node class:train_policy.Agent> known but target attr ppo_loss not resolved; maybe fwd ref or unanalyzed import)
Attribute policy_surr_loss of self in context <class '_ast.Store'>
Resolve self.policy_surr_loss in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_surr_loss of <Node class:train_policy.Agent>
setattr policy_surr_loss on self to <Node attribute:train_policy.Agent.ppo_loss>
Assign ['self.policy_weights'] [<_ast.Call object at 0x107c1c828>]
Call tf.get_collection
Attribute GLOBAL_VARIABLES of tf.GraphKeys in context <class '_ast.Load'>
Resolve tf.GraphKeys.GLOBAL_VARIABLES in context <class '_ast.Load'>
Resolve tf.GraphKeys in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr GraphKeys of <Node module:tensorflow>
Unresolved, returning attr GLOBAL_VARIABLES of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.GLOBAL_VARIABLES> (target obj tf.GraphKeys not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute scope of self in context <class '_ast.Load'>
Resolve self.scope in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr scope of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:train_policy.Agent.scope> (target obj <Node class:train_policy.Agent> known but target attr scope not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:train_policy.Agent.scope> (target obj <Node class:train_policy.Agent> known but target attr scope not resolved; maybe fwd ref or unanalyzed import)
Attribute get_collection of tf in context <class '_ast.Load'>
Resolve tf.get_collection in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr get_collection of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.get_collection> (target obj <Node module:tensorflow> known but target attr get_collection not resolved; maybe fwd ref or unanalyzed import)
Attribute policy_weights of self in context <class '_ast.Store'>
Resolve self.policy_weights in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_weights of <Node class:train_policy.Agent>
setattr policy_weights on self to <Node attribute:tensorflow.get_collection>
Assign ['optimizer'] [<_ast.Call object at 0x107c1ca90>]
Call tf.train.AdamOptimizer
Attribute learning_rate of self in context <class '_ast.Load'>
Resolve self.learning_rate in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr learning_rate of <Node class:train_policy.Agent>
getattr learning_rate on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute AdamOptimizer of tf.train in context <class '_ast.Load'>
Resolve tf.train.AdamOptimizer in context <class '_ast.Load'>
Resolve tf.train in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr train of <Node module:tensorflow>
Unresolved, returning attr AdamOptimizer of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.AdamOptimizer> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.AdamOptimizer> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name optimizer in context <class '_ast.Store'>
Set optimizer in <Scope: function build_computation_graph> to <Node ???:*.AdamOptimizer>
Assign ['self.policy_update_op'] [<_ast.Call object at 0x107c1cc88>]
Call minimize_and_clip
Name optimizer in context <class '_ast.Load'>
Get optimizer in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node ???:*.AdamOptimizer>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node ???:*.AdamOptimizer>
Attribute policy_surr_loss of self in context <class '_ast.Load'>
Resolve self.policy_surr_loss in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_surr_loss of <Node class:train_policy.Agent>
getattr policy_surr_loss on self returns <Node attribute:train_policy.Agent.ppo_loss>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:train_policy.Agent.ppo_loss>
Attribute policy_weights of self in context <class '_ast.Load'>
Resolve self.policy_weights in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_weights of <Node class:train_policy.Agent>
getattr policy_weights on self returns <Node attribute:tensorflow.get_collection>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.get_collection>
Name minimize_and_clip in context <class '_ast.Load'>
Get minimize_and_clip in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node function:train_policy.minimize_and_clip>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node function:train_policy.minimize_and_clip>
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node function:train_policy.minimize_and_clip>
Attribute policy_update_op of self in context <class '_ast.Store'>
Resolve self.policy_update_op in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_update_op of <Node class:train_policy.Agent>
setattr policy_update_op on self to <Node function:train_policy.minimize_and_clip>
FunctionDef sample_trajectories
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.sample_trajectories>
Set sample_trajectories in <Scope: class Agent> to <Node method:train_policy.Agent.sample_trajectories>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['timesteps_this_batch'] [<_ast.Num object at 0x107c1f128>]
Name timesteps_this_batch in context <class '_ast.Store'>
Set timesteps_this_batch in <Scope: function sample_trajectories>: value None is not a Node
Assign ['stats'] []
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function sample_trajectories>: value None is not a Node
Assign ['animate_this_episode'] [<_ast.BoolOp object at 0x107c1f2e8>]
Call len
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function sample_trajectories>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ???:*.stats>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ???:*.stats>
Name len in context <class '_ast.Load'>
Get len in <Scope: function sample_trajectories>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ???:*.len>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ???:*.len>
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Attribute animate of self in context <class '_ast.Load'>
Resolve self.animate in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node class:train_policy.Agent>
Resolved to attr animate of <Node class:train_policy.Agent>
getattr animate on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectories> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name animate_this_episode in context <class '_ast.Store'>
Set animate_this_episode in <Scope: function sample_trajectories> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['steps', 's'] [<_ast.Call object at 0x107c1f6a0>]
Call self.sample_trajectory
Name env in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Name animate_this_episode in context <class '_ast.Load'>
Get animate_this_episode in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name is_evaluation in context <class '_ast.Load'>
Get is_evaluation in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Attribute sample_trajectory of self in context <class '_ast.Load'>
Resolve self.sample_trajectory in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node class:train_policy.Agent>
Resolved to attr sample_trajectory of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.sample_trajectories> to <Node attribute:train_policy.Agent.sample_trajectory> (target obj <Node class:train_policy.Agent> known but target attr sample_trajectory not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectories> to <Node attribute:train_policy.Agent.sample_trajectory> (target obj <Node class:train_policy.Agent> known but target attr sample_trajectory not resolved; maybe fwd ref or unanalyzed import)
Name steps in context <class '_ast.Store'>
Set steps in <Scope: function sample_trajectories> to <Node attribute:train_policy.Agent.sample_trajectory>
Name s in context <class '_ast.Store'>
Set s in <Scope: function sample_trajectories> to <Node attribute:train_policy.Agent.sample_trajectory>
AugAssign ['stats'] <class '_ast.Add'> ['s']
Name s in context <class '_ast.Load'>
Get s in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node attribute:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node attribute:train_policy.Agent.sample_trajectory>
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function sample_trajectories> to <Node attribute:train_policy.Agent.sample_trajectory>
AugAssign ['timesteps_this_batch'] <class '_ast.Add'> ['steps']
Name steps in context <class '_ast.Load'>
Get steps in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node attribute:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node attribute:train_policy.Agent.sample_trajectory>
Name timesteps_this_batch in context <class '_ast.Store'>
Set timesteps_this_batch in <Scope: function sample_trajectories> to <Node attribute:train_policy.Agent.sample_trajectory>
Name timesteps_this_batch in context <class '_ast.Load'>
Get timesteps_this_batch in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node attribute:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node attribute:train_policy.Agent.sample_trajectory>
Name min_timesteps in context <class '_ast.Load'>
Get min_timesteps in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node attribute:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node attribute:train_policy.Agent.sample_trajectory>
Name timesteps_this_batch in context <class '_ast.Load'>
Get timesteps_this_batch in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node attribute:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node attribute:train_policy.Agent.sample_trajectory>
FunctionDef sample_trajectory
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.sample_trajectory>
Set sample_trajectory in <Scope: class Agent> to <Node method:train_policy.Agent.sample_trajectory>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Call env.reset_task
Name is_evaluation in context <class '_ast.Load'>
Get is_evaluation in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Attribute reset_task of env in context <class '_ast.Load'>
Resolve env.reset_task in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr reset_task of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset_task> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr reset_task not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset_task> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr reset_task not resolved; maybe fwd ref or unanalyzed import)
Assign ['stats'] []
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function sample_trajectory>: value None is not a Node
Assign ['ep_steps'] [<_ast.Num object at 0x107c1ff98>]
Name ep_steps in context <class '_ast.Store'>
Set ep_steps in <Scope: function sample_trajectory>: value None is not a Node
Assign ['steps'] [<_ast.Num object at 0x107c24080>]
Name steps in context <class '_ast.Store'>
Set steps in <Scope: function sample_trajectory>: value None is not a Node
Assign ['num_samples'] [<_ast.Call object at 0x107c24128>]
Call max
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute max_path_length of self in context <class '_ast.Load'>
Resolve self.max_path_length in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr max_path_length of <Node class:train_policy.Agent>
getattr max_path_length on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name max in context <class '_ast.Load'>
Get max in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.max>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.max>
Name num_samples in context <class '_ast.Store'>
Set num_samples in <Scope: function sample_trajectory> to <Node ???:*.max>
Assign ['meta_obs'] [<_ast.Call object at 0x107c24358>]
Call np.zeros
Name num_samples in context <class '_ast.Load'>
Get num_samples in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.max>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.max>
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute meta_ob_dim of self in context <class '_ast.Load'>
Resolve self.meta_ob_dim in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
getattr meta_ob_dim on self returns <Node attribute:train_policy.Agent.terminal_dim>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.terminal_dim>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.terminal_dim>
Attribute zeros of np in context <class '_ast.Load'>
Resolve np.zeros in context <class '_ast.Load'>
Get np in <Scope: function sample_trajectory>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr zeros of <Node module:numpy>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.zeros> (target obj <Node module:numpy> known but target attr zeros not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.zeros> (target obj <Node module:numpy> known but target attr zeros not resolved; maybe fwd ref or unanalyzed import)
Name meta_obs in context <class '_ast.Store'>
Set meta_obs in <Scope: function sample_trajectory> to <Node attribute:numpy.zeros>
Assign ['rewards'] []
Name rewards in context <class '_ast.Store'>
Set rewards in <Scope: function sample_trajectory>: value None is not a Node
Name animate_this_episode in context <class '_ast.Load'>
Get animate_this_episode in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Call env.render
Attribute render of env in context <class '_ast.Load'>
Resolve env.render in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr render of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.render> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr render not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.render> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr render not resolved; maybe fwd ref or unanalyzed import)
Call time.sleep
Attribute sleep of time in context <class '_ast.Load'>
Resolve time.sleep in context <class '_ast.Load'>
Get time in <Scope: function sample_trajectory>, found in <Scope: module >, value <Node module:time>
Resolved to attr sleep of <Node module:time>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:time.sleep> (target obj <Node module:time> known but target attr sleep not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:time.sleep> (target obj <Node module:time> known but target attr sleep not resolved; maybe fwd ref or unanalyzed import)
Name ep_steps in context <class '_ast.Load'>
Get ep_steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
Assign ['ob'] [<_ast.Call object at 0x107c24ac8>]
Call env.reset
Attribute reset of env in context <class '_ast.Load'>
Resolve env.reset in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr reset of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr reset not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr reset not resolved; maybe fwd ref or unanalyzed import)
Name ob in context <class '_ast.Store'>
Set ob in <Scope: function sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset>
AugAssign ['steps'] <class '_ast.Add'> [<_ast.Num object at 0x107c24be0>]
Name steps in context <class '_ast.Store'>
Set steps in <Scope: function sample_trajectory>: value None is not a Node
Assign ['hidden'] [<_ast.Call object at 0x107c24c88>]
Call np.zeros
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute float32 of np in context <class '_ast.Load'>
Resolve np.float32 in context <class '_ast.Load'>
Get np in <Scope: function sample_trajectory>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr float32 of <Node module:numpy>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute zeros of np in context <class '_ast.Load'>
Resolve np.zeros in context <class '_ast.Load'>
Get np in <Scope: function sample_trajectory>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr zeros of <Node module:numpy>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.zeros> (target obj <Node module:numpy> known but target attr zeros not resolved; maybe fwd ref or unanalyzed import)
Name hidden in context <class '_ast.Store'>
Set hidden in <Scope: function sample_trajectory> to <Node attribute:numpy.zeros>
AugAssign ['ep_steps'] <class '_ast.Add'> [<_ast.Num object at 0x107c24f28>]
Name ep_steps in context <class '_ast.Store'>
Set ep_steps in <Scope: function sample_trajectory>: value None is not a Node
Assign ['done'] [<_ast.BoolOp object at 0x107c24fd0>]
Call bool
Name done in context <class '_ast.Load'>
Get done in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.done>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.done>
Name bool in context <class '_ast.Load'>
Get bool in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.bool>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.bool>
Name ep_steps in context <class '_ast.Load'>
Get ep_steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
Attribute max_path_length of self in context <class '_ast.Load'>
Resolve self.max_path_length in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr max_path_length of <Node class:train_policy.Agent>
getattr max_path_length on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name done in context <class '_ast.Store'>
Set done in <Scope: function sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Call rewards.append
Name rew in context <class '_ast.Load'>
Get rew in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rew>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rew>
Attribute append of rewards in context <class '_ast.Load'>
Resolve rewards.append in context <class '_ast.Load'>
Get rewards in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ???:*.append> (target obj rewards not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ???:*.append> (target obj rewards not resolved; maybe fwd ref, function argument, or unanalyzed import)
AugAssign ['steps'] <class '_ast.Add'> [<_ast.Num object at 0x107c27358>]
Name steps in context <class '_ast.Store'>
Set steps in <Scope: function sample_trajectory>: value None is not a Node
Name is_evaluation in context <class '_ast.Load'>
Get is_evaluation in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Call self.val_replay_buffer.add_sample
Name in_ in context <class '_ast.Load'>
Get in_ in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.in_>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.in_>
Name ac in context <class '_ast.Load'>
Get ac in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ac>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ac>
Name rew in context <class '_ast.Load'>
Get rew in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rew>
Name done in context <class '_ast.Load'>
Get done in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node attribute:numpy.zeros>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node attribute:numpy.zeros>
Attribute _goal of env in context <class '_ast.Load'>
Resolve env._goal in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr _goal of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^._goal> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr _goal not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^._goal> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr _goal not resolved; maybe fwd ref or unanalyzed import)
Attribute add_sample of self.val_replay_buffer in context <class '_ast.Load'>
Resolve self.val_replay_buffer.add_sample in context <class '_ast.Load'>
Resolve self.val_replay_buffer in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr val_replay_buffer of <Node class:train_policy.Agent>
Resolved to attr add_sample of <Node import:replay_buffer.ReplayBuffer>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:replay_buffer.ReplayBuffer.add_sample> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr add_sample not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:replay_buffer.ReplayBuffer.add_sample> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr add_sample not resolved; maybe fwd ref or unanalyzed import)
Call self.replay_buffer.add_sample
Name in_ in context <class '_ast.Load'>
Get in_ in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.in_>
Name ac in context <class '_ast.Load'>
Get ac in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ac>
Name rew in context <class '_ast.Load'>
Get rew in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rew>
Name done in context <class '_ast.Load'>
Get done in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node attribute:numpy.zeros>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node attribute:numpy.zeros>
Attribute _goal of env in context <class '_ast.Load'>
Resolve env._goal in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr _goal of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^._goal> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr _goal not resolved; maybe fwd ref or unanalyzed import)
Attribute add_sample of self.replay_buffer in context <class '_ast.Load'>
Resolve self.replay_buffer.add_sample in context <class '_ast.Load'>
Resolve self.replay_buffer in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr replay_buffer of <Node class:train_policy.Agent>
Resolved to attr add_sample of <Node import:replay_buffer.ReplayBuffer>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:replay_buffer.ReplayBuffer.add_sample> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr add_sample not resolved; maybe fwd ref or unanalyzed import)
Name done in context <class '_ast.Load'>
Get done in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['s'] [<_ast.Call object at 0x107c27a20>]
Call dict
Name dict in context <class '_ast.Load'>
Get dict in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
Name s in context <class '_ast.Store'>
Set s in <Scope: function sample_trajectory> to <Node ???:*.dict>
Assign [<_ast.Subscript object at 0x107c27ac8>] [<_ast.Subscript object at 0x107c27ba8>]
Name rewards in context <class '_ast.Load'>
Get rewards in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rewards>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rewards>
Name ep_steps in context <class '_ast.Load'>
Get ep_steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
Name s in context <class '_ast.Load'>
Get s in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.dict>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
Assign [<_ast.Subscript object at 0x107c27cf8>] ['ep_steps']
Name ep_steps in context <class '_ast.Load'>
Get ep_steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
Name s in context <class '_ast.Load'>
Get s in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.dict>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
Call stats.append
Name s in context <class '_ast.Load'>
Get s in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.dict>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
Attribute append of stats in context <class '_ast.Load'>
Resolve stats.append in context <class '_ast.Load'>
Get stats in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ???:*.append> (target obj stats not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['ep_steps'] [<_ast.Num object at 0x107c27f98>]
Name ep_steps in context <class '_ast.Store'>
Set ep_steps in <Scope: function sample_trajectory>: value None is not a Node
Name steps in context <class '_ast.Load'>
Get steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.steps>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.steps>
Name num_samples in context <class '_ast.Load'>
Get num_samples in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.max>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.max>
Name steps in context <class '_ast.Load'>
Get steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.steps>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.stats>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.stats>
FunctionDef compute_advantage
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.compute_advantage>
Set compute_advantage in <Scope: class Agent> to <Node method:train_policy.Agent.compute_advantage>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['bsize'] [<_ast.Call object at 0x107c2a4e0>]
Call len
Name re_n in context <class '_ast.Load'>
Get re_n in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Name bsize in context <class '_ast.Store'>
Set bsize in <Scope: function compute_advantage> to <Node ???:*.len>
Assign ['rewards'] [<_ast.Call object at 0x107c2a5f8>]
Call np.squeeze
Name re_n in context <class '_ast.Load'>
Get re_n in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Attribute squeeze of np in context <class '_ast.Load'>
Resolve np.squeeze in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr squeeze of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze> (target obj <Node module:numpy> known but target attr squeeze not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze> (target obj <Node module:numpy> known but target attr squeeze not resolved; maybe fwd ref or unanalyzed import)
Name rewards in context <class '_ast.Store'>
Set rewards in <Scope: function compute_advantage> to <Node attribute:numpy.squeeze>
Assign ['masks'] [<_ast.Call object at 0x107c2a748>]
Call np.squeeze
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Attribute squeeze of np in context <class '_ast.Load'>
Resolve np.squeeze in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr squeeze of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze> (target obj <Node module:numpy> known but target attr squeeze not resolved; maybe fwd ref or unanalyzed import)
Name masks in context <class '_ast.Store'>
Set masks in <Scope: function compute_advantage> to <Node attribute:numpy.squeeze>
Assign ['values'] [<_ast.Subscript object at 0x107c2a898>]
Call self.sess.run
Attribute critic_prediction of self in context <class '_ast.Load'>
Resolve self.critic_prediction in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr critic_prediction of <Node class:train_policy.Agent>
getattr critic_prediction on self returns <Node attribute:tensorflow.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.squeeze>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.squeeze>
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node method:train_policy.Agent.define_placeholders>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node method:train_policy.Agent.define_placeholders>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Attribute run of self.sess in context <class '_ast.Load'>
Resolve self.sess.run in context <class '_ast.Load'>
Resolve self.sess in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name values in context <class '_ast.Store'>
Set values in <Scope: function compute_advantage> to <Node attribute:tensorflow.Session.run>
Assign ['gamma'] ['self.gamma']
Attribute gamma of self in context <class '_ast.Load'>
Resolve self.gamma in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr gamma of <Node class:train_policy.Agent>
getattr gamma on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name gamma in context <class '_ast.Store'>
Set gamma in <Scope: function compute_advantage> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute shape of rewards in context <class '_ast.Load'>
Resolve rewards.shape in context <class '_ast.Load'>
Get rewards in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Resolved to attr shape of <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze.shape> (target obj <Node attribute:numpy.squeeze> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze.shape> (target obj <Node attribute:numpy.squeeze> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Attribute shape of masks in context <class '_ast.Load'>
Resolve masks.shape in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Resolved to attr shape of <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze.shape> (target obj <Node attribute:numpy.squeeze> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Attribute shape of values in context <class '_ast.Load'>
Resolve values.shape in context <class '_ast.Load'>
Get values in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:tensorflow.Session.run>
Resolved to attr shape of <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.Session.run.shape> (target obj <Node attribute:tensorflow.Session.run> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.Session.run.shape> (target obj <Node attribute:tensorflow.Session.run> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Assign ['bsize'] [<_ast.Call object at 0x107c371d0>]
Call len
Name rewards in context <class '_ast.Load'>
Get rewards in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name len in context <class '_ast.Load'>
Get len in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Name bsize in context <class '_ast.Store'>
Set bsize in <Scope: function compute_advantage> to <Node ???:*.len>
Assign ['returns'] [<_ast.Call object at 0x107c372e8>]
Call np.empty
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Name returns in context <class '_ast.Store'>
Set returns in <Scope: function compute_advantage> to <Node attribute:numpy.empty>
Assign ['deltas'] [<_ast.Call object at 0x107c37470>]
Call np.empty
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Name deltas in context <class '_ast.Store'>
Set deltas in <Scope: function compute_advantage> to <Node attribute:numpy.empty>
Assign ['advantages'] [<_ast.Call object at 0x107c375f8>]
Call np.empty
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Name advantages in context <class '_ast.Store'>
Set advantages in <Scope: function compute_advantage> to <Node attribute:numpy.empty>
Assign ['prev_return'] [<_ast.Num object at 0x107c37780>]
Name prev_return in context <class '_ast.Store'>
Set prev_return in <Scope: function compute_advantage>: value None is not a Node
Assign ['prev_value'] [<_ast.Num object at 0x107c37828>]
Name prev_value in context <class '_ast.Store'>
Set prev_value in <Scope: function compute_advantage>: value None is not a Node
Assign ['prev_advantage'] [<_ast.Num object at 0x107c378d0>]
Name prev_advantage in context <class '_ast.Store'>
Set prev_advantage in <Scope: function compute_advantage>: value None is not a Node
For-loop
Call reversed
Call range
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Name range in context <class '_ast.Load'>
Get range in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.range>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.range>
Name reversed in context <class '_ast.Load'>
Get reversed in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name i in context <class '_ast.Store'>
Set i in <Scope: function compute_advantage> to <Node ???:*.reversed>
Assign [<_ast.Subscript object at 0x107c37ac8>] [<_ast.BinOp object at 0x107c37ba8>]
Name rewards in context <class '_ast.Load'>
Get rewards in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name prev_return in context <class '_ast.Load'>
Get prev_return in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.prev_return>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.prev_return>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Assign [<_ast.Subscript object at 0x107c37eb8>] [<_ast.BinOp object at 0x107c37f98>]
Name rewards in context <class '_ast.Load'>
Get rewards in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name prev_value in context <class '_ast.Load'>
Get prev_value in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.prev_value>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.prev_value>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name values in context <class '_ast.Load'>
Get values in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:tensorflow.Session.run>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name deltas in context <class '_ast.Load'>
Get deltas in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Assign [<_ast.Subscript object at 0x107c3d400>] [<_ast.BinOp object at 0x107c3d4e0>]
Name deltas in context <class '_ast.Load'>
Get deltas in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name tau in context <class '_ast.Load'>
Get tau in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Name prev_advantage in context <class '_ast.Load'>
Get prev_advantage in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.prev_advantage>
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.prev_advantage>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Assign ['prev_return'] [<_ast.Subscript object at 0x107c3d898>]
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name prev_return in context <class '_ast.Store'>
Set prev_return in <Scope: function compute_advantage> to <Node ???:*.reversed>
Assign ['prev_value'] [<_ast.Subscript object at 0x107c3d9e8>]
Name values in context <class '_ast.Load'>
Get values in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:tensorflow.Session.run>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name prev_value in context <class '_ast.Store'>
Set prev_value in <Scope: function compute_advantage> to <Node ???:*.reversed>
Assign ['prev_advantage'] [<_ast.Subscript object at 0x107c3db38>]
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name prev_advantage in context <class '_ast.Store'>
Set prev_advantage in <Scope: function compute_advantage> to <Node ???:*.reversed>
Assign ['advantages'] [<_ast.BinOp object at 0x107c3dc88>]
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Call np.mean
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Call np.std
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Attribute std of np in context <class '_ast.Load'>
Resolve np.std in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr std of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
Name advantages in context <class '_ast.Store'>
Set advantages in <Scope: function compute_advantage> to <Node attribute:numpy.std>
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.std>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.std>
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
FunctionDef estimate_return
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.estimate_return>
Set estimate_return in <Scope: class Agent> to <Node method:train_policy.Agent.estimate_return>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['adv_n', 'q_n'] [<_ast.Call object at 0x107c3e3c8>]
Call self.compute_advantage
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Name re_n in context <class '_ast.Load'>
Get re_n in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Attribute compute_advantage of self in context <class '_ast.Load'>
Resolve self.compute_advantage in context <class '_ast.Load'>
Get self in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node class:train_policy.Agent>
Resolved to attr compute_advantage of <Node class:train_policy.Agent>
getattr compute_advantage on self returns <Node method:train_policy.Agent.compute_advantage>
Use from <Node method:train_policy.Agent.estimate_return> to <Node method:train_policy.Agent.compute_advantage>
New edge added for Use from <Node method:train_policy.Agent.estimate_return> to <Node method:train_policy.Agent.compute_advantage>
Name adv_n in context <class '_ast.Store'>
Set adv_n in <Scope: function estimate_return> to <Node method:train_policy.Agent.compute_advantage>
Name q_n in context <class '_ast.Store'>
Set q_n in <Scope: function estimate_return> to <Node method:train_policy.Agent.compute_advantage>
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node method:train_policy.Agent.compute_advantage>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node method:train_policy.Agent.compute_advantage>
Name adv_n in context <class '_ast.Load'>
Get adv_n in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node method:train_policy.Agent.compute_advantage>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node method:train_policy.Agent.compute_advantage>
FunctionDef update_parameters
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.update_parameters>
Set update_parameters in <Scope: class Agent> to <Node method:train_policy.Agent.update_parameters>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Call self.update_critic
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Attribute update_critic of self in context <class '_ast.Load'>
Resolve self.update_critic in context <class '_ast.Load'>
Get self in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node class:train_policy.Agent>
Resolved to attr update_critic of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.update_parameters> to <Node attribute:train_policy.Agent.update_critic> (target obj <Node class:train_policy.Agent> known but target attr update_critic not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.update_parameters> to <Node attribute:train_policy.Agent.update_critic> (target obj <Node class:train_policy.Agent> known but target attr update_critic not resolved; maybe fwd ref or unanalyzed import)
Call self.update_policy
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name adv_n in context <class '_ast.Load'>
Get adv_n in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Attribute update_policy of self in context <class '_ast.Load'>
Resolve self.update_policy in context <class '_ast.Load'>
Get self in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node class:train_policy.Agent>
Resolved to attr update_policy of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.update_parameters> to <Node attribute:train_policy.Agent.update_policy> (target obj <Node class:train_policy.Agent> known but target attr update_policy not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.update_parameters> to <Node attribute:train_policy.Agent.update_policy> (target obj <Node class:train_policy.Agent> known but target attr update_policy not resolved; maybe fwd ref or unanalyzed import)
FunctionDef update_critic
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.update_critic>
Set update_critic in <Scope: class Agent> to <Node method:train_policy.Agent.update_critic>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['target_n'] [<_ast.BinOp object at 0x107c3ee80>]
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Call np.mean
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function update_critic>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Call np.std
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Attribute std of np in context <class '_ast.Load'>
Resolve np.std in context <class '_ast.Load'>
Get np in <Scope: function update_critic>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr std of <Node module:numpy>
Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
Name target_n in context <class '_ast.Store'>
Set target_n in <Scope: function update_critic> to <Node attribute:numpy.std>
For-loop
Call range
Attribute num_value_iters of self in context <class '_ast.Load'>
Resolve self.num_value_iters in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr num_value_iters of <Node class:train_policy.Agent>
getattr num_value_iters on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.update_critic> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function update_critic>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ???:*.range>
New edge added for Use from <Node method:train_policy.Agent.update_critic> to Name <Node ???:*.range>
Name k in context <class '_ast.Store'>
Set k in <Scope: function update_critic> to <Node ???:*.range>
Assign ['critic_loss', '_'] [<_ast.Call object at 0x107c443c8>]
Call self.sess.run
Attribute critic_loss of self in context <class '_ast.Load'>
Resolve self.critic_loss in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr critic_loss of <Node class:train_policy.Agent>
getattr critic_loss on self returns <Node ???:*.mean_squared_error>
Use from <Node method:train_policy.Agent.update_critic> to <Node ???:*.mean_squared_error>
New edge added for Use from <Node method:train_policy.Agent.update_critic> to <Node ???:*.mean_squared_error>
Attribute critic_update_op of self in context <class '_ast.Load'>
Resolve self.critic_update_op in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr critic_update_op of <Node class:train_policy.Agent>
getattr critic_update_op on self returns <Node ???:*.minimize>
Use from <Node method:train_policy.Agent.update_critic> to <Node ???:*.minimize>
New edge added for Use from <Node method:train_policy.Agent.update_critic> to <Node ???:*.minimize>
Attribute sy_target_n of self in context <class '_ast.Load'>
Resolve self.sy_target_n in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr sy_target_n of <Node class:train_policy.Agent>
getattr sy_target_n on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:tensorflow.placeholder>
New edge added for Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:tensorflow.placeholder>
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_critic> to <Node method:train_policy.Agent.define_placeholders>
New edge added for Use from <Node method:train_policy.Agent.update_critic> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_critic> to <Node method:train_policy.Agent.define_placeholders>
Name target_n in context <class '_ast.Load'>
Get target_n in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node attribute:numpy.std>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node attribute:numpy.std>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Attribute run of self.sess in context <class '_ast.Load'>
Resolve self.sess.run in context <class '_ast.Load'>
Resolve self.sess in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name critic_loss in context <class '_ast.Store'>
Set critic_loss in <Scope: function update_critic> to <Node attribute:tensorflow.Session.run>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function update_critic> to <Node attribute:tensorflow.Session.run>
Name critic_loss in context <class '_ast.Load'>
Get critic_loss in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node attribute:tensorflow.Session.run>
FunctionDef update_policy
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.update_policy>
Set update_policy in <Scope: class Agent> to <Node method:train_policy.Agent.update_policy>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['policy_surr_loss', '_'] [<_ast.Call object at 0x107c44ba8>]
Call self.sess.run
Attribute policy_surr_loss of self in context <class '_ast.Load'>
Resolve self.policy_surr_loss in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr policy_surr_loss of <Node class:train_policy.Agent>
getattr policy_surr_loss on self returns <Node attribute:train_policy.Agent.ppo_loss>
Use from <Node method:train_policy.Agent.update_policy> to <Node attribute:train_policy.Agent.ppo_loss>
New edge added for Use from <Node method:train_policy.Agent.update_policy> to <Node attribute:train_policy.Agent.ppo_loss>
Attribute policy_update_op of self in context <class '_ast.Load'>
Resolve self.policy_update_op in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr policy_update_op of <Node class:train_policy.Agent>
getattr policy_update_op on self returns <Node function:train_policy.minimize_and_clip>
Use from <Node method:train_policy.Agent.update_policy> to <Node function:train_policy.minimize_and_clip>
New edge added for Use from <Node method:train_policy.Agent.update_policy> to <Node function:train_policy.minimize_and_clip>
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
New edge added for Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ac_na of self in context <class '_ast.Load'>
Resolve self.sy_ac_na in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
getattr sy_ac_na on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_fixed_lp_n of self in context <class '_ast.Load'>
Resolve self.sy_fixed_lp_n in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_fixed_lp_n of <Node class:train_policy.Agent>
getattr sy_fixed_lp_n on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_adv_n of self in context <class '_ast.Load'>
Resolve self.sy_adv_n in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_adv_n of <Node class:train_policy.Agent>
getattr sy_adv_n on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Attribute run of self.sess in context <class '_ast.Load'>
Resolve self.sess.run in context <class '_ast.Load'>
Resolve self.sess in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node method:train_policy.Agent.update_policy> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.update_policy> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name policy_surr_loss in context <class '_ast.Store'>
Set policy_surr_loss in <Scope: function update_policy> to <Node attribute:tensorflow.Session.run>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function update_policy> to <Node attribute:tensorflow.Session.run>
Name policy_surr_loss in context <class '_ast.Load'>
Get policy_surr_loss in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node attribute:tensorflow.Session.run>
FunctionDef ppo_loss
Def from <Node class:train_policy.Agent> to Function <Node method:train_policy.Agent.ppo_loss>
Set ppo_loss in <Scope: class Agent> to <Node method:train_policy.Agent.ppo_loss>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['ratio'] [<_ast.Call object at 0x107c48518>]
Call tf.exp
Name log_probs in context <class '_ast.Load'>
Get log_probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
New edge added for Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Attribute exp of tf in context <class '_ast.Load'>
Resolve tf.exp in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr exp of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.exp> (target obj <Node module:tensorflow> known but target attr exp not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.exp> (target obj <Node module:tensorflow> known but target attr exp not resolved; maybe fwd ref or unanalyzed import)
Name ratio in context <class '_ast.Store'>
Set ratio in <Scope: function ppo_loss> to <Node attribute:tensorflow.exp>
Assign ['surr1'] [<_ast.BinOp object at 0x107c486d8>]
Name ratio in context <class '_ast.Load'>
Get ratio in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.exp>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.exp>
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name surr1 in context <class '_ast.Store'>
Set surr1 in <Scope: function ppo_loss> to <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Assign ['surr2'] [<_ast.BinOp object at 0x107c487f0>]
Call tf.clip_by_value
Name ratio in context <class '_ast.Load'>
Get ratio in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.exp>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.exp>
Name clip_epsilon in context <class '_ast.Load'>
Get clip_epsilon in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name clip_epsilon in context <class '_ast.Load'>
Get clip_epsilon in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Attribute clip_by_value of tf in context <class '_ast.Load'>
Resolve tf.clip_by_value in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr clip_by_value of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.clip_by_value> (target obj <Node module:tensorflow> known but target attr clip_by_value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.clip_by_value> (target obj <Node module:tensorflow> known but target attr clip_by_value not resolved; maybe fwd ref or unanalyzed import)
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name surr2 in context <class '_ast.Store'>
Set surr2 in <Scope: function ppo_loss> to <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Assign ['policy_surr_loss'] [<_ast.UnaryOp object at 0x107c48b70>]
Call tf.reduce_mean
Call tf.minimum
Name surr1 in context <class '_ast.Load'>
Get surr1 in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name surr2 in context <class '_ast.Load'>
Get surr2 in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Attribute minimum of tf in context <class '_ast.Load'>
Resolve tf.minimum in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr minimum of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.minimum> (target obj <Node module:tensorflow> known but target attr minimum not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.minimum> (target obj <Node module:tensorflow> known but target attr minimum not resolved; maybe fwd ref or unanalyzed import)
Attribute reduce_mean of tf in context <class '_ast.Load'>
Resolve tf.reduce_mean in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reduce_mean of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.reduce_mean> (target obj <Node module:tensorflow> known but target attr reduce_mean not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.reduce_mean> (target obj <Node module:tensorflow> known but target attr reduce_mean not resolved; maybe fwd ref or unanalyzed import)
Name policy_surr_loss in context <class '_ast.Store'>
Set policy_surr_loss in <Scope: function ppo_loss> to <Node attribute:tensorflow.reduce_mean>
Assign ['probs'] [<_ast.Call object at 0x107c48dd8>]
Call tf.exp
Name log_probs in context <class '_ast.Load'>
Get log_probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Attribute exp of tf in context <class '_ast.Load'>
Resolve tf.exp in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr exp of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.exp> (target obj <Node module:tensorflow> known but target attr exp not resolved; maybe fwd ref or unanalyzed import)
Name probs in context <class '_ast.Store'>
Set probs in <Scope: function ppo_loss> to <Node attribute:tensorflow.exp>
Assign ['entropy'] [<_ast.Call object at 0x107c48f28>]
Call tf.reduce_sum
Name log_probs in context <class '_ast.Load'>
Get log_probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name probs in context <class '_ast.Load'>
Get probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.exp>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.exp>
Attribute reduce_sum of tf in context <class '_ast.Load'>
Resolve tf.reduce_sum in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reduce_sum of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.reduce_sum> (target obj <Node module:tensorflow> known but target attr reduce_sum not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.reduce_sum> (target obj <Node module:tensorflow> known but target attr reduce_sum not resolved; maybe fwd ref or unanalyzed import)
Name entropy in context <class '_ast.Store'>
Set entropy in <Scope: function ppo_loss> to <Node attribute:tensorflow.reduce_sum>
AugAssign ['policy_surr_loss'] <class '_ast.Sub'> [<_ast.BinOp object at 0x107c4a160>]
Name entropy_coeff in context <class '_ast.Load'>
Get entropy_coeff in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name entropy in context <class '_ast.Load'>
Get entropy in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.reduce_sum>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.reduce_sum>
Name policy_surr_loss in context <class '_ast.Store'>
Set policy_surr_loss in <Scope: function ppo_loss> to <Node attribute:tensorflow.reduce_sum>
Name policy_surr_loss in context <class '_ast.Load'>
Get policy_surr_loss in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.reduce_sum>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.reduce_sum>
FunctionDef train_PG
Def from <Node module:train_policy> to Function <Node function:train_policy.train_PG>
Set train_PG in <Scope: module > to <Node function:train_policy.train_PG>
Assign ['start'] [<_ast.Call object at 0x107c4a828>]
Call time.time
Attribute time of time in context <class '_ast.Load'>
Resolve time.time in context <class '_ast.Load'>
Get time in <Scope: function train_PG>, found in <Scope: module >, value <Node module:time>
Resolved to attr time of <Node module:time>
Use from <Node function:train_policy.train_PG> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
Name start in context <class '_ast.Store'>
Set start in <Scope: function train_PG> to <Node attribute:time.time>
Call setup_logger
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Call locals
Name locals in context <class '_ast.Load'>
Get locals in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.locals>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node ???:*.locals>
Name setup_logger in context <class '_ast.Load'>
Get setup_logger in <Scope: function train_PG>, found in <Scope: module >, value <Node function:train_policy.setup_logger>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.setup_logger>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.setup_logger>
Assign ['envs'] [<_ast.Dict object at 0x107c4aa90>]
Name PointEnv in context <class '_ast.Load'>
Get PointEnv in <Scope: function train_PG>, found in <Scope: module >, value <Node import:point_mass.PointEnv>
Use from <Node function:train_policy.train_PG> to Name <Node import:point_mass.PointEnv>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node import:point_mass.PointEnv>
Name ObservedPointEnv in context <class '_ast.Load'>
Get ObservedPointEnv in <Scope: function train_PG>, found in <Scope: module >, value <Node import:point_mass_observed.ObservedPointEnv>
Use from <Node function:train_policy.train_PG> to Name <Node import:point_mass_observed.ObservedPointEnv>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node import:point_mass_observed.ObservedPointEnv>
Name envs in context <class '_ast.Store'>
Set envs in <Scope: function train_PG> to <Node import:point_mass_observed.ObservedPointEnv>
Assign ['env'] [<_ast.Call object at 0x107c4ac18>]
Call <_ast.Subscript object at 0x107c4ac50>
Name num_tasks in context <class '_ast.Load'>
Get num_tasks in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name envs in context <class '_ast.Load'>
Get envs in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node import:point_mass_observed.ObservedPointEnv>
Use from <Node function:train_policy.train_PG> to Name <Node import:point_mass_observed.ObservedPointEnv>
Name env_name in context <class '_ast.Load'>
Get env_name in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name env in context <class '_ast.Store'>
Set env in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Call tf.set_random_seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute set_random_seed of tf in context <class '_ast.Load'>
Resolve tf.set_random_seed in context <class '_ast.Load'>
Get tf in <Scope: function train_PG>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr set_random_seed of <Node module:tensorflow>
Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.set_random_seed> (target obj <Node module:tensorflow> known but target attr set_random_seed not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.set_random_seed> (target obj <Node module:tensorflow> known but target attr set_random_seed not resolved; maybe fwd ref or unanalyzed import)
Call np.random.seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute seed of np.random in context <class '_ast.Load'>
Resolve np.random.seed in context <class '_ast.Load'>
Resolve np.random in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr random of <Node module:numpy>
Unresolved, returning attr seed of unknown
Use from <Node function:train_policy.train_PG> to <Node ???:*.seed> (target obj np.random not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node ???:*.seed> (target obj np.random not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call random.seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute seed of random in context <class '_ast.Load'>
Resolve random.seed in context <class '_ast.Load'>
Get random in <Scope: function train_PG>, found in <Scope: module >, value <Node module:random>
Resolved to attr seed of <Node module:random>
Use from <Node function:train_policy.train_PG> to <Node attribute:random.seed> (target obj <Node module:random> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:train_policy.train_PG> to <Node attribute:random.seed> resolves <Node ???:*.seed>; removing wildcard
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:random.seed> (target obj <Node module:random> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Call env.seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute seed of env in context <class '_ast.Load'>
Resolve env.seed in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Resolved to attr seed of <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to <Node attribute:train_policy.train_PG.^^^argument^^^.seed> (target obj <Node ---:train_policy.train_PG.^^^argument^^^> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:train_policy.train_PG.^^^argument^^^.seed> (target obj <Node ---:train_policy.train_PG.^^^argument^^^> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Assign ['max_path_length'] ['max_path_length']
Name max_path_length in context <class '_ast.Load'>
Get max_path_length in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name max_path_length in context <class '_ast.Store'>
Set max_path_length in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Assign ['ob_dim'] [<_ast.Subscript object at 0x107c4f358>]
Attribute shape of env.observation_space in context <class '_ast.Load'>
Resolve env.observation_space.shape in context <class '_ast.Load'>
Resolve env.observation_space in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Resolved to attr observation_space of <Node ---:train_policy.train_PG.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node function:train_policy.train_PG> to <Node ???:*.shape> (target obj env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node ???:*.shape> (target obj env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ob_dim in context <class '_ast.Store'>
Set ob_dim in <Scope: function train_PG> to <Node ???:*.shape>
Assign ['ac_dim'] [<_ast.Subscript object at 0x107c4f518>]
Attribute shape of env.action_space in context <class '_ast.Load'>
Resolve env.action_space.shape in context <class '_ast.Load'>
Resolve env.action_space in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Resolved to attr action_space of <Node ---:train_policy.train_PG.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node function:train_policy.train_PG> to <Node ???:*.shape> (target obj env.action_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ac_dim in context <class '_ast.Store'>
Set ac_dim in <Scope: function train_PG> to <Node ???:*.shape>
Assign ['task_dim'] [<_ast.Call object at 0x107c4f6d8>]
Call len
Attribute _goal of env in context <class '_ast.Load'>
Resolve env._goal in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Resolved to attr _goal of <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to <Node attribute:train_policy.train_PG.^^^argument^^^._goal> (target obj <Node ---:train_policy.train_PG.^^^argument^^^> known but target attr _goal not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:train_policy.train_PG.^^^argument^^^._goal> (target obj <Node ---:train_policy.train_PG.^^^argument^^^> known but target attr _goal not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.len>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node ???:*.len>
Name task_dim in context <class '_ast.Store'>
Set task_dim in <Scope: function train_PG> to <Node ???:*.len>
Assign ['computation_graph_args'] [<_ast.Dict object at 0x107c4f828>]
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name ob_dim in context <class '_ast.Load'>
Get ob_dim in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.shape>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.shape>
Name ac_dim in context <class '_ast.Load'>
Get ac_dim in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.shape>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.shape>
Name task_dim in context <class '_ast.Load'>
Get task_dim in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.len>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.len>
Name size in context <class '_ast.Load'>
Get size in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name learning_rate in context <class '_ast.Load'>
Get learning_rate in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name history in context <class '_ast.Load'>
Get history in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name num_value_iters in context <class '_ast.Load'>
Get num_value_iters in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name l2reg in context <class '_ast.Load'>
Get l2reg in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name recurrent in context <class '_ast.Load'>
Get recurrent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name computation_graph_args in context <class '_ast.Store'>
Set computation_graph_args in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Assign ['sample_trajectory_args'] [<_ast.Dict object at 0x107c4fda0>]
Name animate in context <class '_ast.Load'>
Get animate in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name max_path_length in context <class '_ast.Load'>
Get max_path_length in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name min_timesteps_per_batch in context <class '_ast.Load'>
Get min_timesteps_per_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name sample_trajectory_args in context <class '_ast.Store'>
Set sample_trajectory_args in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Assign ['estimate_return_args'] [<_ast.Dict object at 0x107c4ff98>]
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name nn_critic in context <class '_ast.Load'>
Get nn_critic in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name normalize_advantages in context <class '_ast.Load'>
Get normalize_advantages in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name estimate_return_args in context <class '_ast.Store'>
Set estimate_return_args in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Assign ['agent'] [<_ast.Call object at 0x107c531d0>]
Call Agent
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name sample_trajectory_args in context <class '_ast.Load'>
Get sample_trajectory_args in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name estimate_return_args in context <class '_ast.Load'>
Get estimate_return_args in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name Agent in context <class '_ast.Load'>
Get Agent in <Scope: function train_PG>, found in <Scope: module >, value <Node class:train_policy.Agent>
Use from <Node function:train_policy.train_PG> to Name <Node class:train_policy.Agent>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node class:train_policy.Agent>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.__init__> (call creates an instance)
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.__init__> (call creates an instance)
Name agent in context <class '_ast.Store'>
Set agent in <Scope: function train_PG> to <Node class:train_policy.Agent>
Call agent.build_computation_graph
Attribute build_computation_graph of agent in context <class '_ast.Load'>
Resolve agent.build_computation_graph in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr build_computation_graph of <Node class:train_policy.Agent>
getattr build_computation_graph on agent returns <Node method:train_policy.Agent.build_computation_graph>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.build_computation_graph>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.build_computation_graph>
Call agent.init_tf_sess
Attribute init_tf_sess of agent in context <class '_ast.Load'>
Resolve agent.init_tf_sess in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr init_tf_sess of <Node class:train_policy.Agent>
getattr init_tf_sess on agent returns <Node method:train_policy.Agent.init_tf_sess>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.init_tf_sess>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.init_tf_sess>
FunctionDef unpack_sample
Def from <Node function:train_policy.train_PG> to Function <Node function:train_policy.train_PG.unpack_sample>
Set unpack_sample in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Assign ['ob'] [<_ast.Subscript object at 0x107c53668>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
New edge added for Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ob in context <class '_ast.Store'>
Set ob in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['ac'] [<_ast.Subscript object at 0x107c537b8>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ac in context <class '_ast.Store'>
Set ac in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['re'] [<_ast.Subscript object at 0x107c53908>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name re in context <class '_ast.Store'>
Set re in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['hi'] [<_ast.Subscript object at 0x107c53a58>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name hi in context <class '_ast.Store'>
Set hi in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['ma'] [<_ast.BinOp object at 0x107c53ba8>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ma in context <class '_ast.Store'>
Set ma in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ob in context <class '_ast.Load'>
Get ob in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ac in context <class '_ast.Load'>
Get ac in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name re in context <class '_ast.Load'>
Get re in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name hi in context <class '_ast.Load'>
Get hi in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ma in context <class '_ast.Load'>
Get ma in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['ppo_buffer'] [<_ast.Call object at 0x107c53ef0>]
Call PPOReplayBuffer
Attribute replay_buffer of agent in context <class '_ast.Load'>
Resolve agent.replay_buffer in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr replay_buffer of <Node class:train_policy.Agent>
getattr replay_buffer on agent returns <Node import:replay_buffer.ReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node import:replay_buffer.ReplayBuffer>
New edge added for Use from <Node function:train_policy.train_PG> to <Node import:replay_buffer.ReplayBuffer>
Name PPOReplayBuffer in context <class '_ast.Load'>
Get PPOReplayBuffer in <Scope: function train_PG>, found in <Scope: module >, value <Node import:replay_buffer.PPOReplayBuffer>
Use from <Node function:train_policy.train_PG> to Name <Node import:replay_buffer.PPOReplayBuffer>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node import:replay_buffer.PPOReplayBuffer>
Name ppo_buffer in context <class '_ast.Store'>
Set ppo_buffer in <Scope: function train_PG> to <Node import:replay_buffer.PPOReplayBuffer>
Assign ['total_timesteps'] [<_ast.Num object at 0x107c59080>]
Name total_timesteps in context <class '_ast.Store'>
Set total_timesteps in <Scope: function train_PG>: value None is not a Node
For-loop
Call range
Name n_iter in context <class '_ast.Load'>
Get n_iter in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name itr in context <class '_ast.Store'>
Set itr in <Scope: function train_PG> to <Node ???:*.range>
Call ppo_buffer.flush
Attribute flush of ppo_buffer in context <class '_ast.Load'>
Resolve ppo_buffer.flush in context <class '_ast.Load'>
Get ppo_buffer in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node import:replay_buffer.PPOReplayBuffer>
Resolved to attr flush of <Node import:replay_buffer.PPOReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.flush> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr flush not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.flush> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr flush not resolved; maybe fwd ref or unanalyzed import)
Call print
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name print in context <class '_ast.Load'>
Get print in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.print>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node ???:*.print>
Assign ['stats'] []
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function train_PG>: value None is not a Node
For-loop
Call range
Name num_tasks in context <class '_ast.Load'>
Get num_tasks in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function train_PG> to <Node ???:*.range>
Assign ['s', 'timesteps_this_batch'] [<_ast.Call object at 0x107c596a0>]
Call agent.sample_trajectories
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name env in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name min_timesteps_per_batch in context <class '_ast.Load'>
Get min_timesteps_per_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute sample_trajectories of agent in context <class '_ast.Load'>
Resolve agent.sample_trajectories in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sample_trajectories of <Node class:train_policy.Agent>
getattr sample_trajectories on agent returns <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.sample_trajectories>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Name timesteps_this_batch in context <class '_ast.Store'>
Set timesteps_this_batch in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
AugAssign ['total_timesteps'] <class '_ast.Add'> ['timesteps_this_batch']
Name timesteps_this_batch in context <class '_ast.Load'>
Get timesteps_this_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Name total_timesteps in context <class '_ast.Store'>
Set total_timesteps in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
AugAssign ['stats'] <class '_ast.Add'> ['s']
Name s in context <class '_ast.Load'>
Get s in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Assign ['data'] [<_ast.Call object at 0x107c599b0>]
Call agent.replay_buffer.all_batch
Attribute all_batch of agent.replay_buffer in context <class '_ast.Load'>
Resolve agent.replay_buffer.all_batch in context <class '_ast.Load'>
Resolve agent.replay_buffer in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr replay_buffer of <Node class:train_policy.Agent>
Resolved to attr all_batch of <Node import:replay_buffer.ReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.all_batch> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr all_batch not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.all_batch> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr all_batch not resolved; maybe fwd ref or unanalyzed import)
Name data in context <class '_ast.Store'>
Set data in <Scope: function train_PG> to <Node attribute:replay_buffer.ReplayBuffer.all_batch>
Assign ['ob_no', 'ac_na', 're_n', 'hidden', 'masks'] [<_ast.Call object at 0x107c59c18>]
Call unpack_sample
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.ReplayBuffer.all_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.ReplayBuffer.all_batch>
Name unpack_sample in context <class '_ast.Load'>
Get unpack_sample in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ob_no in context <class '_ast.Store'>
Set ob_no in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Store'>
Set ac_na in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name re_n in context <class '_ast.Store'>
Set re_n in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Store'>
Set hidden in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name masks in context <class '_ast.Store'>
Set masks in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Assign ['fixed_log_probs'] [<_ast.Call object at 0x107c59d30>]
Call agent.sess.run
Attribute sy_lp_n of agent in context <class '_ast.Load'>
Resolve agent.sy_lp_n in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
getattr sy_lp_n on agent returns <Node method:train_policy.Agent.get_log_prob>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.get_log_prob>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.get_log_prob>
Attribute sy_ob_no of agent in context <class '_ast.Load'>
Resolve agent.sy_ob_no in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of agent in context <class '_ast.Load'>
Resolve agent.sy_hidden in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ac_na of agent in context <class '_ast.Load'>
Resolve agent.sy_ac_na in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
getattr sy_ac_na on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Attribute run of agent.sess in context <class '_ast.Load'>
Resolve agent.sess.run in context <class '_ast.Load'>
Resolve agent.sess in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name fixed_log_probs in context <class '_ast.Store'>
Set fixed_log_probs in <Scope: function train_PG> to <Node attribute:tensorflow.Session.run>
Assign ['q_n', 'adv_n'] [<_ast.Call object at 0x107bf5208>]
Call agent.estimate_return
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name re_n in context <class '_ast.Load'>
Get re_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Attribute estimate_return of agent in context <class '_ast.Load'>
Resolve agent.estimate_return in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr estimate_return of <Node class:train_policy.Agent>
getattr estimate_return on agent returns <Node method:train_policy.Agent.estimate_return>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.estimate_return>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.estimate_return>
Name q_n in context <class '_ast.Store'>
Set q_n in <Scope: function train_PG> to <Node method:train_policy.Agent.estimate_return>
Name adv_n in context <class '_ast.Store'>
Set adv_n in <Scope: function train_PG> to <Node method:train_policy.Agent.estimate_return>
Call ppo_buffer.add_samples
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:tensorflow.Session.run>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:tensorflow.Session.run>
Name adv_n in context <class '_ast.Load'>
Get adv_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.estimate_return>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.estimate_return>
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.estimate_return>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.estimate_return>
Attribute add_samples of ppo_buffer in context <class '_ast.Load'>
Resolve ppo_buffer.add_samples in context <class '_ast.Load'>
Get ppo_buffer in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node import:replay_buffer.PPOReplayBuffer>
Resolved to attr add_samples of <Node import:replay_buffer.PPOReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.add_samples> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr add_samples not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.add_samples> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr add_samples not resolved; maybe fwd ref or unanalyzed import)
For-loop
Call range
Name num_ppo_updates in context <class '_ast.Load'>
Get num_ppo_updates in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function train_PG> to <Node ???:*.range>
Assign ['data'] [<_ast.Call object at 0x107bf56d8>]
Call ppo_buffer.random_batch
Name mini_batch_size in context <class '_ast.Load'>
Get mini_batch_size in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute random_batch of ppo_buffer in context <class '_ast.Load'>
Resolve ppo_buffer.random_batch in context <class '_ast.Load'>
Get ppo_buffer in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node import:replay_buffer.PPOReplayBuffer>
Resolved to attr random_batch of <Node import:replay_buffer.PPOReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr random_batch not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr random_batch not resolved; maybe fwd ref or unanalyzed import)
Name data in context <class '_ast.Store'>
Set data in <Scope: function train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Assign ['ob_no', 'ac_na', 're_n', 'hidden', 'masks'] [<_ast.Call object at 0x107bf5940>]
Call unpack_sample
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name unpack_sample in context <class '_ast.Load'>
Get unpack_sample in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ob_no in context <class '_ast.Store'>
Set ob_no in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Store'>
Set ac_na in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name re_n in context <class '_ast.Store'>
Set re_n in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Store'>
Set hidden in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name masks in context <class '_ast.Store'>
Set masks in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Assign ['fixed_log_probs'] [<_ast.Subscript object at 0x107bf5a58>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name fixed_log_probs in context <class '_ast.Store'>
Set fixed_log_probs in <Scope: function train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Assign ['adv_n'] [<_ast.Subscript object at 0x107bf5ba8>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name adv_n in context <class '_ast.Store'>
Set adv_n in <Scope: function train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Assign ['q_n'] [<_ast.Subscript object at 0x107bf5cf8>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name q_n in context <class '_ast.Store'>
Set q_n in <Scope: function train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Assign ['log_probs'] [<_ast.Call object at 0x107bf5e48>]
Call agent.sess.run
Attribute sy_lp_n of agent in context <class '_ast.Load'>
Resolve agent.sy_lp_n in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
getattr sy_lp_n on agent returns <Node method:train_policy.Agent.get_log_prob>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.get_log_prob>
Attribute sy_ob_no of agent in context <class '_ast.Load'>
Resolve agent.sy_ob_no in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of agent in context <class '_ast.Load'>
Resolve agent.sy_hidden in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ac_na of agent in context <class '_ast.Load'>
Resolve agent.sy_ac_na in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
getattr sy_ac_na on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Attribute run of agent.sess in context <class '_ast.Load'>
Resolve agent.sess.run in context <class '_ast.Load'>
Resolve agent.sess in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name log_probs in context <class '_ast.Store'>
Set log_probs in <Scope: function train_PG> to <Node attribute:tensorflow.Session.run>
Call agent.update_parameters
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name adv_n in context <class '_ast.Load'>
Get adv_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Attribute update_parameters of agent in context <class '_ast.Load'>
Resolve agent.update_parameters in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr update_parameters of <Node class:train_policy.Agent>
getattr update_parameters on agent returns <Node method:train_policy.Agent.update_parameters>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.update_parameters>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.update_parameters>
Call print
Name print in context <class '_ast.Load'>
Get print in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.print>
Assign ['val_stats'] []
Name val_stats in context <class '_ast.Store'>
Set val_stats in <Scope: function train_PG>: value None is not a Node
For-loop
Call range
Name num_tasks in context <class '_ast.Load'>
Get num_tasks in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function train_PG> to <Node ???:*.range>
Assign ['vs', 'timesteps_this_batch'] [<_ast.Call object at 0x107bdf7f0>]
Call agent.sample_trajectories
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name env in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name min_timesteps_per_batch in context <class '_ast.Load'>
Get min_timesteps_per_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute sample_trajectories of agent in context <class '_ast.Load'>
Resolve agent.sample_trajectories in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sample_trajectories of <Node class:train_policy.Agent>
getattr sample_trajectories on agent returns <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Name vs in context <class '_ast.Store'>
Set vs in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Name timesteps_this_batch in context <class '_ast.Store'>
Set timesteps_this_batch in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
AugAssign ['val_stats'] <class '_ast.Add'> ['vs']
Name vs in context <class '_ast.Load'>
Get vs in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Name val_stats in context <class '_ast.Store'>
Set val_stats in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
With (context manager)
Call open
Call <_ast.Str object at 0x107bdfc18>.format
Name exp_name in context <class '_ast.Load'>
Get exp_name in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Attribute format of <_ast.Str object at 0x107bdfc18> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x107bdfc18>.format in context <class '_ast.Load'>
Resolved to attr format of <Node class:Str>
getattr format on <_ast.Str object at 0x107bdfc18> returns <Node attribute:Str.format>
Use from <Node function:train_policy.train_PG> to <Node attribute:Str.format>
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:Str.format>
Name open in context <class '_ast.Load'>
Get open in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.open>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node ???:*.open>
Use from <Node function:train_policy.train_PG> to With <Node ???:*.open>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:*.open.__enter__>
New edge added for Use from <Node function:train_policy.train_PG> to <Node method:*.open.__exit__>
Call open
Call <_ast.Str object at 0x107bdfc18>.format
Name exp_name in context <class '_ast.Load'>
Get exp_name in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Attribute format of <_ast.Str object at 0x107bdfc18> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x107bdfc18>.format in context <class '_ast.Load'>
Resolved to attr format of <Node class:Str>
getattr format on <_ast.Str object at 0x107bdfc18> returns <Node attribute:Str.format>
Use from <Node function:train_policy.train_PG> to <Node attribute:Str.format>
Name open in context <class '_ast.Load'>
Get open in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.open>
Name f in context <class '_ast.Store'>
Set f in <Scope: function train_PG> to <Node ???:*.open>
Call pickle.dump
Call agent.val_replay_buffer.all_batch
Attribute all_batch of agent.val_replay_buffer in context <class '_ast.Load'>
Resolve agent.val_replay_buffer.all_batch in context <class '_ast.Load'>
Resolve agent.val_replay_buffer in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr val_replay_buffer of <Node class:train_policy.Agent>
Resolved to attr all_batch of <Node import:replay_buffer.ReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.all_batch> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr all_batch not resolved; maybe fwd ref or unanalyzed import)
Name f in context <class '_ast.Load'>
Get f in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.open>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.open>
Attribute HIGHEST_PROTOCOL of pickle in context <class '_ast.Load'>
Resolve pickle.HIGHEST_PROTOCOL in context <class '_ast.Load'>
Get pickle in <Scope: function train_PG>, found in <Scope: module >, value <Node module:pickle>
Resolved to attr HIGHEST_PROTOCOL of <Node module:pickle>
Use from <Node function:train_policy.train_PG> to <Node attribute:pickle.HIGHEST_PROTOCOL> (target obj <Node module:pickle> known but target attr HIGHEST_PROTOCOL not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:pickle.HIGHEST_PROTOCOL> (target obj <Node module:pickle> known but target attr HIGHEST_PROTOCOL not resolved; maybe fwd ref or unanalyzed import)
Attribute dump of pickle in context <class '_ast.Load'>
Resolve pickle.dump in context <class '_ast.Load'>
Get pickle in <Scope: function train_PG>, found in <Scope: module >, value <Node module:pickle>
Resolved to attr dump of <Node module:pickle>
Use from <Node function:train_policy.train_PG> to <Node attribute:pickle.dump> (target obj <Node module:pickle> known but target attr dump not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:pickle.dump> (target obj <Node module:pickle> known but target attr dump not resolved; maybe fwd ref or unanalyzed import)
Call agent.val_replay_buffer.flush
Attribute flush of agent.val_replay_buffer in context <class '_ast.Load'>
Resolve agent.val_replay_buffer.flush in context <class '_ast.Load'>
Resolve agent.val_replay_buffer in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr val_replay_buffer of <Node class:train_policy.Agent>
Resolved to attr flush of <Node import:replay_buffer.ReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.flush> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr flush not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.flush> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr flush not resolved; maybe fwd ref or unanalyzed import)
Assign ['returns'] [<_ast.ListComp object at 0x107be2160>]
ListComp
Call sum
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
New edge added for Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name sum in context <class '_ast.Load'>
Get sum in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node ???:*.sum>
New edge added for Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node ???:*.sum>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Def from <Node function:train_policy.train_PG> to listcomp <Node namespace:train_policy.train_PG.listcomp>
Name returns in context <class '_ast.Store'>
Set returns in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Assign ['final_rewards'] [<_ast.ListComp object at 0x107be2400>]
ListComp
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name final_rewards in context <class '_ast.Store'>
Set final_rewards in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Assign ['ep_lengths'] [<_ast.ListComp object at 0x107be2710>]
ListComp
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name ep_lengths in context <class '_ast.Store'>
Set ep_lengths in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Call logz.log_tabular
Call time.time
Attribute time of time in context <class '_ast.Load'>
Resolve time.time in context <class '_ast.Load'>
Get time in <Scope: function train_PG>, found in <Scope: module >, value <Node module:time>
Resolved to attr time of <Node module:time>
Use from <Node function:train_policy.train_PG> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
Name start in context <class '_ast.Load'>
Get start in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:time.time>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:time.time>
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.mean
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
New edge added for Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.mean
Name final_rewards in context <class '_ast.Load'>
Get final_rewards in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.std
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute std of np in context <class '_ast.Load'>
Resolve np.std in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr std of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.max
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute max of np in context <class '_ast.Load'>
Resolve np.max in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr max of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.max> (target obj <Node module:numpy> known but target attr max not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.max> (target obj <Node module:numpy> known but target attr max not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.min
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute min of np in context <class '_ast.Load'>
Resolve np.min in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr min of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.min> (target obj <Node module:numpy> known but target attr min not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.min> (target obj <Node module:numpy> known but target attr min not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.mean
Name ep_lengths in context <class '_ast.Load'>
Get ep_lengths in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.std
Name ep_lengths in context <class '_ast.Load'>
Get ep_lengths in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute std of np in context <class '_ast.Load'>
Resolve np.std in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr std of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Name timesteps_this_batch in context <class '_ast.Load'>
Get timesteps_this_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Name total_timesteps in context <class '_ast.Load'>
Get total_timesteps in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Assign ['val_returns'] [<_ast.ListComp object at 0x107be7d68>]
ListComp
Call sum
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name sum in context <class '_ast.Load'>
Get sum in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node ???:*.sum>
Name val_stats in context <class '_ast.Load'>
Get val_stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name val_returns in context <class '_ast.Store'>
Set val_returns in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Assign ['val_final_rewards'] [<_ast.ListComp object at 0x107be9048>]
ListComp
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name val_stats in context <class '_ast.Load'>
Get val_stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name val_final_rewards in context <class '_ast.Store'>
Set val_final_rewards in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Call logz.log_tabular
Call np.mean
Name val_returns in context <class '_ast.Load'>
Get val_returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.mean
Name val_final_rewards in context <class '_ast.Load'>
Get val_final_rewards in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.dump_tabular
Attribute dump_tabular of logz in context <class '_ast.Load'>
Resolve logz.dump_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr dump_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.dump_tabular> (target obj <Node module:logz> known but target attr dump_tabular not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:logz.dump_tabular> (target obj <Node module:logz> known but target attr dump_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.pickle_tf_vars
Attribute pickle_tf_vars of logz in context <class '_ast.Load'>
Resolve logz.pickle_tf_vars in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr pickle_tf_vars of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.pickle_tf_vars> (target obj <Node module:logz> known but target attr pickle_tf_vars not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node attribute:logz.pickle_tf_vars> (target obj <Node module:logz> known but target attr pickle_tf_vars not resolved; maybe fwd ref or unanalyzed import)
FunctionDef main
Def from <Node module:train_policy> to Function <Node function:train_policy.main>
Set main in <Scope: module > to <Node function:train_policy.main>
Import ['argparse']
Set argparse in <Scope: function main> to <Node module:argparse>
Use from <Node function:train_policy.main> to Import <Node module:argparse>
New edge added for Use from <Node function:train_policy.main> to Import <Node module:argparse>
Assign ['parser'] [<_ast.Call object at 0x107be99e8>]
Call argparse.ArgumentParser
Attribute ArgumentParser of argparse in context <class '_ast.Load'>
Resolve argparse.ArgumentParser in context <class '_ast.Load'>
Get argparse in <Scope: function main>, found in <Scope: function main>, value <Node module:argparse>
Resolved to attr ArgumentParser of <Node module:argparse>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser> (target obj <Node module:argparse> known but target attr ArgumentParser not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser> (target obj <Node module:argparse> known but target attr ArgumentParser not resolved; maybe fwd ref or unanalyzed import)
Name parser in context <class '_ast.Store'>
Set parser in <Scope: function main> to <Node attribute:argparse.ArgumentParser>
Call parser.add_argument
Name str in context <class '_ast.Load'>
Get str in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.str>
New edge added for Use from <Node function:train_policy.main> to Name <Node ???:*.str>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name str in context <class '_ast.Load'>
Get str in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.str>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name float in context <class '_ast.Load'>
Get float in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.float>
New edge added for Use from <Node function:train_policy.main> to Name <Node ???:*.float>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
New edge added for Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name float in context <class '_ast.Load'>
Get float in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.float>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Assign ['args'] [<_ast.Call object at 0x107bf45f8>]
Call parser.parse_args
Attribute parse_args of parser in context <class '_ast.Load'>
Resolve parser.parse_args in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr parse_args of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args> (target obj <Node attribute:argparse.ArgumentParser> known but target attr parse_args not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args> (target obj <Node attribute:argparse.ArgumentParser> known but target attr parse_args not resolved; maybe fwd ref or unanalyzed import)
Name args in context <class '_ast.Store'>
Set args in <Scope: function main> to <Node attribute:argparse.ArgumentParser.parse_args>
Call os.path.exists
Attribute exists of os.path in context <class '_ast.Load'>
Resolve os.path.exists in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr path of <Node module:os>
Unresolved, returning attr exists of unknown
Use from <Node function:train_policy.main> to <Node ???:*.exists> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node ???:*.exists> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call os.makedirs
Attribute makedirs of os in context <class '_ast.Load'>
Resolve os.makedirs in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr makedirs of <Node module:os>
Use from <Node function:train_policy.main> to <Node attribute:os.makedirs> (target obj <Node module:os> known but target attr makedirs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:os.makedirs> (target obj <Node module:os> known but target attr makedirs not resolved; maybe fwd ref or unanalyzed import)
Assign ['logdir'] [<_ast.BinOp object at 0x107bf49b0>]
Attribute exp_name of args in context <class '_ast.Load'>
Resolve args.exp_name in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr exp_name of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.exp_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr exp_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.exp_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr exp_name not resolved; maybe fwd ref or unanalyzed import)
Attribute env_name of args in context <class '_ast.Load'>
Resolve args.env_name in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr env_name of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.env_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr env_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.env_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr env_name not resolved; maybe fwd ref or unanalyzed import)
Call time.strftime
Attribute strftime of time in context <class '_ast.Load'>
Resolve time.strftime in context <class '_ast.Load'>
Get time in <Scope: function main>, found in <Scope: module >, value <Node module:time>
Resolved to attr strftime of <Node module:time>
Use from <Node function:train_policy.main> to <Node attribute:time.strftime> (target obj <Node module:time> known but target attr strftime not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:time.strftime> (target obj <Node module:time> known but target attr strftime not resolved; maybe fwd ref or unanalyzed import)
Name logdir in context <class '_ast.Store'>
Set logdir in <Scope: function main> to <Node attribute:time.strftime>
Assign ['logdir'] [<_ast.Call object at 0x107bf4d30>]
Call os.path.join
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function main>, found in <Scope: function main>, value <Node attribute:time.strftime>
Use from <Node function:train_policy.main> to Name <Node attribute:time.strftime>
Attribute join of os.path in context <class '_ast.Load'>
Resolve os.path.join in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr path of <Node module:os>
Unresolved, returning attr join of unknown
Use from <Node function:train_policy.main> to <Node ???:*.join> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node ???:*.join> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name logdir in context <class '_ast.Store'>
Set logdir in <Scope: function main> to <Node ???:*.join>
Call os.path.exists
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.join>
Use from <Node function:train_policy.main> to Name <Node ???:*.join>
Attribute exists of os.path in context <class '_ast.Load'>
Resolve os.path.exists in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr path of <Node module:os>
Unresolved, returning attr exists of unknown
Use from <Node function:train_policy.main> to <Node ???:*.exists> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call os.makedirs
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.join>
Use from <Node function:train_policy.main> to Name <Node ???:*.join>
Attribute makedirs of os in context <class '_ast.Load'>
Resolve os.makedirs in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr makedirs of <Node module:os>
Use from <Node function:train_policy.main> to <Node attribute:os.makedirs> (target obj <Node module:os> known but target attr makedirs not resolved; maybe fwd ref or unanalyzed import)
Assign ['max_path_length'] [<_ast.IfExp object at 0x107bf91d0>]
Attribute ep_len of args in context <class '_ast.Load'>
Resolve args.ep_len in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr ep_len of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr ep_len not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr ep_len not resolved; maybe fwd ref or unanalyzed import)
Attribute ep_len of args in context <class '_ast.Load'>
Resolve args.ep_len in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr ep_len of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr ep_len not resolved; maybe fwd ref or unanalyzed import)
Name max_path_length in context <class '_ast.Store'>
Set max_path_length in <Scope: function main> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len>
Assign ['processes'] []
Name processes in context <class '_ast.Store'>
Set processes in <Scope: function main>: value None is not a Node
For-loop
Call range
Attribute n_experiments of args in context <class '_ast.Load'>
Resolve args.n_experiments in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr n_experiments of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.n_experiments> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_experiments not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.n_experiments> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_experiments not resolved; maybe fwd ref or unanalyzed import)
Name range in context <class '_ast.Load'>
Get range in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.range>
New edge added for Use from <Node function:train_policy.main> to Name <Node ???:*.range>
Name e in context <class '_ast.Store'>
Set e in <Scope: function main> to <Node ???:*.range>
Assign ['seed'] [<_ast.BinOp object at 0x107bf95f8>]
Attribute seed of args in context <class '_ast.Load'>
Resolve args.seed in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr seed of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.seed> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.seed> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Name e in context <class '_ast.Load'>
Get e in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.range>
Use from <Node function:train_policy.main> to Name <Node ???:*.range>
Name seed in context <class '_ast.Store'>
Set seed in <Scope: function main> to <Node ???:*.range>
Call print
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.range>
Use from <Node function:train_policy.main> to Name <Node ???:*.range>
Name print in context <class '_ast.Load'>
Get print in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.print>
New edge added for Use from <Node function:train_policy.main> to Name <Node ???:*.print>
FunctionDef train_func
Def from <Node function:train_policy.main> to Function <Node function:train_policy.main.train_func>
Set train_func in <Scope: function main> to <Node function:train_policy.main.train_func>
Call train_PG
Attribute exp_name of args in context <class '_ast.Load'>
Resolve args.exp_name in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr exp_name of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.exp_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr exp_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.exp_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr exp_name not resolved; maybe fwd ref or unanalyzed import)
Attribute env_name of args in context <class '_ast.Load'>
Resolve args.env_name in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr env_name of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.env_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr env_name not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.env_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr env_name not resolved; maybe fwd ref or unanalyzed import)
Attribute n_iter of args in context <class '_ast.Load'>
Resolve args.n_iter in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr n_iter of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.n_iter> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_iter not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.n_iter> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_iter not resolved; maybe fwd ref or unanalyzed import)
Attribute discount of args in context <class '_ast.Load'>
Resolve args.discount in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr discount of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.discount> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr discount not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.discount> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr discount not resolved; maybe fwd ref or unanalyzed import)
Attribute batch_size of args in context <class '_ast.Load'>
Resolve args.batch_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr batch_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr batch_size not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr batch_size not resolved; maybe fwd ref or unanalyzed import)
Attribute num_tasks of args in context <class '_ast.Load'>
Resolve args.num_tasks in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr num_tasks of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_tasks> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr num_tasks not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_tasks> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr num_tasks not resolved; maybe fwd ref or unanalyzed import)
Attribute mini_batch_size of args in context <class '_ast.Load'>
Resolve args.mini_batch_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr mini_batch_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.mini_batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr mini_batch_size not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.mini_batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr mini_batch_size not resolved; maybe fwd ref or unanalyzed import)
Name max_path_length in context <class '_ast.Load'>
Get max_path_length in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args.ep_len>
Use from <Node function:train_policy.main.train_func> to Name <Node attribute:argparse.ArgumentParser.parse_args.ep_len>
New edge added for Use from <Node function:train_policy.main.train_func> to Name <Node attribute:argparse.ArgumentParser.parse_args.ep_len>
Attribute learning_rate of args in context <class '_ast.Load'>
Resolve args.learning_rate in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr learning_rate of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.learning_rate> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr learning_rate not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.learning_rate> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr learning_rate not resolved; maybe fwd ref or unanalyzed import)
Attribute batch_size of args in context <class '_ast.Load'>
Resolve args.batch_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr batch_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr batch_size not resolved; maybe fwd ref or unanalyzed import)
Attribute mini_batch_size of args in context <class '_ast.Load'>
Resolve args.mini_batch_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr mini_batch_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.mini_batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr mini_batch_size not resolved; maybe fwd ref or unanalyzed import)
Attribute num_value_iters of args in context <class '_ast.Load'>
Resolve args.num_value_iters in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr num_value_iters of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_value_iters> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr num_value_iters not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_value_iters> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr num_value_iters not resolved; maybe fwd ref or unanalyzed import)
Attribute render of args in context <class '_ast.Load'>
Resolve args.render in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr render of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.render> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr render not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.render> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr render not resolved; maybe fwd ref or unanalyzed import)
Call os.path.join
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function train_func>, found in <Scope: function main>, value <Node ???:*.join>
Use from <Node function:train_policy.main.train_func> to Name <Node ???:*.join>
New edge added for Use from <Node function:train_policy.main.train_func> to Name <Node ???:*.join>
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_func>, found in <Scope: function main>, value <Node ???:*.range>
Use from <Node function:train_policy.main.train_func> to Name <Node ???:*.range>
New edge added for Use from <Node function:train_policy.main.train_func> to Name <Node ???:*.range>
Attribute join of os.path in context <class '_ast.Load'>
Resolve os.path.join in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function train_func>, found in <Scope: module >, value <Node module:os>
Resolved to attr path of <Node module:os>
Unresolved, returning attr join of unknown
Use from <Node function:train_policy.main.train_func> to <Node ???:*.join> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute dont_normalize_advantages of args in context <class '_ast.Load'>
Resolve args.dont_normalize_advantages in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr dont_normalize_advantages of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.dont_normalize_advantages> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr dont_normalize_advantages not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.dont_normalize_advantages> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr dont_normalize_advantages not resolved; maybe fwd ref or unanalyzed import)
Attribute nn_critic of args in context <class '_ast.Load'>
Resolve args.nn_critic in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr nn_critic of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.nn_critic> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr nn_critic not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.nn_critic> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr nn_critic not resolved; maybe fwd ref or unanalyzed import)
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_func>, found in <Scope: function main>, value <Node ???:*.range>
Use from <Node function:train_policy.main.train_func> to Name <Node ???:*.range>
Attribute n_layers of args in context <class '_ast.Load'>
Resolve args.n_layers in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr n_layers of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.n_layers> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_layers not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.n_layers> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_layers not resolved; maybe fwd ref or unanalyzed import)
Attribute size of args in context <class '_ast.Load'>
Resolve args.size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr size not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr size not resolved; maybe fwd ref or unanalyzed import)
Attribute gru_size of args in context <class '_ast.Load'>
Resolve args.gru_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr gru_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.gru_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr gru_size not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.gru_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr gru_size not resolved; maybe fwd ref or unanalyzed import)
Attribute history of args in context <class '_ast.Load'>
Resolve args.history in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr history of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.history> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr history not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.history> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr history not resolved; maybe fwd ref or unanalyzed import)
Attribute num_tasks of args in context <class '_ast.Load'>
Resolve args.num_tasks in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr num_tasks of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_tasks> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr num_tasks not resolved; maybe fwd ref or unanalyzed import)
Attribute l2reg of args in context <class '_ast.Load'>
Resolve args.l2reg in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr l2reg of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.l2reg> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr l2reg not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.l2reg> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr l2reg not resolved; maybe fwd ref or unanalyzed import)
Attribute recurrent of args in context <class '_ast.Load'>
Resolve args.recurrent in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr recurrent of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.recurrent> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr recurrent not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.recurrent> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr recurrent not resolved; maybe fwd ref or unanalyzed import)
Name train_PG in context <class '_ast.Load'>
Get train_PG in <Scope: function train_func>, found in <Scope: module >, value <Node function:train_policy.train_PG>
Use from <Node function:train_policy.main.train_func> to Name <Node function:train_policy.train_PG>
New edge added for Use from <Node function:train_policy.main.train_func> to Name <Node function:train_policy.train_PG>
Assign ['p'] [<_ast.Call object at 0x107c04ba8>]
Call Process
Name train_func in context <class '_ast.Load'>
Get train_func in <Scope: function main>, found in <Scope: function main>, value <Node function:train_policy.main.train_func>
Use from <Node function:train_policy.main> to Name <Node function:train_policy.main.train_func>
New edge added for Use from <Node function:train_policy.main> to Name <Node function:train_policy.main.train_func>
Call tuple
Name tuple in context <class '_ast.Load'>
Get tuple in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.tuple>
New edge added for Use from <Node function:train_policy.main> to Name <Node ???:*.tuple>
Name Process in context <class '_ast.Load'>
Get Process in <Scope: function main>, found in <Scope: module >, value <Node import:multiprocessing.Process>
Use from <Node function:train_policy.main> to Name <Node import:multiprocessing.Process>
New edge added for Use from <Node function:train_policy.main> to Name <Node import:multiprocessing.Process>
Name p in context <class '_ast.Store'>
Set p in <Scope: function main> to <Node import:multiprocessing.Process>
Call p.start
Attribute start of p in context <class '_ast.Load'>
Resolve p.start in context <class '_ast.Load'>
Get p in <Scope: function main>, found in <Scope: function main>, value <Node import:multiprocessing.Process>
Resolved to attr start of <Node import:multiprocessing.Process>
Use from <Node function:train_policy.main> to <Node attribute:multiprocessing.Process.start> (target obj <Node import:multiprocessing.Process> known but target attr start not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node attribute:multiprocessing.Process.start> (target obj <Node import:multiprocessing.Process> known but target attr start not resolved; maybe fwd ref or unanalyzed import)
Call processes.append
Name p in context <class '_ast.Load'>
Get p in <Scope: function main>, found in <Scope: function main>, value <Node import:multiprocessing.Process>
Use from <Node function:train_policy.main> to Name <Node import:multiprocessing.Process>
Attribute append of processes in context <class '_ast.Load'>
Resolve processes.append in context <class '_ast.Load'>
Get processes in <Scope: function main>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:train_policy.main> to <Node ???:*.append> (target obj processes not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.main> to <Node ???:*.append> (target obj processes not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Name processes in context <class '_ast.Load'>
Get processes in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.processes>
New edge added for Use from <Node function:train_policy.main> to Name <Node ???:*.processes>
Name p in context <class '_ast.Store'>
Set p in <Scope: function main> to <Node ???:*.processes>
Call p.join
Attribute join of p in context <class '_ast.Load'>
Resolve p.join in context <class '_ast.Load'>
Get p in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.processes>
Resolved to attr join of <Node ???:*.processes>
Use from <Node function:train_policy.main> to <Node ???:*.join> (target obj p not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: module >: no Node value (or name not in scope)
Use from <Node module:train_policy> to Name <Node ???:*.__name__>
New edge added for Use from <Node module:train_policy> to Name <Node ???:*.__name__>
Call main
Name main in context <class '_ast.Load'>
Get main in <Scope: module >, found in <Scope: module >, value <Node function:train_policy.main>
Use from <Node module:train_policy> to Name <Node function:train_policy.main>
New edge added for Use from <Node module:train_policy> to Name <Node function:train_policy.main>
Resolving base classes
Get object in <Scope: module >: no Node value (or name not in scope)
All base classes (non-recursive, local level only): {<Node class:train_policy.Agent>: []}
Resolving method resolution order (MRO) for all analyzed classes
MRO: analyzing class <Node class:train_policy.Agent>
MRO: C3 linearizing <Node class:train_policy.Agent>
MRO: C3 linearized <Node class:train_policy.Agent>, result [<Node class:train_policy.Agent>]
Method resolution order (MRO) for all analyzed classes: {<Node class:train_policy.Agent>: [<Node class:train_policy.Agent>]}
========== pass 2, file 'train_policy.py' ==========
Scopes now: {'train_policy': <Scope: module >, 'train_policy.minimize_and_clip': <Scope: function minimize_and_clip>, 'train_policy.build_mlp': <Scope: function build_mlp>, 'train_policy.build_rnn': <Scope: function build_rnn>, 'train_policy.build_policy': <Scope: function build_policy>, 'train_policy.build_critic': <Scope: function build_critic>, 'train_policy.pathlength': <Scope: function pathlength>, 'train_policy.discounted_return': <Scope: function discounted_return>, 'train_policy.discount_cumsum': <Scope: function discount_cumsum>, 'train_policy.setup_logger': <Scope: function setup_logger>, 'train_policy.setup_logger.dictcomp': <Scope: function dictcomp>, 'train_policy.Agent': <Scope: class Agent>, 'train_policy.Agent.__init__': <Scope: function __init__>, 'train_policy.Agent.init_tf_sess': <Scope: function init_tf_sess>, 'train_policy.Agent.define_placeholders': <Scope: function define_placeholders>, 'train_policy.Agent.policy_forward_pass': <Scope: function policy_forward_pass>, 'train_policy.Agent.sample_action': <Scope: function sample_action>, 'train_policy.Agent.get_log_prob': <Scope: function get_log_prob>, 'train_policy.Agent.build_computation_graph': <Scope: function build_computation_graph>, 'train_policy.Agent.sample_trajectories': <Scope: function sample_trajectories>, 'train_policy.Agent.sample_trajectory': <Scope: function sample_trajectory>, 'train_policy.Agent.compute_advantage': <Scope: function compute_advantage>, 'train_policy.Agent.estimate_return': <Scope: function estimate_return>, 'train_policy.Agent.update_parameters': <Scope: function update_parameters>, 'train_policy.Agent.update_critic': <Scope: function update_critic>, 'train_policy.Agent.update_policy': <Scope: function update_policy>, 'train_policy.Agent.ppo_loss': <Scope: function ppo_loss>, 'train_policy.train_PG': <Scope: function train_PG>, 'train_policy.train_PG.unpack_sample': <Scope: function unpack_sample>, 'train_policy.train_PG.listcomp': <Scope: function listcomp>, 'train_policy.main': <Scope: function main>, 'train_policy.main.train_func': <Scope: function train_func>}
Module
Import ['numpy as np']
Set np in <Scope: module > to <Node module:numpy>
Use from <Node module:train_policy> to Import <Node import:np>
Import ['pdb']
Set pdb in <Scope: module > to <Node module:pdb>
Use from <Node module:train_policy> to Import <Node module:pdb>
Import ['random']
Set random in <Scope: module > to <Node module:random>
Use from <Node module:train_policy> to Import <Node module:random>
Import ['pickle']
Set pickle in <Scope: module > to <Node module:pickle>
Use from <Node module:train_policy> to Import <Node module:pickle>
Import ['tensorflow as tf']
Set tf in <Scope: module > to <Node module:tensorflow>
Use from <Node module:train_policy> to Import <Node import:tf>
Import ['tensorflow_probability as tfp']
Set tfp in <Scope: module > to <Node module:tensorflow_probability>
Use from <Node module:train_policy> to Import <Node import:tfp>
Import ['gym']
Set gym in <Scope: module > to <Node module:gym>
Use from <Node module:train_policy> to Import <Node module:gym>
Import ['logz']
Set logz in <Scope: module > to <Node module:logz>
Use from <Node module:train_policy> to Import <Node module:logz>
Import ['scipy.signal']
Set: name scipy.signal not in scope
Use from <Node module:train_policy> to Import <Node module:scipy.signal>
Import ['os']
Set os in <Scope: module > to <Node module:os>
Use from <Node module:train_policy> to Import <Node module:os>
Import ['time']
Set time in <Scope: module > to <Node module:time>
Use from <Node module:train_policy> to Import <Node module:time>
Import ['inspect']
Set inspect in <Scope: module > to <Node module:inspect>
Use from <Node module:train_policy> to Import <Node module:inspect>
ImportFrom: from multiprocessing import ['Process']
Use from <Node module:train_policy> to ImportFrom <Node module:multiprocessing>
Set Process in <Scope: module > to <Node import:multiprocessing.Process>
From setting name Process to <Node import:multiprocessing.Process>
ImportFrom: from replay_buffer import ['ReplayBuffer', 'PPOReplayBuffer']
Use from <Node module:train_policy> to ImportFrom <Node module:replay_buffer>
Set ReplayBuffer in <Scope: module > to <Node import:replay_buffer.ReplayBuffer>
From setting name ReplayBuffer to <Node import:replay_buffer.ReplayBuffer>
Set PPOReplayBuffer in <Scope: module > to <Node import:replay_buffer.PPOReplayBuffer>
From setting name PPOReplayBuffer to <Node import:replay_buffer.PPOReplayBuffer>
ImportFrom: from point_mass import ['PointEnv']
Use from <Node module:train_policy> to ImportFrom <Node module:point_mass>
Set PointEnv in <Scope: module > to <Node import:point_mass.PointEnv>
From setting name PointEnv to <Node import:point_mass.PointEnv>
ImportFrom: from point_mass_observed import ['ObservedPointEnv']
Use from <Node module:train_policy> to ImportFrom <Node module:point_mass_observed>
Set ObservedPointEnv in <Scope: module > to <Node import:point_mass_observed.ObservedPointEnv>
From setting name ObservedPointEnv to <Node import:point_mass_observed.ObservedPointEnv>
FunctionDef minimize_and_clip
Set minimize_and_clip in <Scope: module > to <Node function:train_policy.minimize_and_clip>
Assign ['gradients'] [<_ast.Call object at 0x107b69588>]
Call optimizer.compute_gradients
Name objective in context <class '_ast.Load'>
Get objective in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Name var_list in context <class '_ast.Load'>
Get var_list in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Attribute compute_gradients of optimizer in context <class '_ast.Load'>
Resolve optimizer.compute_gradients in context <class '_ast.Load'>
Get optimizer in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Resolved to attr compute_gradients of <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients> (target obj <Node ---:train_policy.minimize_and_clip.^^^argument^^^> known but target attr compute_gradients not resolved; maybe fwd ref or unanalyzed import)
Name gradients in context <class '_ast.Store'>
Set gradients in <Scope: function minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
For-loop
Call enumerate
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Name enumerate in context <class '_ast.Load'>
Get enumerate in <Scope: function minimize_and_clip>: no Node value (or name not in scope)
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Name i in context <class '_ast.Store'>
Set i in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name grad in context <class '_ast.Store'>
Set grad in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name var in context <class '_ast.Store'>
Set var in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name grad in context <class '_ast.Load'>
Get grad in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Assign [<_ast.Subscript object at 0x107b699e8>] [<_ast.Call object at 0x107b69b00>, 'var']
Call tf.clip_by_norm
Name grad in context <class '_ast.Load'>
Get grad in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Name clip_val in context <class '_ast.Load'>
Get clip_val in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Attribute clip_by_norm of tf in context <class '_ast.Load'>
Resolve tf.clip_by_norm in context <class '_ast.Load'>
Get tf in <Scope: function minimize_and_clip>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr clip_by_norm of <Node module:tensorflow>
Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:tensorflow.clip_by_norm> (target obj <Node module:tensorflow> known but target attr clip_by_norm not resolved; maybe fwd ref or unanalyzed import)
Name var in context <class '_ast.Load'>
Get var in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Name i in context <class '_ast.Load'>
Get i in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node ???:*.enumerate>
Call optimizer.apply_gradients
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:train_policy.minimize_and_clip> to Name <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients>
Attribute apply_gradients of optimizer in context <class '_ast.Load'>
Resolve optimizer.apply_gradients in context <class '_ast.Load'>
Get optimizer in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Resolved to attr apply_gradients of <Node ---:train_policy.minimize_and_clip.^^^argument^^^>
Use from <Node function:train_policy.minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.apply_gradients> (target obj <Node ---:train_policy.minimize_and_clip.^^^argument^^^> known but target attr apply_gradients not resolved; maybe fwd ref or unanalyzed import)
FunctionDef build_mlp
Set build_mlp in <Scope: module > to <Node function:train_policy.build_mlp>
Attribute tanh of tf in context <class '_ast.Load'>
Resolve tf.tanh in context <class '_ast.Load'>
Get tf in <Scope: function build_mlp>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr tanh of <Node module:tensorflow>
Use from <Node function:train_policy.build_mlp> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
Assign ['i'] [<_ast.Num object at 0x107b68198>]
Name i in context <class '_ast.Store'>
Set i in <Scope: function build_mlp>: value None is not a Node
For-loop
Call range
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function build_mlp>: no Node value (or name not in scope)
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.range>
Name i in context <class '_ast.Store'>
Set i in <Scope: function build_mlp> to <Node ???:*.range>
Assign ['x'] [<_ast.Call object at 0x107b68358>]
Call tf.layers.dense
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Call <_ast.Str object at 0x107b68630>.format
Name i in context <class '_ast.Load'>
Get i in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ???:*.range>
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.range>
Attribute format of <_ast.Str object at 0x107b68630> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x107b68630>.format in context <class '_ast.Load'>
Resolved to attr format of <Node class:Str>
getattr format on <_ast.Str object at 0x107b68630> returns <Node attribute:Str.format>
Use from <Node function:train_policy.build_mlp> to <Node attribute:Str.format>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Attribute dense of tf.layers in context <class '_ast.Load'>
Resolve tf.layers.dense in context <class '_ast.Load'>
Resolve tf.layers in context <class '_ast.Load'>
Get tf in <Scope: function build_mlp>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr layers of <Node module:tensorflow>
Unresolved, returning attr dense of unknown
Use from <Node function:train_policy.build_mlp> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_mlp> to <Node ???:*.dense>
Assign ['x'] [<_ast.Call object at 0x107b687f0>]
Call tf.layers.dense
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ???:*.dense>
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.dense>
Name output_size in context <class '_ast.Load'>
Get output_size in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name output_activation in context <class '_ast.Load'>
Get output_activation in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Call <_ast.Str object at 0x107b68ac8>.format
Name i in context <class '_ast.Load'>
Get i in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ???:*.range>
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.range>
Attribute format of <_ast.Str object at 0x107b68ac8> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x107b68ac8>.format in context <class '_ast.Load'>
Resolved to attr format of <Node class:Str>
getattr format on <_ast.Str object at 0x107b68ac8> returns <Node attribute:Str.format>
Use from <Node function:train_policy.build_mlp> to <Node attribute:Str.format>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ---:train_policy.build_mlp.^^^argument^^^>
Use from <Node function:train_policy.build_mlp> to Name <Node ---:train_policy.build_mlp.^^^argument^^^>
Attribute dense of tf.layers in context <class '_ast.Load'>
Resolve tf.layers.dense in context <class '_ast.Load'>
Resolve tf.layers in context <class '_ast.Load'>
Get tf in <Scope: function build_mlp>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr layers of <Node module:tensorflow>
Unresolved, returning attr dense of unknown
Use from <Node function:train_policy.build_mlp> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_mlp> to <Node ???:*.dense>
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_mlp>, found in <Scope: function build_mlp>, value <Node ???:*.dense>
Use from <Node function:train_policy.build_mlp> to Name <Node ???:*.dense>
FunctionDef build_rnn
Set build_rnn in <Scope: module > to <Node function:train_policy.build_rnn>
Attribute tanh of tf in context <class '_ast.Load'>
Resolve tf.tanh in context <class '_ast.Load'>
Get tf in <Scope: function build_rnn>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr tanh of <Node module:tensorflow>
Use from <Node function:train_policy.build_rnn> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
FunctionDef build_policy
Set build_policy in <Scope: module > to <Node function:train_policy.build_policy>
Attribute tanh of tf in context <class '_ast.Load'>
Resolve tf.tanh in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr tanh of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call tf.variable_scope
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Attribute AUTO_REUSE of tf in context <class '_ast.Load'>
Resolve tf.AUTO_REUSE in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr AUTO_REUSE of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.AUTO_REUSE> (target obj <Node module:tensorflow> known but target attr AUTO_REUSE not resolved; maybe fwd ref or unanalyzed import)
Attribute variable_scope of tf in context <class '_ast.Load'>
Resolve tf.variable_scope in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variable_scope of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:train_policy.build_policy> to With <Node attribute:tensorflow.variable_scope>
Name recurrent in context <class '_ast.Load'>
Get recurrent in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Assign ['x', 'h'] [<_ast.Call object at 0x107cf0198>]
Call build_rnn
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name h in context <class '_ast.Load'>
Get h in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name build_rnn in context <class '_ast.Load'>
Get build_rnn in <Scope: function build_policy>, found in <Scope: module >, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_rnn>
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_policy> to <Node function:train_policy.build_rnn>
Name h in context <class '_ast.Store'>
Set h in <Scope: function build_policy> to <Node function:train_policy.build_rnn>
Assign ['x'] [<_ast.Call object at 0x107b6f390>]
Call tf.reshape
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_rnn>
Call x.get_shape
Attribute get_shape of x in context <class '_ast.Load'>
Resolve x.get_shape in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_rnn>
Resolved to attr get_shape of <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
Call x.get_shape
Attribute get_shape of x in context <class '_ast.Load'>
Resolve x.get_shape in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_rnn>
Resolved to attr get_shape of <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
Attribute reshape of tf in context <class '_ast.Load'>
Resolve tf.reshape in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reshape of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.reshape> (target obj <Node module:tensorflow> known but target attr reshape not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_policy> to <Node attribute:tensorflow.reshape>
Assign ['x'] [<_ast.Call object at 0x107b6f860>]
Call build_mlp
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node attribute:tensorflow.reshape>
Use from <Node function:train_policy.build_policy> to Name <Node attribute:tensorflow.reshape>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name build_mlp in context <class '_ast.Load'>
Get build_mlp in <Scope: function build_policy>, found in <Scope: module >, value <Node function:train_policy.build_mlp>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_mlp>
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_policy> to <Node function:train_policy.build_mlp>
Assign ['x'] [<_ast.Call object at 0x107b6fba8>]
Call tf.layers.dense
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_mlp>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_mlp>
Name output_size in context <class '_ast.Load'>
Get output_size in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Name output_activation in context <class '_ast.Load'>
Get output_activation in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ---:train_policy.build_policy.^^^argument^^^>
Use from <Node function:train_policy.build_policy> to Name <Node ---:train_policy.build_policy.^^^argument^^^>
Call tf.initializers.truncated_normal
Attribute truncated_normal of tf.initializers in context <class '_ast.Load'>
Resolve tf.initializers.truncated_normal in context <class '_ast.Load'>
Resolve tf.initializers in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr initializers of <Node module:tensorflow>
Unresolved, returning attr truncated_normal of unknown
Use from <Node function:train_policy.build_policy> to <Node ???:*.truncated_normal> (target obj tf.initializers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call tf.zeros_initializer
Attribute zeros_initializer of tf in context <class '_ast.Load'>
Resolve tf.zeros_initializer in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr zeros_initializer of <Node module:tensorflow>
Use from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.zeros_initializer> (target obj <Node module:tensorflow> known but target attr zeros_initializer not resolved; maybe fwd ref or unanalyzed import)
Attribute dense of tf.layers in context <class '_ast.Load'>
Resolve tf.layers.dense in context <class '_ast.Load'>
Resolve tf.layers in context <class '_ast.Load'>
Get tf in <Scope: function build_policy>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr layers of <Node module:tensorflow>
Unresolved, returning attr dense of unknown
Use from <Node function:train_policy.build_policy> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_policy> to <Node ???:*.dense>
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node ???:*.dense>
Use from <Node function:train_policy.build_policy> to Name <Node ???:*.dense>
Name h in context <class '_ast.Load'>
Get h in <Scope: function build_policy>, found in <Scope: function build_policy>, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_policy> to Name <Node function:train_policy.build_rnn>
FunctionDef build_critic
Set build_critic in <Scope: module > to <Node function:train_policy.build_critic>
Attribute tanh of tf in context <class '_ast.Load'>
Resolve tf.tanh in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr tanh of <Node module:tensorflow>
Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.tanh> (target obj <Node module:tensorflow> known but target attr tanh not resolved; maybe fwd ref or unanalyzed import)
With (context manager)
Call tf.variable_scope
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Attribute AUTO_REUSE of tf in context <class '_ast.Load'>
Resolve tf.AUTO_REUSE in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr AUTO_REUSE of <Node module:tensorflow>
Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.AUTO_REUSE> (target obj <Node module:tensorflow> known but target attr AUTO_REUSE not resolved; maybe fwd ref or unanalyzed import)
Attribute variable_scope of tf in context <class '_ast.Load'>
Resolve tf.variable_scope in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variable_scope of <Node module:tensorflow>
Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:train_policy.build_critic> to With <Node attribute:tensorflow.variable_scope>
Name recurrent in context <class '_ast.Load'>
Get recurrent in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Assign ['x', 'h'] [<_ast.Call object at 0x107b6c978>]
Call build_rnn
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name h in context <class '_ast.Load'>
Get h in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name output_activation in context <class '_ast.Load'>
Get output_activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name build_rnn in context <class '_ast.Load'>
Get build_rnn in <Scope: function build_critic>, found in <Scope: module >, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_rnn>
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_critic> to <Node function:train_policy.build_rnn>
Name h in context <class '_ast.Store'>
Set h in <Scope: function build_critic> to <Node function:train_policy.build_rnn>
Assign ['x'] [<_ast.Call object at 0x107b6ccf8>]
Call tf.reshape
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_rnn>
Call x.get_shape
Attribute get_shape of x in context <class '_ast.Load'>
Resolve x.get_shape in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node function:train_policy.build_rnn>
Resolved to attr get_shape of <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_critic> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
Call x.get_shape
Attribute get_shape of x in context <class '_ast.Load'>
Resolve x.get_shape in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node function:train_policy.build_rnn>
Resolved to attr get_shape of <Node function:train_policy.build_rnn>
Use from <Node function:train_policy.build_critic> to <Node attribute:train_policy.build_rnn.get_shape> (target obj <Node function:train_policy.build_rnn> known but target attr get_shape not resolved; maybe fwd ref or unanalyzed import)
Attribute reshape of tf in context <class '_ast.Load'>
Resolve tf.reshape in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reshape of <Node module:tensorflow>
Use from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.reshape> (target obj <Node module:tensorflow> known but target attr reshape not resolved; maybe fwd ref or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_critic> to <Node attribute:tensorflow.reshape>
Assign ['x'] [<_ast.Call object at 0x107b71208>]
Call build_mlp
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node attribute:tensorflow.reshape>
Use from <Node function:train_policy.build_critic> to Name <Node attribute:tensorflow.reshape>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name size in context <class '_ast.Load'>
Get size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name activation in context <class '_ast.Load'>
Get activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name build_mlp in context <class '_ast.Load'>
Get build_mlp in <Scope: function build_critic>, found in <Scope: module >, value <Node function:train_policy.build_mlp>
Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_mlp>
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_critic> to <Node function:train_policy.build_mlp>
Assign ['x'] [<_ast.Call object at 0x107b715c0>]
Call tf.layers.dense
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node function:train_policy.build_mlp>
Use from <Node function:train_policy.build_critic> to Name <Node function:train_policy.build_mlp>
Name output_size in context <class '_ast.Load'>
Get output_size in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name output_activation in context <class '_ast.Load'>
Get output_activation in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Name regularizer in context <class '_ast.Load'>
Get regularizer in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ---:train_policy.build_critic.^^^argument^^^>
Use from <Node function:train_policy.build_critic> to Name <Node ---:train_policy.build_critic.^^^argument^^^>
Attribute dense of tf.layers in context <class '_ast.Load'>
Resolve tf.layers.dense in context <class '_ast.Load'>
Resolve tf.layers in context <class '_ast.Load'>
Get tf in <Scope: function build_critic>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr layers of <Node module:tensorflow>
Unresolved, returning attr dense of unknown
Use from <Node function:train_policy.build_critic> to <Node ???:*.dense> (target obj tf.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name x in context <class '_ast.Store'>
Set x in <Scope: function build_critic> to <Node ???:*.dense>
Name x in context <class '_ast.Load'>
Get x in <Scope: function build_critic>, found in <Scope: function build_critic>, value <Node ???:*.dense>
Use from <Node function:train_policy.build_critic> to Name <Node ???:*.dense>
FunctionDef pathlength
Set pathlength in <Scope: module > to <Node function:train_policy.pathlength>
Call len
Name path in context <class '_ast.Load'>
Get path in <Scope: function pathlength>, found in <Scope: function pathlength>, value <Node ---:train_policy.pathlength.^^^argument^^^>
Use from <Node function:train_policy.pathlength> to Name <Node ---:train_policy.pathlength.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function pathlength>: no Node value (or name not in scope)
Use from <Node function:train_policy.pathlength> to Name <Node ???:*.len>
FunctionDef discounted_return
Set discounted_return in <Scope: module > to <Node function:train_policy.discounted_return>
Assign ['discounts'] [<_ast.BinOp object at 0x107b71cc0>]
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function discounted_return>, found in <Scope: function discounted_return>, value <Node ---:train_policy.discounted_return.^^^argument^^^>
Use from <Node function:train_policy.discounted_return> to Name <Node ---:train_policy.discounted_return.^^^argument^^^>
Call np.arange
Call len
Name reward in context <class '_ast.Load'>
Get reward in <Scope: function discounted_return>, found in <Scope: function discounted_return>, value <Node ---:train_policy.discounted_return.^^^argument^^^>
Use from <Node function:train_policy.discounted_return> to Name <Node ---:train_policy.discounted_return.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function discounted_return>: no Node value (or name not in scope)
Use from <Node function:train_policy.discounted_return> to Name <Node ???:*.len>
Attribute arange of np in context <class '_ast.Load'>
Resolve np.arange in context <class '_ast.Load'>
Get np in <Scope: function discounted_return>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr arange of <Node module:numpy>
Use from <Node function:train_policy.discounted_return> to <Node attribute:numpy.arange> (target obj <Node module:numpy> known but target attr arange not resolved; maybe fwd ref or unanalyzed import)
Name discounts in context <class '_ast.Store'>
Set discounts in <Scope: function discounted_return> to <Node attribute:numpy.arange>
Call sum
Name discounts in context <class '_ast.Load'>
Get discounts in <Scope: function discounted_return>, found in <Scope: function discounted_return>, value <Node attribute:numpy.arange>
Use from <Node function:train_policy.discounted_return> to Name <Node attribute:numpy.arange>
Name reward in context <class '_ast.Load'>
Get reward in <Scope: function discounted_return>, found in <Scope: function discounted_return>, value <Node ---:train_policy.discounted_return.^^^argument^^^>
Use from <Node function:train_policy.discounted_return> to Name <Node ---:train_policy.discounted_return.^^^argument^^^>
Name sum in context <class '_ast.Load'>
Get sum in <Scope: function discounted_return>: no Node value (or name not in scope)
Use from <Node function:train_policy.discounted_return> to Name <Node ???:*.sum>
FunctionDef discount_cumsum
Set discount_cumsum in <Scope: module > to <Node function:train_policy.discount_cumsum>
Call scipy.signal.lfilter
Call float
Name discount in context <class '_ast.Load'>
Get discount in <Scope: function discount_cumsum>, found in <Scope: function discount_cumsum>, value <Node ---:train_policy.discount_cumsum.^^^argument^^^>
Use from <Node function:train_policy.discount_cumsum> to Name <Node ---:train_policy.discount_cumsum.^^^argument^^^>
Name float in context <class '_ast.Load'>
Get float in <Scope: function discount_cumsum>: no Node value (or name not in scope)
Use from <Node function:train_policy.discount_cumsum> to Name <Node ???:*.float>
Name x in context <class '_ast.Load'>
Get x in <Scope: function discount_cumsum>, found in <Scope: function discount_cumsum>, value <Node ---:train_policy.discount_cumsum.^^^argument^^^>
Use from <Node function:train_policy.discount_cumsum> to Name <Node ---:train_policy.discount_cumsum.^^^argument^^^>
Attribute lfilter of scipy.signal in context <class '_ast.Load'>
Resolve scipy.signal.lfilter in context <class '_ast.Load'>
Resolve scipy.signal in context <class '_ast.Load'>
Get scipy in <Scope: function discount_cumsum>: no Node value (or name not in scope)
Resolved to attr signal of None
Unresolved, returning attr lfilter of unknown
Use from <Node function:train_policy.discount_cumsum> to <Node ???:*.lfilter> (target obj scipy.signal not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef setup_logger
Set setup_logger in <Scope: module > to <Node function:train_policy.setup_logger>
Call logz.configure_output_dir
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function setup_logger>, found in <Scope: function setup_logger>, value <Node ---:train_policy.setup_logger.^^^argument^^^>
Use from <Node function:train_policy.setup_logger> to Name <Node ---:train_policy.setup_logger.^^^argument^^^>
Attribute configure_output_dir of logz in context <class '_ast.Load'>
Resolve logz.configure_output_dir in context <class '_ast.Load'>
Get logz in <Scope: function setup_logger>, found in <Scope: module >, value <Node module:logz>
Resolved to attr configure_output_dir of <Node module:logz>
Use from <Node function:train_policy.setup_logger> to <Node attribute:logz.configure_output_dir> (target obj <Node module:logz> known but target attr configure_output_dir not resolved; maybe fwd ref or unanalyzed import)
Assign ['args'] [<_ast.Subscript object at 0x107b77898>]
Call inspect.getargspec
Name train_PG in context <class '_ast.Load'>
Get train_PG in <Scope: function setup_logger>, found in <Scope: module >, value <Node function:train_policy.train_PG>
Use from <Node function:train_policy.setup_logger> to Name <Node function:train_policy.train_PG>
Use from <Node function:train_policy.setup_logger> to <Node function:train_policy.train_PG> resolves <Node ???:*.train_PG>; removing wildcard
New edge added for Use from <Node function:train_policy.setup_logger> to Name <Node function:train_policy.train_PG>
Attribute getargspec of inspect in context <class '_ast.Load'>
Resolve inspect.getargspec in context <class '_ast.Load'>
Get inspect in <Scope: function setup_logger>, found in <Scope: module >, value <Node module:inspect>
Resolved to attr getargspec of <Node module:inspect>
Use from <Node function:train_policy.setup_logger> to <Node attribute:inspect.getargspec> (target obj <Node module:inspect> known but target attr getargspec not resolved; maybe fwd ref or unanalyzed import)
Name args in context <class '_ast.Store'>
Set args in <Scope: function setup_logger> to <Node attribute:inspect.getargspec>
Assign ['params'] [<_ast.DictComp object at 0x107b77a90>]
DictComp
Name k in context <class '_ast.Load'>
Get k in <Scope: function dictcomp>, found in <Scope: function dictcomp>, value <Node attribute:inspect.getargspec>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node attribute:inspect.getargspec>
Name k in context <class '_ast.Load'>
Get k in <Scope: function dictcomp>, found in <Scope: function dictcomp>, value <Node attribute:inspect.getargspec>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node attribute:inspect.getargspec>
Name locals_ in context <class '_ast.Load'>
Get locals_ in <Scope: function dictcomp>, found in <Scope: function setup_logger>, value <Node ---:train_policy.setup_logger.^^^argument^^^>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ---:train_policy.setup_logger.^^^argument^^^>
Name locals_ in context <class '_ast.Load'>
Get locals_ in <Scope: function dictcomp>, found in <Scope: function setup_logger>, value <Node ---:train_policy.setup_logger.^^^argument^^^>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node ---:train_policy.setup_logger.^^^argument^^^>
Name k in context <class '_ast.Load'>
Get k in <Scope: function dictcomp>, found in <Scope: function dictcomp>, value <Node attribute:inspect.getargspec>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node attribute:inspect.getargspec>
Name args in context <class '_ast.Load'>
Get args in <Scope: function dictcomp>, found in <Scope: function setup_logger>, value <Node attribute:inspect.getargspec>
Use from <Node namespace:train_policy.setup_logger.dictcomp> to Name <Node attribute:inspect.getargspec>
Name k in context <class '_ast.Store'>
Set k in <Scope: function dictcomp> to <Node attribute:inspect.getargspec>
Name params in context <class '_ast.Store'>
Set params in <Scope: function setup_logger> to <Node namespace:train_policy.setup_logger.dictcomp>
Call logz.save_params
Name params in context <class '_ast.Load'>
Get params in <Scope: function setup_logger>, found in <Scope: function setup_logger>, value <Node namespace:train_policy.setup_logger.dictcomp>
Use from <Node function:train_policy.setup_logger> to Name <Node namespace:train_policy.setup_logger.dictcomp>
Attribute save_params of logz in context <class '_ast.Load'>
Resolve logz.save_params in context <class '_ast.Load'>
Get logz in <Scope: function setup_logger>, found in <Scope: module >, value <Node module:logz>
Resolved to attr save_params of <Node module:logz>
Use from <Node function:train_policy.setup_logger> to <Node attribute:logz.save_params> (target obj <Node module:logz> known but target attr save_params not resolved; maybe fwd ref or unanalyzed import)
ClassDef Agent
Set Agent in <Scope: module > to <Node class:train_policy.Agent>
Name object in context <class '_ast.Load'>
Get object in <Scope: class Agent>: no Node value (or name not in scope)
Use from <Node class:train_policy.Agent> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class Agent> to <Node method:train_policy.Agent.__init__>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Call <_ast.Call object at 0x107b79160>.__init__
Attribute __init__ of <_ast.Call object at 0x107b79160> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x107b79160>.__init__ in context <class '_ast.Load'>
Resolving super() of <Node class:train_policy.Agent>
super called for <Node class:train_policy.Agent>, but no known bases
Assign ['self.ob_dim'] [<_ast.Subscript object at 0x107b792e8>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute ob_dim of self in context <class '_ast.Store'>
Resolve self.ob_dim in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ob_dim of <Node class:train_policy.Agent>
setattr ob_dim on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.ac_dim'] [<_ast.Subscript object at 0x107b79470>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute ac_dim of self in context <class '_ast.Store'>
Resolve self.ac_dim in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
setattr ac_dim on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.task_dim'] [<_ast.Subscript object at 0x107b795f8>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute task_dim of self in context <class '_ast.Store'>
Resolve self.task_dim in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr task_dim of <Node class:train_policy.Agent>
setattr task_dim on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.reward_dim'] [<_ast.Num object at 0x107b79780>]
Attribute reward_dim of self in context <class '_ast.Store'>
Assign ['self.terminal_dim'] [<_ast.Num object at 0x107b79860>]
Attribute terminal_dim of self in context <class '_ast.Store'>
Assign ['self.meta_ob_dim'] [<_ast.BinOp object at 0x107b79940>]
Attribute ob_dim of self in context <class '_ast.Load'>
Resolve self.ob_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ob_dim of <Node class:train_policy.Agent>
getattr ob_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute reward_dim of self in context <class '_ast.Load'>
Resolve self.reward_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr reward_dim of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.__init__> to <Node ???:*.reward_dim> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.__init__> to <Node ???:*.reward_dim> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute terminal_dim of self in context <class '_ast.Load'>
Resolve self.terminal_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr terminal_dim of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.__init__> to <Node ???:*.terminal_dim> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.__init__> to <Node ???:*.terminal_dim> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute meta_ob_dim of self in context <class '_ast.Store'>
Resolve self.meta_ob_dim in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
setattr meta_ob_dim on self to <Node ???:*.terminal_dim>
Assign ['self.scope'] [<_ast.Str object at 0x107b79c50>]
Attribute scope of self in context <class '_ast.Store'>
Assign ['self.size'] [<_ast.Subscript object at 0x107b79d30>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Store'>
Resolve self.size in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr size of <Node class:train_policy.Agent>
setattr size on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.gru_size'] [<_ast.Subscript object at 0x107b79eb8>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Store'>
Resolve self.gru_size in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
setattr gru_size on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.n_layers'] [<_ast.Subscript object at 0x107b87080>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute n_layers of self in context <class '_ast.Store'>
Resolve self.n_layers in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr n_layers of <Node class:train_policy.Agent>
setattr n_layers on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.learning_rate'] [<_ast.Subscript object at 0x107b87208>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute learning_rate of self in context <class '_ast.Store'>
Resolve self.learning_rate in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr learning_rate of <Node class:train_policy.Agent>
setattr learning_rate on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.history'] [<_ast.Subscript object at 0x107b87390>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute history of self in context <class '_ast.Store'>
Resolve self.history in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
setattr history on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.num_value_iters'] [<_ast.Subscript object at 0x107b87518>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute num_value_iters of self in context <class '_ast.Store'>
Resolve self.num_value_iters in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr num_value_iters of <Node class:train_policy.Agent>
setattr num_value_iters on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.l2reg'] [<_ast.Subscript object at 0x107b876a0>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute l2reg of self in context <class '_ast.Store'>
Resolve self.l2reg in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr l2reg of <Node class:train_policy.Agent>
setattr l2reg on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.recurrent'] [<_ast.Subscript object at 0x107b87828>]
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute recurrent of self in context <class '_ast.Store'>
Resolve self.recurrent in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr recurrent of <Node class:train_policy.Agent>
setattr recurrent on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.animate'] [<_ast.Subscript object at 0x107b879b0>]
Name sample_trajectory_args in context <class '_ast.Load'>
Get sample_trajectory_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute animate of self in context <class '_ast.Store'>
Resolve self.animate in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr animate of <Node class:train_policy.Agent>
setattr animate on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.max_path_length'] [<_ast.Subscript object at 0x107b87b38>]
Name sample_trajectory_args in context <class '_ast.Load'>
Get sample_trajectory_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute max_path_length of self in context <class '_ast.Store'>
Resolve self.max_path_length in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr max_path_length of <Node class:train_policy.Agent>
setattr max_path_length on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.min_timesteps_per_batch'] [<_ast.Subscript object at 0x107b87cc0>]
Name sample_trajectory_args in context <class '_ast.Load'>
Get sample_trajectory_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute min_timesteps_per_batch of self in context <class '_ast.Store'>
Resolve self.min_timesteps_per_batch in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr min_timesteps_per_batch of <Node class:train_policy.Agent>
setattr min_timesteps_per_batch on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.gamma'] [<_ast.Subscript object at 0x107b87e48>]
Name estimate_return_args in context <class '_ast.Load'>
Get estimate_return_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gamma of self in context <class '_ast.Store'>
Resolve self.gamma in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr gamma of <Node class:train_policy.Agent>
setattr gamma on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.nn_critic'] [<_ast.Subscript object at 0x107b87fd0>]
Name estimate_return_args in context <class '_ast.Load'>
Get estimate_return_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute nn_critic of self in context <class '_ast.Store'>
Resolve self.nn_critic in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr nn_critic of <Node class:train_policy.Agent>
setattr nn_critic on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.normalize_advantages'] [<_ast.Subscript object at 0x107b82198>]
Name estimate_return_args in context <class '_ast.Load'>
Get estimate_return_args in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute normalize_advantages of self in context <class '_ast.Store'>
Resolve self.normalize_advantages in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr normalize_advantages of <Node class:train_policy.Agent>
setattr normalize_advantages on self to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['self.replay_buffer'] [<_ast.Call object at 0x107b82320>]
Call ReplayBuffer
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute meta_ob_dim of self in context <class '_ast.Load'>
Resolve self.meta_ob_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
getattr meta_ob_dim on self returns <Node ???:*.terminal_dim>
Use from <Node method:train_policy.Agent.__init__> to <Node ???:*.terminal_dim>
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute task_dim of self in context <class '_ast.Load'>
Resolve self.task_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr task_dim of <Node class:train_policy.Agent>
getattr task_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name ReplayBuffer in context <class '_ast.Load'>
Get ReplayBuffer in <Scope: function __init__>, found in <Scope: module >, value <Node import:replay_buffer.ReplayBuffer>
Use from <Node method:train_policy.Agent.__init__> to Name <Node import:replay_buffer.ReplayBuffer>
Attribute replay_buffer of self in context <class '_ast.Store'>
Resolve self.replay_buffer in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr replay_buffer of <Node class:train_policy.Agent>
setattr replay_buffer on self to <Node import:replay_buffer.ReplayBuffer>
Assign ['self.val_replay_buffer'] [<_ast.Call object at 0x107b82710>]
Call ReplayBuffer
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute meta_ob_dim of self in context <class '_ast.Load'>
Resolve self.meta_ob_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
getattr meta_ob_dim on self returns <Node ???:*.terminal_dim>
Use from <Node method:train_policy.Agent.__init__> to <Node ???:*.terminal_dim>
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute task_dim of self in context <class '_ast.Load'>
Resolve self.task_dim in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr task_dim of <Node class:train_policy.Agent>
getattr task_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name ReplayBuffer in context <class '_ast.Load'>
Get ReplayBuffer in <Scope: function __init__>, found in <Scope: module >, value <Node import:replay_buffer.ReplayBuffer>
Use from <Node method:train_policy.Agent.__init__> to Name <Node import:replay_buffer.ReplayBuffer>
Attribute val_replay_buffer of self in context <class '_ast.Store'>
Resolve self.val_replay_buffer in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:train_policy.Agent>
Resolved to attr val_replay_buffer of <Node class:train_policy.Agent>
setattr val_replay_buffer on self to <Node import:replay_buffer.ReplayBuffer>
FunctionDef init_tf_sess
Set init_tf_sess in <Scope: class Agent> to <Node method:train_policy.Agent.init_tf_sess>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['tf_config'] [<_ast.Call object at 0x107b82b70>]
Call tf.ConfigProto
Attribute ConfigProto of tf in context <class '_ast.Load'>
Resolve tf.ConfigProto in context <class '_ast.Load'>
Get tf in <Scope: function init_tf_sess>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr ConfigProto of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.ConfigProto> (target obj <Node module:tensorflow> known but target attr ConfigProto not resolved; maybe fwd ref or unanalyzed import)
Name tf_config in context <class '_ast.Store'>
Set tf_config in <Scope: function init_tf_sess> to <Node attribute:tensorflow.ConfigProto>
Assign ['tf_config.gpu_options.allow_growth'] [<_ast.NameConstant object at 0x107b82dd8>]
Attribute allow_growth of tf_config.gpu_options in context <class '_ast.Store'>
Assign ['self.sess'] [<_ast.Call object at 0x107b82eb8>]
Call tf.Session
Name tf_config in context <class '_ast.Load'>
Get tf_config in <Scope: function init_tf_sess>, found in <Scope: function init_tf_sess>, value <Node attribute:tensorflow.ConfigProto>
Use from <Node method:train_policy.Agent.init_tf_sess> to Name <Node attribute:tensorflow.ConfigProto>
Attribute Session of tf in context <class '_ast.Load'>
Resolve tf.Session in context <class '_ast.Load'>
Get tf in <Scope: function init_tf_sess>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr Session of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session> (target obj <Node module:tensorflow> known but target attr Session not resolved; maybe fwd ref or unanalyzed import)
Attribute sess of self in context <class '_ast.Store'>
Resolve self.sess in context <class '_ast.Store'>
Get self in <Scope: function init_tf_sess>, found in <Scope: function init_tf_sess>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
setattr sess on self to <Node attribute:tensorflow.Session>
Call self.sess.__enter__
Attribute __enter__ of self.sess in context <class '_ast.Load'>
Resolve self.sess.__enter__ in context <class '_ast.Load'>
Resolve self.sess in context <class '_ast.Load'>
Get self in <Scope: function init_tf_sess>, found in <Scope: function init_tf_sess>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr __enter__ of <Node attribute:tensorflow.Session>
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session.__enter__> (target obj <Node attribute:tensorflow.Session> known but target attr __enter__ not resolved; maybe fwd ref or unanalyzed import)
Call <_ast.Call object at 0x107b831d0>.run
Attribute run of <_ast.Call object at 0x107b831d0> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x107b831d0>.run in context <class '_ast.Load'>
Unresolved function call as obj, returning attr run of unknown
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node ???:*.run> (target obj <_ast.Call object at 0x107b831d0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef define_placeholders
Set define_placeholders in <Scope: class Agent> to <Node method:train_policy.Agent.define_placeholders>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['sy_ob_no'] [<_ast.Call object at 0x107b83400>]
Call tf.placeholder
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute meta_ob_dim of self in context <class '_ast.Load'>
Resolve self.meta_ob_dim in context <class '_ast.Load'>
Get self in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
getattr meta_ob_dim on self returns <Node ???:*.terminal_dim>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node ???:*.terminal_dim>
New edge added for Use from <Node method:train_policy.Agent.define_placeholders> to <Node ???:*.terminal_dim>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_ob_no in context <class '_ast.Store'>
Set sy_ob_no in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_ac_na'] [<_ast.Call object at 0x107b837b8>]
Call tf.placeholder
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_ac_na in context <class '_ast.Store'>
Set sy_ac_na in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_adv_n'] [<_ast.Call object at 0x107b83b00>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_adv_n in context <class '_ast.Store'>
Set sy_adv_n in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_hidden'] [<_ast.Call object at 0x107b83dd8>]
Call tf.placeholder
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_hidden in context <class '_ast.Store'>
Set sy_hidden in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_lp_n'] [<_ast.Call object at 0x107b85160>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_lp_n in context <class '_ast.Store'>
Set sy_lp_n in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Assign ['sy_fixed_lp_n'] [<_ast.Call object at 0x107b85438>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function define_placeholders>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Name sy_fixed_lp_n in context <class '_ast.Store'>
Set sy_fixed_lp_n in <Scope: function define_placeholders> to <Node attribute:tensorflow.placeholder>
Name sy_ob_no in context <class '_ast.Load'>
Get sy_ob_no in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_ac_na in context <class '_ast.Load'>
Get sy_ac_na in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_adv_n in context <class '_ast.Load'>
Get sy_adv_n in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_hidden in context <class '_ast.Load'>
Get sy_hidden in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_lp_n in context <class '_ast.Load'>
Get sy_lp_n in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
Name sy_fixed_lp_n in context <class '_ast.Load'>
Get sy_fixed_lp_n in <Scope: function define_placeholders>, found in <Scope: function define_placeholders>, value <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.define_placeholders> to Name <Node attribute:tensorflow.placeholder>
FunctionDef policy_forward_pass
Set policy_forward_pass in <Scope: class Agent> to <Node method:train_policy.Agent.policy_forward_pass>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['sy_policy_params', 'sy_hidden'] [<_ast.Call object at 0x107b85ac8>]
Call build_policy
Name sy_ob_no in context <class '_ast.Load'>
Get sy_ob_no in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
Name sy_hidden in context <class '_ast.Load'>
Get sy_hidden in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^>
Attribute ac_dim of self in context <class '_ast.Load'>
Resolve self.ac_dim in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr ac_dim of <Node class:train_policy.Agent>
getattr ac_dim on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute scope of self in context <class '_ast.Load'>
Resolve self.scope in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr scope of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ???:*.scope> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ???:*.scope> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute n_layers of self in context <class '_ast.Load'>
Resolve self.n_layers in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr n_layers of <Node class:train_policy.Agent>
getattr n_layers on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr size of <Node class:train_policy.Agent>
getattr size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute recurrent of self in context <class '_ast.Load'>
Resolve self.recurrent in context <class '_ast.Load'>
Get self in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node class:train_policy.Agent>
Resolved to attr recurrent of <Node class:train_policy.Agent>
getattr recurrent on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name build_policy in context <class '_ast.Load'>
Get build_policy in <Scope: function policy_forward_pass>, found in <Scope: module >, value <Node function:train_policy.build_policy>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node function:train_policy.build_policy>
Name sy_policy_params in context <class '_ast.Store'>
Set sy_policy_params in <Scope: function policy_forward_pass> to <Node function:train_policy.build_policy>
Name sy_hidden in context <class '_ast.Store'>
Set sy_hidden in <Scope: function policy_forward_pass> to <Node function:train_policy.build_policy>
Name sy_policy_params in context <class '_ast.Load'>
Get sy_policy_params in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node function:train_policy.build_policy>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node function:train_policy.build_policy>
Name sy_hidden in context <class '_ast.Load'>
Get sy_hidden in <Scope: function policy_forward_pass>, found in <Scope: function policy_forward_pass>, value <Node function:train_policy.build_policy>
Use from <Node method:train_policy.Agent.policy_forward_pass> to Name <Node function:train_policy.build_policy>
FunctionDef sample_action
Set sample_action in <Scope: class Agent> to <Node method:train_policy.Agent.sample_action>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['sy_mean', 'sy_logstd'] ['policy_parameters']
Name policy_parameters in context <class '_ast.Load'>
Get policy_parameters in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Name sy_mean in context <class '_ast.Store'>
Set sy_mean in <Scope: function sample_action> to <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Name sy_logstd in context <class '_ast.Store'>
Set sy_logstd in <Scope: function sample_action> to <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Assign ['sy_sampled_ac'] [<_ast.BinOp object at 0x107b8a390>]
Name sy_mean in context <class '_ast.Load'>
Get sy_mean in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Call tf.exp
Name sy_logstd in context <class '_ast.Load'>
Get sy_logstd in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Attribute exp of tf in context <class '_ast.Load'>
Resolve tf.exp in context <class '_ast.Load'>
Get tf in <Scope: function sample_action>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr exp of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.exp> (target obj <Node module:tensorflow> known but target attr exp not resolved; maybe fwd ref or unanalyzed import)
Call tf.random_normal
Call tf.shape
Name sy_mean in context <class '_ast.Load'>
Get sy_mean in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node ---:train_policy.Agent.sample_action.^^^argument^^^>
Attribute shape of tf in context <class '_ast.Load'>
Resolve tf.shape in context <class '_ast.Load'>
Get tf in <Scope: function sample_action>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr shape of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.shape> (target obj <Node module:tensorflow> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Attribute random_normal of tf in context <class '_ast.Load'>
Resolve tf.random_normal in context <class '_ast.Load'>
Get tf in <Scope: function sample_action>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr random_normal of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.random_normal> (target obj <Node module:tensorflow> known but target attr random_normal not resolved; maybe fwd ref or unanalyzed import)
Name sy_sampled_ac in context <class '_ast.Store'>
Set sy_sampled_ac in <Scope: function sample_action> to <Node attribute:tensorflow.random_normal>
Name sy_sampled_ac in context <class '_ast.Load'>
Get sy_sampled_ac in <Scope: function sample_action>, found in <Scope: function sample_action>, value <Node attribute:tensorflow.random_normal>
Use from <Node method:train_policy.Agent.sample_action> to Name <Node attribute:tensorflow.random_normal>
FunctionDef get_log_prob
Set get_log_prob in <Scope: class Agent> to <Node method:train_policy.Agent.get_log_prob>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['sy_mean', 'sy_logstd'] ['policy_parameters']
Name policy_parameters in context <class '_ast.Load'>
Get policy_parameters in <Scope: function get_log_prob>, found in <Scope: function get_log_prob>, value <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Use from <Node method:train_policy.Agent.get_log_prob> to Name <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Name sy_mean in context <class '_ast.Store'>
Set sy_mean in <Scope: function get_log_prob> to <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Name sy_logstd in context <class '_ast.Store'>
Set sy_logstd in <Scope: function get_log_prob> to <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Assign ['sy_lp_n'] [<_ast.Call object at 0x107b8aa90>]
Call <_ast.Call object at 0x107b8ab00>.log_prob
Name sy_ac_na in context <class '_ast.Load'>
Get sy_ac_na in <Scope: function get_log_prob>, found in <Scope: function get_log_prob>, value <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Use from <Node method:train_policy.Agent.get_log_prob> to Name <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^>
Attribute log_prob of <_ast.Call object at 0x107b8ab00> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x107b8ab00>.log_prob in context <class '_ast.Load'>
Unresolved function call as obj, returning attr log_prob of unknown
Use from <Node method:train_policy.Agent.get_log_prob> to <Node ???:*.log_prob> (target obj <_ast.Call object at 0x107b8ab00> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sy_lp_n in context <class '_ast.Store'>
Set sy_lp_n in <Scope: function get_log_prob> to <Node ???:*.log_prob>
Name sy_lp_n in context <class '_ast.Load'>
Get sy_lp_n in <Scope: function get_log_prob>, found in <Scope: function get_log_prob>, value <Node ???:*.log_prob>
Use from <Node method:train_policy.Agent.get_log_prob> to Name <Node ???:*.log_prob>
FunctionDef build_computation_graph
Set build_computation_graph in <Scope: class Agent> to <Node method:train_policy.Agent.build_computation_graph>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['self.sy_ob_no', 'self.sy_ac_na', 'self.sy_adv_n', 'self.sy_hidden', 'self.sy_lp_n', 'self.sy_fixed_lp_n'] [<_ast.Call object at 0x107b8e278>]
Call self.define_placeholders
Attribute define_placeholders of self in context <class '_ast.Load'>
Resolve self.define_placeholders in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr define_placeholders of <Node class:train_policy.Agent>
getattr define_placeholders on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ob_no of self in context <class '_ast.Store'>
Resolve self.sy_ob_no in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
setattr sy_ob_no on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ac_na of self in context <class '_ast.Store'>
Resolve self.sy_ac_na in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
setattr sy_ac_na on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_adv_n of self in context <class '_ast.Store'>
Resolve self.sy_adv_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_adv_n of <Node class:train_policy.Agent>
setattr sy_adv_n on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Store'>
Resolve self.sy_hidden in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
setattr sy_hidden on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_lp_n of self in context <class '_ast.Store'>
Resolve self.sy_lp_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
setattr sy_lp_n on self to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_fixed_lp_n of self in context <class '_ast.Store'>
Resolve self.sy_fixed_lp_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_fixed_lp_n of <Node class:train_policy.Agent>
setattr sy_fixed_lp_n on self to <Node method:train_policy.Agent.define_placeholders>
Assign ['policy_outputs'] [<_ast.Call object at 0x107b8e390>]
Call self.policy_forward_pass
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute policy_forward_pass of self in context <class '_ast.Load'>
Resolve self.policy_forward_pass in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_forward_pass of <Node class:train_policy.Agent>
getattr policy_forward_pass on self returns <Node method:train_policy.Agent.policy_forward_pass>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.policy_forward_pass>
Name policy_outputs in context <class '_ast.Store'>
Set policy_outputs in <Scope: function build_computation_graph> to <Node method:train_policy.Agent.policy_forward_pass>
Assign ['self.policy_parameters'] [<_ast.Subscript object at 0x107b8e5c0>]
Name policy_outputs in context <class '_ast.Load'>
Get policy_outputs in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node method:train_policy.Agent.policy_forward_pass>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node method:train_policy.Agent.policy_forward_pass>
Attribute policy_parameters of self in context <class '_ast.Store'>
Resolve self.policy_parameters in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
setattr policy_parameters on self to <Node method:train_policy.Agent.policy_forward_pass>
Assign ['self.policy_parameters'] [<_ast.Call object at 0x107b8e780>]
Call tf.split
Attribute policy_parameters of self in context <class '_ast.Load'>
Resolve self.policy_parameters in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
getattr policy_parameters on self returns <Node method:train_policy.Agent.policy_forward_pass>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.policy_forward_pass>
Attribute split of tf in context <class '_ast.Load'>
Resolve tf.split in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr split of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.split> (target obj <Node module:tensorflow> known but target attr split not resolved; maybe fwd ref or unanalyzed import)
Attribute policy_parameters of self in context <class '_ast.Store'>
Resolve self.policy_parameters in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
setattr policy_parameters on self to <Node attribute:tensorflow.split>
Assign ['self.sy_sampled_ac'] [<_ast.Call object at 0x107b8ea90>]
Call self.sample_action
Attribute policy_parameters of self in context <class '_ast.Load'>
Resolve self.policy_parameters in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
getattr policy_parameters on self returns <Node attribute:tensorflow.split>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.split>
Attribute sample_action of self in context <class '_ast.Load'>
Resolve self.sample_action in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sample_action of <Node class:train_policy.Agent>
getattr sample_action on self returns <Node method:train_policy.Agent.sample_action>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.sample_action>
Attribute sy_sampled_ac of self in context <class '_ast.Store'>
Resolve self.sy_sampled_ac in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_sampled_ac of <Node class:train_policy.Agent>
setattr sy_sampled_ac on self to <Node method:train_policy.Agent.sample_action>
Assign ['self.sy_lp_n'] [<_ast.Call object at 0x107b8ec50>]
Call self.get_log_prob
Attribute policy_parameters of self in context <class '_ast.Load'>
Resolve self.policy_parameters in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_parameters of <Node class:train_policy.Agent>
getattr policy_parameters on self returns <Node attribute:tensorflow.split>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.split>
Attribute sy_ac_na of self in context <class '_ast.Load'>
Resolve self.sy_ac_na in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
getattr sy_ac_na on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute get_log_prob of self in context <class '_ast.Load'>
Resolve self.get_log_prob in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr get_log_prob of <Node class:train_policy.Agent>
getattr get_log_prob on self returns <Node method:train_policy.Agent.get_log_prob>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.get_log_prob>
Attribute sy_lp_n of self in context <class '_ast.Store'>
Resolve self.sy_lp_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
setattr sy_lp_n on self to <Node method:train_policy.Agent.get_log_prob>
Assign ['critic_regularizer'] [<_ast.IfExp object at 0x107b8ee48>]
Attribute l2reg of self in context <class '_ast.Load'>
Resolve self.l2reg in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr l2reg of <Node class:train_policy.Agent>
getattr l2reg on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Call tf.contrib.layers.l2_regularizer
Attribute l2_regularizer of tf.contrib.layers in context <class '_ast.Load'>
Resolve tf.contrib.layers.l2_regularizer in context <class '_ast.Load'>
Resolve tf.contrib.layers in context <class '_ast.Load'>
Resolve tf.contrib in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr contrib of <Node module:tensorflow>
Unresolved, returning attr layers of unknown
Unresolved, returning attr l2_regularizer of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.l2_regularizer> (target obj tf.contrib.layers not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name critic_regularizer in context <class '_ast.Store'>
Set critic_regularizer in <Scope: function build_computation_graph> to <Node ???:*.l2_regularizer>
Assign ['self.critic_prediction'] [<_ast.Call object at 0x107b92160>]
Call tf.squeeze
Call build_critic
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute n_layers of self in context <class '_ast.Load'>
Resolve self.n_layers in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr n_layers of <Node class:train_policy.Agent>
getattr n_layers on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr size of <Node class:train_policy.Agent>
getattr size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute recurrent of self in context <class '_ast.Load'>
Resolve self.recurrent in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr recurrent of <Node class:train_policy.Agent>
getattr recurrent on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name critic_regularizer in context <class '_ast.Load'>
Get critic_regularizer in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node ???:*.l2_regularizer>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node ???:*.l2_regularizer>
Name build_critic in context <class '_ast.Load'>
Get build_critic in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node function:train_policy.build_critic>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node function:train_policy.build_critic>
Attribute squeeze of tf in context <class '_ast.Load'>
Resolve tf.squeeze in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr squeeze of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.squeeze> (target obj <Node module:tensorflow> known but target attr squeeze not resolved; maybe fwd ref or unanalyzed import)
Attribute critic_prediction of self in context <class '_ast.Store'>
Resolve self.critic_prediction in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_prediction of <Node class:train_policy.Agent>
setattr critic_prediction on self to <Node attribute:tensorflow.squeeze>
Assign ['self.sy_target_n'] [<_ast.Call object at 0x107b92780>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute sy_target_n of self in context <class '_ast.Store'>
Resolve self.sy_target_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_target_n of <Node class:train_policy.Agent>
setattr sy_target_n on self to <Node attribute:tensorflow.placeholder>
Assign ['self.critic_loss'] [<_ast.Call object at 0x107b92a90>]
Call tf.losses.mean_squared_error
Attribute sy_target_n of self in context <class '_ast.Load'>
Resolve self.sy_target_n in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_target_n of <Node class:train_policy.Agent>
getattr sy_target_n on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.placeholder>
Attribute critic_prediction of self in context <class '_ast.Load'>
Resolve self.critic_prediction in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_prediction of <Node class:train_policy.Agent>
getattr critic_prediction on self returns <Node attribute:tensorflow.squeeze>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.squeeze>
Attribute mean_squared_error of tf.losses in context <class '_ast.Load'>
Resolve tf.losses.mean_squared_error in context <class '_ast.Load'>
Resolve tf.losses in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr losses of <Node module:tensorflow>
Unresolved, returning attr mean_squared_error of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.mean_squared_error> (target obj tf.losses not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute critic_loss of self in context <class '_ast.Store'>
Resolve self.critic_loss in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_loss of <Node class:train_policy.Agent>
setattr critic_loss on self to <Node ???:*.mean_squared_error>
Assign ['self.critic_weights'] [<_ast.Call object at 0x107b92cf8>]
Call tf.get_collection
Attribute GLOBAL_VARIABLES of tf.GraphKeys in context <class '_ast.Load'>
Resolve tf.GraphKeys.GLOBAL_VARIABLES in context <class '_ast.Load'>
Resolve tf.GraphKeys in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr GraphKeys of <Node module:tensorflow>
Unresolved, returning attr GLOBAL_VARIABLES of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.GLOBAL_VARIABLES> (target obj tf.GraphKeys not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_collection of tf in context <class '_ast.Load'>
Resolve tf.get_collection in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr get_collection of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.get_collection> (target obj <Node module:tensorflow> known but target attr get_collection not resolved; maybe fwd ref or unanalyzed import)
Attribute critic_weights of self in context <class '_ast.Store'>
Resolve self.critic_weights in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_weights of <Node class:train_policy.Agent>
setattr critic_weights on self to <Node attribute:tensorflow.get_collection>
Assign ['self.critic_update_op'] [<_ast.Call object at 0x107b92f60>]
Call <_ast.Call object at 0x107b92fd0>.minimize
Attribute critic_loss of self in context <class '_ast.Load'>
Resolve self.critic_loss in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_loss of <Node class:train_policy.Agent>
getattr critic_loss on self returns <Node ???:*.mean_squared_error>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.mean_squared_error>
Attribute minimize of <_ast.Call object at 0x107b92fd0> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x107b92fd0>.minimize in context <class '_ast.Load'>
Unresolved function call as obj, returning attr minimize of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.minimize> (target obj <_ast.Call object at 0x107b92fd0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute critic_update_op of self in context <class '_ast.Store'>
Resolve self.critic_update_op in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr critic_update_op of <Node class:train_policy.Agent>
setattr critic_update_op on self to <Node ???:*.minimize>
Assign ['self.sy_fixed_log_prob_n'] [<_ast.Call object at 0x107b97278>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute sy_fixed_log_prob_n of self in context <class '_ast.Store'>
Resolve self.sy_fixed_log_prob_n in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_fixed_log_prob_n of <Node class:train_policy.Agent>
setattr sy_fixed_log_prob_n on self to <Node attribute:tensorflow.placeholder>
Assign ['self.policy_surr_loss'] [<_ast.Call object at 0x107b97588>]
Call self.ppo_loss
Attribute sy_lp_n of self in context <class '_ast.Load'>
Resolve self.sy_lp_n in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
getattr sy_lp_n on self returns <Node method:train_policy.Agent.get_log_prob>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.get_log_prob>
Attribute sy_fixed_lp_n of self in context <class '_ast.Load'>
Resolve self.sy_fixed_lp_n in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_fixed_lp_n of <Node class:train_policy.Agent>
getattr sy_fixed_lp_n on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_adv_n of self in context <class '_ast.Load'>
Resolve self.sy_adv_n in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr sy_adv_n of <Node class:train_policy.Agent>
getattr sy_adv_n on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.define_placeholders>
Attribute ppo_loss of self in context <class '_ast.Load'>
Resolve self.ppo_loss in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr ppo_loss of <Node class:train_policy.Agent>
getattr ppo_loss on self returns <Node method:train_policy.Agent.ppo_loss>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.ppo_loss>
Attribute policy_surr_loss of self in context <class '_ast.Store'>
Resolve self.policy_surr_loss in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_surr_loss of <Node class:train_policy.Agent>
setattr policy_surr_loss on self to <Node method:train_policy.Agent.ppo_loss>
Assign ['self.policy_weights'] [<_ast.Call object at 0x107b97828>]
Call tf.get_collection
Attribute GLOBAL_VARIABLES of tf.GraphKeys in context <class '_ast.Load'>
Resolve tf.GraphKeys.GLOBAL_VARIABLES in context <class '_ast.Load'>
Resolve tf.GraphKeys in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr GraphKeys of <Node module:tensorflow>
Unresolved, returning attr GLOBAL_VARIABLES of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.GLOBAL_VARIABLES> (target obj tf.GraphKeys not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute scope of self in context <class '_ast.Load'>
Resolve self.scope in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr scope of <Node class:train_policy.Agent>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.scope> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.scope> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute get_collection of tf in context <class '_ast.Load'>
Resolve tf.get_collection in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr get_collection of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.get_collection> (target obj <Node module:tensorflow> known but target attr get_collection not resolved; maybe fwd ref or unanalyzed import)
Attribute policy_weights of self in context <class '_ast.Store'>
Resolve self.policy_weights in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_weights of <Node class:train_policy.Agent>
setattr policy_weights on self to <Node attribute:tensorflow.get_collection>
Assign ['optimizer'] [<_ast.Call object at 0x107b97a90>]
Call tf.train.AdamOptimizer
Attribute learning_rate of self in context <class '_ast.Load'>
Resolve self.learning_rate in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr learning_rate of <Node class:train_policy.Agent>
getattr learning_rate on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute AdamOptimizer of tf.train in context <class '_ast.Load'>
Resolve tf.train.AdamOptimizer in context <class '_ast.Load'>
Resolve tf.train in context <class '_ast.Load'>
Get tf in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr train of <Node module:tensorflow>
Unresolved, returning attr AdamOptimizer of unknown
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node ???:*.AdamOptimizer> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name optimizer in context <class '_ast.Store'>
Set optimizer in <Scope: function build_computation_graph> to <Node ???:*.AdamOptimizer>
Assign ['self.policy_update_op'] [<_ast.Call object at 0x107b97c88>]
Call minimize_and_clip
Name optimizer in context <class '_ast.Load'>
Get optimizer in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node ???:*.AdamOptimizer>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node ???:*.AdamOptimizer>
Attribute policy_surr_loss of self in context <class '_ast.Load'>
Resolve self.policy_surr_loss in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_surr_loss of <Node class:train_policy.Agent>
getattr policy_surr_loss on self returns <Node method:train_policy.Agent.ppo_loss>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node method:train_policy.Agent.ppo_loss>
Attribute policy_weights of self in context <class '_ast.Load'>
Resolve self.policy_weights in context <class '_ast.Load'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_weights of <Node class:train_policy.Agent>
getattr policy_weights on self returns <Node attribute:tensorflow.get_collection>
Use from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.get_collection>
Name minimize_and_clip in context <class '_ast.Load'>
Get minimize_and_clip in <Scope: function build_computation_graph>, found in <Scope: module >, value <Node function:train_policy.minimize_and_clip>
Use from <Node method:train_policy.Agent.build_computation_graph> to Name <Node function:train_policy.minimize_and_clip>
Attribute policy_update_op of self in context <class '_ast.Store'>
Resolve self.policy_update_op in context <class '_ast.Store'>
Get self in <Scope: function build_computation_graph>, found in <Scope: function build_computation_graph>, value <Node class:train_policy.Agent>
Resolved to attr policy_update_op of <Node class:train_policy.Agent>
setattr policy_update_op on self to <Node function:train_policy.minimize_and_clip>
FunctionDef sample_trajectories
Set sample_trajectories in <Scope: class Agent> to <Node method:train_policy.Agent.sample_trajectories>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['timesteps_this_batch'] [<_ast.Num object at 0x107cee128>]
Name timesteps_this_batch in context <class '_ast.Store'>
Set timesteps_this_batch in <Scope: function sample_trajectories>: value None is not a Node
Assign ['stats'] []
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function sample_trajectories>: value None is not a Node
Assign ['animate_this_episode'] [<_ast.BoolOp object at 0x107cee2e8>]
Call len
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node method:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node method:train_policy.Agent.sample_trajectory>
Name len in context <class '_ast.Load'>
Get len in <Scope: function sample_trajectories>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ???:*.len>
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Attribute animate of self in context <class '_ast.Load'>
Resolve self.animate in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node class:train_policy.Agent>
Resolved to attr animate of <Node class:train_policy.Agent>
getattr animate on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name animate_this_episode in context <class '_ast.Store'>
Set animate_this_episode in <Scope: function sample_trajectories> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['steps', 's'] [<_ast.Call object at 0x107cee6a0>]
Call self.sample_trajectory
Name env in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Name animate_this_episode in context <class '_ast.Load'>
Get animate_this_episode in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name is_evaluation in context <class '_ast.Load'>
Get is_evaluation in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Attribute sample_trajectory of self in context <class '_ast.Load'>
Resolve self.sample_trajectory in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node class:train_policy.Agent>
Resolved to attr sample_trajectory of <Node class:train_policy.Agent>
getattr sample_trajectory on self returns <Node method:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to <Node method:train_policy.Agent.sample_trajectory>
Name steps in context <class '_ast.Store'>
Set steps in <Scope: function sample_trajectories> to <Node method:train_policy.Agent.sample_trajectory>
Name s in context <class '_ast.Store'>
Set s in <Scope: function sample_trajectories> to <Node method:train_policy.Agent.sample_trajectory>
AugAssign ['stats'] <class '_ast.Add'> ['s']
Name s in context <class '_ast.Load'>
Get s in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node method:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node method:train_policy.Agent.sample_trajectory>
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function sample_trajectories> to <Node method:train_policy.Agent.sample_trajectory>
AugAssign ['timesteps_this_batch'] <class '_ast.Add'> ['steps']
Name steps in context <class '_ast.Load'>
Get steps in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node method:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node method:train_policy.Agent.sample_trajectory>
Name timesteps_this_batch in context <class '_ast.Store'>
Set timesteps_this_batch in <Scope: function sample_trajectories> to <Node method:train_policy.Agent.sample_trajectory>
Name timesteps_this_batch in context <class '_ast.Load'>
Get timesteps_this_batch in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node method:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node method:train_policy.Agent.sample_trajectory>
Name min_timesteps in context <class '_ast.Load'>
Get min_timesteps in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node method:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node method:train_policy.Agent.sample_trajectory>
Name timesteps_this_batch in context <class '_ast.Load'>
Get timesteps_this_batch in <Scope: function sample_trajectories>, found in <Scope: function sample_trajectories>, value <Node method:train_policy.Agent.sample_trajectory>
Use from <Node method:train_policy.Agent.sample_trajectories> to Name <Node method:train_policy.Agent.sample_trajectory>
FunctionDef sample_trajectory
Set sample_trajectory in <Scope: class Agent> to <Node method:train_policy.Agent.sample_trajectory>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Call env.reset_task
Name is_evaluation in context <class '_ast.Load'>
Get is_evaluation in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Attribute reset_task of env in context <class '_ast.Load'>
Resolve env.reset_task in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr reset_task of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset_task> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr reset_task not resolved; maybe fwd ref or unanalyzed import)
Assign ['stats'] []
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function sample_trajectory>: value None is not a Node
Assign ['ep_steps'] [<_ast.Num object at 0x107ceef98>]
Name ep_steps in context <class '_ast.Store'>
Set ep_steps in <Scope: function sample_trajectory>: value None is not a Node
Assign ['steps'] [<_ast.Num object at 0x107cdc080>]
Name steps in context <class '_ast.Store'>
Set steps in <Scope: function sample_trajectory>: value None is not a Node
Assign ['num_samples'] [<_ast.Call object at 0x107cdc128>]
Call max
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute max_path_length of self in context <class '_ast.Load'>
Resolve self.max_path_length in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr max_path_length of <Node class:train_policy.Agent>
getattr max_path_length on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name max in context <class '_ast.Load'>
Get max in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.max>
Name num_samples in context <class '_ast.Store'>
Set num_samples in <Scope: function sample_trajectory> to <Node ???:*.max>
Assign ['meta_obs'] [<_ast.Call object at 0x107cdc358>]
Call np.zeros
Name num_samples in context <class '_ast.Load'>
Get num_samples in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.max>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.max>
Attribute history of self in context <class '_ast.Load'>
Resolve self.history in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr history of <Node class:train_policy.Agent>
getattr history on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute meta_ob_dim of self in context <class '_ast.Load'>
Resolve self.meta_ob_dim in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr meta_ob_dim of <Node class:train_policy.Agent>
getattr meta_ob_dim on self returns <Node ???:*.terminal_dim>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ???:*.terminal_dim>
New edge added for Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ???:*.terminal_dim>
Attribute zeros of np in context <class '_ast.Load'>
Resolve np.zeros in context <class '_ast.Load'>
Get np in <Scope: function sample_trajectory>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr zeros of <Node module:numpy>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.zeros> (target obj <Node module:numpy> known but target attr zeros not resolved; maybe fwd ref or unanalyzed import)
Name meta_obs in context <class '_ast.Store'>
Set meta_obs in <Scope: function sample_trajectory> to <Node attribute:numpy.zeros>
Assign ['rewards'] []
Name rewards in context <class '_ast.Store'>
Set rewards in <Scope: function sample_trajectory>: value None is not a Node
Name animate_this_episode in context <class '_ast.Load'>
Get animate_this_episode in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Call env.render
Attribute render of env in context <class '_ast.Load'>
Resolve env.render in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr render of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.render> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr render not resolved; maybe fwd ref or unanalyzed import)
Call time.sleep
Attribute sleep of time in context <class '_ast.Load'>
Resolve time.sleep in context <class '_ast.Load'>
Get time in <Scope: function sample_trajectory>, found in <Scope: module >, value <Node module:time>
Resolved to attr sleep of <Node module:time>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:time.sleep> (target obj <Node module:time> known but target attr sleep not resolved; maybe fwd ref or unanalyzed import)
Name ep_steps in context <class '_ast.Load'>
Get ep_steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
Assign ['ob'] [<_ast.Call object at 0x107cdcac8>]
Call env.reset
Attribute reset of env in context <class '_ast.Load'>
Resolve env.reset in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr reset of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr reset not resolved; maybe fwd ref or unanalyzed import)
Name ob in context <class '_ast.Store'>
Set ob in <Scope: function sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset>
AugAssign ['steps'] <class '_ast.Add'> [<_ast.Num object at 0x107cdcbe0>]
Name steps in context <class '_ast.Store'>
Set steps in <Scope: function sample_trajectory>: value None is not a Node
Assign ['hidden'] [<_ast.Call object at 0x107cdcc88>]
Call np.zeros
Attribute gru_size of self in context <class '_ast.Load'>
Resolve self.gru_size in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr gru_size of <Node class:train_policy.Agent>
getattr gru_size on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute float32 of np in context <class '_ast.Load'>
Resolve np.float32 in context <class '_ast.Load'>
Get np in <Scope: function sample_trajectory>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr float32 of <Node module:numpy>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute zeros of np in context <class '_ast.Load'>
Resolve np.zeros in context <class '_ast.Load'>
Get np in <Scope: function sample_trajectory>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr zeros of <Node module:numpy>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.zeros> (target obj <Node module:numpy> known but target attr zeros not resolved; maybe fwd ref or unanalyzed import)
Name hidden in context <class '_ast.Store'>
Set hidden in <Scope: function sample_trajectory> to <Node attribute:numpy.zeros>
AugAssign ['ep_steps'] <class '_ast.Add'> [<_ast.Num object at 0x107cdcf28>]
Name ep_steps in context <class '_ast.Store'>
Set ep_steps in <Scope: function sample_trajectory>: value None is not a Node
Assign ['done'] [<_ast.BoolOp object at 0x107cdcfd0>]
Call bool
Name done in context <class '_ast.Load'>
Get done in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name bool in context <class '_ast.Load'>
Get bool in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.bool>
Name ep_steps in context <class '_ast.Load'>
Get ep_steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
Attribute max_path_length of self in context <class '_ast.Load'>
Resolve self.max_path_length in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr max_path_length of <Node class:train_policy.Agent>
getattr max_path_length on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name done in context <class '_ast.Store'>
Set done in <Scope: function sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Call rewards.append
Name rew in context <class '_ast.Load'>
Get rew in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rew>
Attribute append of rewards in context <class '_ast.Load'>
Resolve rewards.append in context <class '_ast.Load'>
Get rewards in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ???:*.append> (target obj rewards not resolved; maybe fwd ref, function argument, or unanalyzed import)
AugAssign ['steps'] <class '_ast.Add'> [<_ast.Num object at 0x107ce0358>]
Name steps in context <class '_ast.Store'>
Set steps in <Scope: function sample_trajectory>: value None is not a Node
Name is_evaluation in context <class '_ast.Load'>
Get is_evaluation in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Call self.val_replay_buffer.add_sample
Name in_ in context <class '_ast.Load'>
Get in_ in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.in_>
Name ac in context <class '_ast.Load'>
Get ac in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ac>
Name rew in context <class '_ast.Load'>
Get rew in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rew>
Name done in context <class '_ast.Load'>
Get done in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node attribute:numpy.zeros>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node attribute:numpy.zeros>
Attribute _goal of env in context <class '_ast.Load'>
Resolve env._goal in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr _goal of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^._goal> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr _goal not resolved; maybe fwd ref or unanalyzed import)
Attribute add_sample of self.val_replay_buffer in context <class '_ast.Load'>
Resolve self.val_replay_buffer.add_sample in context <class '_ast.Load'>
Resolve self.val_replay_buffer in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr val_replay_buffer of <Node class:train_policy.Agent>
Resolved to attr add_sample of <Node import:replay_buffer.ReplayBuffer>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:replay_buffer.ReplayBuffer.add_sample> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr add_sample not resolved; maybe fwd ref or unanalyzed import)
Call self.replay_buffer.add_sample
Name in_ in context <class '_ast.Load'>
Get in_ in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.in_>
Name ac in context <class '_ast.Load'>
Get ac in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ac>
Name rew in context <class '_ast.Load'>
Get rew in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rew>
Name done in context <class '_ast.Load'>
Get done in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node attribute:numpy.zeros>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node attribute:numpy.zeros>
Attribute _goal of env in context <class '_ast.Load'>
Resolve env._goal in context <class '_ast.Load'>
Get env in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Resolved to attr _goal of <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^._goal> (target obj <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> known but target attr _goal not resolved; maybe fwd ref or unanalyzed import)
Attribute add_sample of self.replay_buffer in context <class '_ast.Load'>
Resolve self.replay_buffer.add_sample in context <class '_ast.Load'>
Resolve self.replay_buffer in context <class '_ast.Load'>
Get self in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node class:train_policy.Agent>
Resolved to attr replay_buffer of <Node class:train_policy.Agent>
Resolved to attr add_sample of <Node import:replay_buffer.ReplayBuffer>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:replay_buffer.ReplayBuffer.add_sample> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr add_sample not resolved; maybe fwd ref or unanalyzed import)
Name done in context <class '_ast.Load'>
Get done in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Assign ['s'] [<_ast.Call object at 0x107ce0a20>]
Call dict
Name dict in context <class '_ast.Load'>
Get dict in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
Name s in context <class '_ast.Store'>
Set s in <Scope: function sample_trajectory> to <Node ???:*.dict>
Assign [<_ast.Subscript object at 0x107ce0ac8>] [<_ast.Subscript object at 0x107ce0ba8>]
Name rewards in context <class '_ast.Load'>
Get rewards in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.rewards>
Name ep_steps in context <class '_ast.Load'>
Get ep_steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
Name s in context <class '_ast.Load'>
Get s in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.dict>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
Assign [<_ast.Subscript object at 0x107ce0cf8>] ['ep_steps']
Name ep_steps in context <class '_ast.Load'>
Get ep_steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.ep_steps>
Name s in context <class '_ast.Load'>
Get s in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.dict>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
Call stats.append
Name s in context <class '_ast.Load'>
Get s in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.dict>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.dict>
Attribute append of stats in context <class '_ast.Load'>
Resolve stats.append in context <class '_ast.Load'>
Get stats in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node ???:*.append> (target obj stats not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['ep_steps'] [<_ast.Num object at 0x107ce0f98>]
Name ep_steps in context <class '_ast.Store'>
Set ep_steps in <Scope: function sample_trajectory>: value None is not a Node
Name steps in context <class '_ast.Load'>
Get steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.steps>
Name num_samples in context <class '_ast.Load'>
Get num_samples in <Scope: function sample_trajectory>, found in <Scope: function sample_trajectory>, value <Node ???:*.max>
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.max>
Name steps in context <class '_ast.Load'>
Get steps in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.steps>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function sample_trajectory>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.sample_trajectory> to Name <Node ???:*.stats>
FunctionDef compute_advantage
Set compute_advantage in <Scope: class Agent> to <Node method:train_policy.Agent.compute_advantage>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['bsize'] [<_ast.Call object at 0x107ce44e0>]
Call len
Name re_n in context <class '_ast.Load'>
Get re_n in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Name bsize in context <class '_ast.Store'>
Set bsize in <Scope: function compute_advantage> to <Node ???:*.len>
Assign ['rewards'] [<_ast.Call object at 0x107ce45f8>]
Call np.squeeze
Name re_n in context <class '_ast.Load'>
Get re_n in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Attribute squeeze of np in context <class '_ast.Load'>
Resolve np.squeeze in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr squeeze of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze> (target obj <Node module:numpy> known but target attr squeeze not resolved; maybe fwd ref or unanalyzed import)
Name rewards in context <class '_ast.Store'>
Set rewards in <Scope: function compute_advantage> to <Node attribute:numpy.squeeze>
Assign ['masks'] [<_ast.Call object at 0x107ce4748>]
Call np.squeeze
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Attribute squeeze of np in context <class '_ast.Load'>
Resolve np.squeeze in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr squeeze of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze> (target obj <Node module:numpy> known but target attr squeeze not resolved; maybe fwd ref or unanalyzed import)
Name masks in context <class '_ast.Store'>
Set masks in <Scope: function compute_advantage> to <Node attribute:numpy.squeeze>
Assign ['values'] [<_ast.Subscript object at 0x107ce4898>]
Call self.sess.run
Attribute critic_prediction of self in context <class '_ast.Load'>
Resolve self.critic_prediction in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr critic_prediction of <Node class:train_policy.Agent>
getattr critic_prediction on self returns <Node attribute:tensorflow.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.squeeze>
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node method:train_policy.Agent.define_placeholders>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Attribute run of self.sess in context <class '_ast.Load'>
Resolve self.sess.run in context <class '_ast.Load'>
Resolve self.sess in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name values in context <class '_ast.Store'>
Set values in <Scope: function compute_advantage> to <Node attribute:tensorflow.Session.run>
Assign ['gamma'] ['self.gamma']
Attribute gamma of self in context <class '_ast.Load'>
Resolve self.gamma in context <class '_ast.Load'>
Get self in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node class:train_policy.Agent>
Resolved to attr gamma of <Node class:train_policy.Agent>
getattr gamma on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name gamma in context <class '_ast.Store'>
Set gamma in <Scope: function compute_advantage> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Attribute shape of rewards in context <class '_ast.Load'>
Resolve rewards.shape in context <class '_ast.Load'>
Get rewards in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Resolved to attr shape of <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze.shape> (target obj <Node attribute:numpy.squeeze> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Attribute shape of masks in context <class '_ast.Load'>
Resolve masks.shape in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Resolved to attr shape of <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze.shape> (target obj <Node attribute:numpy.squeeze> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Attribute shape of values in context <class '_ast.Load'>
Resolve values.shape in context <class '_ast.Load'>
Get values in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:tensorflow.Session.run>
Resolved to attr shape of <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.Session.run.shape> (target obj <Node attribute:tensorflow.Session.run> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Assign ['bsize'] [<_ast.Call object at 0x107cea198>]
Call len
Name rewards in context <class '_ast.Load'>
Get rewards in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name len in context <class '_ast.Load'>
Get len in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Name bsize in context <class '_ast.Store'>
Set bsize in <Scope: function compute_advantage> to <Node ???:*.len>
Assign ['returns'] [<_ast.Call object at 0x107cea2b0>]
Call np.empty
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Name returns in context <class '_ast.Store'>
Set returns in <Scope: function compute_advantage> to <Node attribute:numpy.empty>
Assign ['deltas'] [<_ast.Call object at 0x107cea438>]
Call np.empty
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Name deltas in context <class '_ast.Store'>
Set deltas in <Scope: function compute_advantage> to <Node attribute:numpy.empty>
Assign ['advantages'] [<_ast.Call object at 0x107cea5c0>]
Call np.empty
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Name advantages in context <class '_ast.Store'>
Set advantages in <Scope: function compute_advantage> to <Node attribute:numpy.empty>
Assign ['prev_return'] [<_ast.Num object at 0x107cea748>]
Name prev_return in context <class '_ast.Store'>
Set prev_return in <Scope: function compute_advantage>: value None is not a Node
Assign ['prev_value'] [<_ast.Num object at 0x107cea7f0>]
Name prev_value in context <class '_ast.Store'>
Set prev_value in <Scope: function compute_advantage>: value None is not a Node
Assign ['prev_advantage'] [<_ast.Num object at 0x107cea898>]
Name prev_advantage in context <class '_ast.Store'>
Set prev_advantage in <Scope: function compute_advantage>: value None is not a Node
For-loop
Call reversed
Call range
Name bsize in context <class '_ast.Load'>
Get bsize in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.len>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.len>
Name range in context <class '_ast.Load'>
Get range in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.range>
Name reversed in context <class '_ast.Load'>
Get reversed in <Scope: function compute_advantage>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name i in context <class '_ast.Store'>
Set i in <Scope: function compute_advantage> to <Node ???:*.reversed>
Assign [<_ast.Subscript object at 0x107ceaa90>] [<_ast.BinOp object at 0x107ceab70>]
Name rewards in context <class '_ast.Load'>
Get rewards in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name prev_return in context <class '_ast.Load'>
Get prev_return in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Assign [<_ast.Subscript object at 0x107ceae80>] [<_ast.BinOp object at 0x107ceaf60>]
Name rewards in context <class '_ast.Load'>
Get rewards in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name prev_value in context <class '_ast.Load'>
Get prev_value in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name values in context <class '_ast.Load'>
Get values in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:tensorflow.Session.run>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name deltas in context <class '_ast.Load'>
Get deltas in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Assign [<_ast.Subscript object at 0x107ced3c8>] [<_ast.BinOp object at 0x107ced4a8>]
Name deltas in context <class '_ast.Load'>
Get deltas in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name tau in context <class '_ast.Load'>
Get tau in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^>
Name prev_advantage in context <class '_ast.Load'>
Get prev_advantage in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.squeeze>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.squeeze>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Assign ['prev_return'] [<_ast.Subscript object at 0x107ced860>]
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name prev_return in context <class '_ast.Store'>
Set prev_return in <Scope: function compute_advantage> to <Node ???:*.reversed>
Assign ['prev_value'] [<_ast.Subscript object at 0x107ced9b0>]
Name values in context <class '_ast.Load'>
Get values in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:tensorflow.Session.run>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name prev_value in context <class '_ast.Store'>
Set prev_value in <Scope: function compute_advantage> to <Node ???:*.reversed>
Assign ['prev_advantage'] [<_ast.Subscript object at 0x107cedb00>]
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Name i in context <class '_ast.Load'>
Get i in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node ???:*.reversed>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node ???:*.reversed>
Name prev_advantage in context <class '_ast.Store'>
Set prev_advantage in <Scope: function compute_advantage> to <Node ???:*.reversed>
Assign ['advantages'] [<_ast.BinOp object at 0x107cedc50>]
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Call np.mean
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Call np.std
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
Attribute std of np in context <class '_ast.Load'>
Resolve np.std in context <class '_ast.Load'>
Get np in <Scope: function compute_advantage>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr std of <Node module:numpy>
Use from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
Name advantages in context <class '_ast.Store'>
Set advantages in <Scope: function compute_advantage> to <Node attribute:numpy.std>
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.std>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.std>
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function compute_advantage>, found in <Scope: function compute_advantage>, value <Node attribute:numpy.empty>
Use from <Node method:train_policy.Agent.compute_advantage> to Name <Node attribute:numpy.empty>
FunctionDef estimate_return
Set estimate_return in <Scope: class Agent> to <Node method:train_policy.Agent.estimate_return>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['adv_n', 'q_n'] [<_ast.Call object at 0x107cf5390>]
Call self.compute_advantage
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Name re_n in context <class '_ast.Load'>
Get re_n in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node ---:train_policy.Agent.estimate_return.^^^argument^^^>
Attribute compute_advantage of self in context <class '_ast.Load'>
Resolve self.compute_advantage in context <class '_ast.Load'>
Get self in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node class:train_policy.Agent>
Resolved to attr compute_advantage of <Node class:train_policy.Agent>
getattr compute_advantage on self returns <Node method:train_policy.Agent.compute_advantage>
Use from <Node method:train_policy.Agent.estimate_return> to <Node method:train_policy.Agent.compute_advantage>
Name adv_n in context <class '_ast.Store'>
Set adv_n in <Scope: function estimate_return> to <Node method:train_policy.Agent.compute_advantage>
Name q_n in context <class '_ast.Store'>
Set q_n in <Scope: function estimate_return> to <Node method:train_policy.Agent.compute_advantage>
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node method:train_policy.Agent.compute_advantage>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node method:train_policy.Agent.compute_advantage>
Name adv_n in context <class '_ast.Load'>
Get adv_n in <Scope: function estimate_return>, found in <Scope: function estimate_return>, value <Node method:train_policy.Agent.compute_advantage>
Use from <Node method:train_policy.Agent.estimate_return> to Name <Node method:train_policy.Agent.compute_advantage>
FunctionDef update_parameters
Set update_parameters in <Scope: class Agent> to <Node method:train_policy.Agent.update_parameters>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Call self.update_critic
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Attribute update_critic of self in context <class '_ast.Load'>
Resolve self.update_critic in context <class '_ast.Load'>
Get self in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node class:train_policy.Agent>
Resolved to attr update_critic of <Node class:train_policy.Agent>
getattr update_critic on self returns <Node method:train_policy.Agent.update_critic>
Use from <Node method:train_policy.Agent.update_parameters> to <Node method:train_policy.Agent.update_critic>
Call self.update_policy
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Name adv_n in context <class '_ast.Load'>
Get adv_n in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_parameters> to Name <Node ---:train_policy.Agent.update_parameters.^^^argument^^^>
Attribute update_policy of self in context <class '_ast.Load'>
Resolve self.update_policy in context <class '_ast.Load'>
Get self in <Scope: function update_parameters>, found in <Scope: function update_parameters>, value <Node class:train_policy.Agent>
Resolved to attr update_policy of <Node class:train_policy.Agent>
getattr update_policy on self returns <Node method:train_policy.Agent.update_policy>
Use from <Node method:train_policy.Agent.update_parameters> to <Node method:train_policy.Agent.update_policy>
FunctionDef update_critic
Set update_critic in <Scope: class Agent> to <Node method:train_policy.Agent.update_critic>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['target_n'] [<_ast.BinOp object at 0x107cf5e48>]
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Call np.mean
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function update_critic>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Call np.std
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Attribute std of np in context <class '_ast.Load'>
Resolve np.std in context <class '_ast.Load'>
Get np in <Scope: function update_critic>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr std of <Node module:numpy>
Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
Name target_n in context <class '_ast.Store'>
Set target_n in <Scope: function update_critic> to <Node attribute:numpy.std>
For-loop
Call range
Attribute num_value_iters of self in context <class '_ast.Load'>
Resolve self.num_value_iters in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr num_value_iters of <Node class:train_policy.Agent>
getattr num_value_iters on self returns <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to <Node ---:train_policy.Agent.__init__.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function update_critic>: no Node value (or name not in scope)
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ???:*.range>
Name k in context <class '_ast.Store'>
Set k in <Scope: function update_critic> to <Node ???:*.range>
Assign ['critic_loss', '_'] [<_ast.Call object at 0x107cf7390>]
Call self.sess.run
Attribute critic_loss of self in context <class '_ast.Load'>
Resolve self.critic_loss in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr critic_loss of <Node class:train_policy.Agent>
getattr critic_loss on self returns <Node ???:*.mean_squared_error>
Use from <Node method:train_policy.Agent.update_critic> to <Node ???:*.mean_squared_error>
Attribute critic_update_op of self in context <class '_ast.Load'>
Resolve self.critic_update_op in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr critic_update_op of <Node class:train_policy.Agent>
getattr critic_update_op on self returns <Node ???:*.minimize>
Use from <Node method:train_policy.Agent.update_critic> to <Node ???:*.minimize>
Attribute sy_target_n of self in context <class '_ast.Load'>
Resolve self.sy_target_n in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr sy_target_n of <Node class:train_policy.Agent>
getattr sy_target_n on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:tensorflow.placeholder>
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_critic> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_critic> to <Node method:train_policy.Agent.define_placeholders>
Name target_n in context <class '_ast.Load'>
Get target_n in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node attribute:numpy.std>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node attribute:numpy.std>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node ---:train_policy.Agent.update_critic.^^^argument^^^>
Attribute run of self.sess in context <class '_ast.Load'>
Resolve self.sess.run in context <class '_ast.Load'>
Resolve self.sess in context <class '_ast.Load'>
Get self in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node method:train_policy.Agent.update_critic> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name critic_loss in context <class '_ast.Store'>
Set critic_loss in <Scope: function update_critic> to <Node attribute:tensorflow.Session.run>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function update_critic> to <Node attribute:tensorflow.Session.run>
Name critic_loss in context <class '_ast.Load'>
Get critic_loss in <Scope: function update_critic>, found in <Scope: function update_critic>, value <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.update_critic> to Name <Node attribute:tensorflow.Session.run>
FunctionDef update_policy
Set update_policy in <Scope: class Agent> to <Node method:train_policy.Agent.update_policy>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['policy_surr_loss', '_'] [<_ast.Call object at 0x107cf7b70>]
Call self.sess.run
Attribute policy_surr_loss of self in context <class '_ast.Load'>
Resolve self.policy_surr_loss in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr policy_surr_loss of <Node class:train_policy.Agent>
getattr policy_surr_loss on self returns <Node method:train_policy.Agent.ppo_loss>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.ppo_loss>
Attribute policy_update_op of self in context <class '_ast.Load'>
Resolve self.policy_update_op in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr policy_update_op of <Node class:train_policy.Agent>
getattr policy_update_op on self returns <Node function:train_policy.minimize_and_clip>
Use from <Node method:train_policy.Agent.update_policy> to <Node function:train_policy.minimize_and_clip>
Attribute sy_ob_no of self in context <class '_ast.Load'>
Resolve self.sy_ob_no in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of self in context <class '_ast.Load'>
Resolve self.sy_hidden in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ac_na of self in context <class '_ast.Load'>
Resolve self.sy_ac_na in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
getattr sy_ac_na on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_fixed_lp_n of self in context <class '_ast.Load'>
Resolve self.sy_fixed_lp_n in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_fixed_lp_n of <Node class:train_policy.Agent>
getattr sy_fixed_lp_n on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_adv_n of self in context <class '_ast.Load'>
Resolve self.sy_adv_n in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sy_adv_n of <Node class:train_policy.Agent>
getattr sy_adv_n on self returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node method:train_policy.Agent.update_policy> to <Node method:train_policy.Agent.define_placeholders>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node ---:train_policy.Agent.update_policy.^^^argument^^^>
Attribute run of self.sess in context <class '_ast.Load'>
Resolve self.sess.run in context <class '_ast.Load'>
Resolve self.sess in context <class '_ast.Load'>
Get self in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node method:train_policy.Agent.update_policy> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name policy_surr_loss in context <class '_ast.Store'>
Set policy_surr_loss in <Scope: function update_policy> to <Node attribute:tensorflow.Session.run>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function update_policy> to <Node attribute:tensorflow.Session.run>
Name policy_surr_loss in context <class '_ast.Load'>
Get policy_surr_loss in <Scope: function update_policy>, found in <Scope: function update_policy>, value <Node attribute:tensorflow.Session.run>
Use from <Node method:train_policy.Agent.update_policy> to Name <Node attribute:tensorflow.Session.run>
FunctionDef ppo_loss
Set ppo_loss in <Scope: class Agent> to <Node method:train_policy.Agent.ppo_loss>
Method def: setting self name "self" to <Node class:train_policy.Agent>
Assign ['ratio'] [<_ast.Call object at 0x107cfd4e0>]
Call tf.exp
Name log_probs in context <class '_ast.Load'>
Get log_probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Attribute exp of tf in context <class '_ast.Load'>
Resolve tf.exp in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr exp of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.exp> (target obj <Node module:tensorflow> known but target attr exp not resolved; maybe fwd ref or unanalyzed import)
Name ratio in context <class '_ast.Store'>
Set ratio in <Scope: function ppo_loss> to <Node attribute:tensorflow.exp>
Assign ['surr1'] [<_ast.BinOp object at 0x107cfd6a0>]
Name ratio in context <class '_ast.Load'>
Get ratio in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.exp>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.exp>
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name surr1 in context <class '_ast.Store'>
Set surr1 in <Scope: function ppo_loss> to <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Assign ['surr2'] [<_ast.BinOp object at 0x107cfd7b8>]
Call tf.clip_by_value
Name ratio in context <class '_ast.Load'>
Get ratio in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.exp>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.exp>
Name clip_epsilon in context <class '_ast.Load'>
Get clip_epsilon in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name clip_epsilon in context <class '_ast.Load'>
Get clip_epsilon in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Attribute clip_by_value of tf in context <class '_ast.Load'>
Resolve tf.clip_by_value in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr clip_by_value of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.clip_by_value> (target obj <Node module:tensorflow> known but target attr clip_by_value not resolved; maybe fwd ref or unanalyzed import)
Name advantages in context <class '_ast.Load'>
Get advantages in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name surr2 in context <class '_ast.Store'>
Set surr2 in <Scope: function ppo_loss> to <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Assign ['policy_surr_loss'] [<_ast.UnaryOp object at 0x107cfdb38>]
Call tf.reduce_mean
Call tf.minimum
Name surr1 in context <class '_ast.Load'>
Get surr1 in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name surr2 in context <class '_ast.Load'>
Get surr2 in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Attribute minimum of tf in context <class '_ast.Load'>
Resolve tf.minimum in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr minimum of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.minimum> (target obj <Node module:tensorflow> known but target attr minimum not resolved; maybe fwd ref or unanalyzed import)
Attribute reduce_mean of tf in context <class '_ast.Load'>
Resolve tf.reduce_mean in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reduce_mean of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.reduce_mean> (target obj <Node module:tensorflow> known but target attr reduce_mean not resolved; maybe fwd ref or unanalyzed import)
Name policy_surr_loss in context <class '_ast.Store'>
Set policy_surr_loss in <Scope: function ppo_loss> to <Node attribute:tensorflow.reduce_mean>
Assign ['probs'] [<_ast.Call object at 0x107cfdda0>]
Call tf.exp
Name log_probs in context <class '_ast.Load'>
Get log_probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Attribute exp of tf in context <class '_ast.Load'>
Resolve tf.exp in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr exp of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.exp> (target obj <Node module:tensorflow> known but target attr exp not resolved; maybe fwd ref or unanalyzed import)
Name probs in context <class '_ast.Store'>
Set probs in <Scope: function ppo_loss> to <Node attribute:tensorflow.exp>
Assign ['entropy'] [<_ast.Call object at 0x107cfdef0>]
Call tf.reduce_sum
Name log_probs in context <class '_ast.Load'>
Get log_probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name probs in context <class '_ast.Load'>
Get probs in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.exp>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.exp>
Attribute reduce_sum of tf in context <class '_ast.Load'>
Resolve tf.reduce_sum in context <class '_ast.Load'>
Get tf in <Scope: function ppo_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reduce_sum of <Node module:tensorflow>
Use from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.reduce_sum> (target obj <Node module:tensorflow> known but target attr reduce_sum not resolved; maybe fwd ref or unanalyzed import)
Name entropy in context <class '_ast.Store'>
Set entropy in <Scope: function ppo_loss> to <Node attribute:tensorflow.reduce_sum>
AugAssign ['policy_surr_loss'] <class '_ast.Sub'> [<_ast.BinOp object at 0x107d01128>]
Name entropy_coeff in context <class '_ast.Load'>
Get entropy_coeff in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^>
Name entropy in context <class '_ast.Load'>
Get entropy in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.reduce_sum>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.reduce_sum>
Name policy_surr_loss in context <class '_ast.Store'>
Set policy_surr_loss in <Scope: function ppo_loss> to <Node attribute:tensorflow.reduce_sum>
Name policy_surr_loss in context <class '_ast.Load'>
Get policy_surr_loss in <Scope: function ppo_loss>, found in <Scope: function ppo_loss>, value <Node attribute:tensorflow.reduce_sum>
Use from <Node method:train_policy.Agent.ppo_loss> to Name <Node attribute:tensorflow.reduce_sum>
FunctionDef train_PG
Set train_PG in <Scope: module > to <Node function:train_policy.train_PG>
Assign ['start'] [<_ast.Call object at 0x107d017f0>]
Call time.time
Attribute time of time in context <class '_ast.Load'>
Resolve time.time in context <class '_ast.Load'>
Get time in <Scope: function train_PG>, found in <Scope: module >, value <Node module:time>
Resolved to attr time of <Node module:time>
Use from <Node function:train_policy.train_PG> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
Name start in context <class '_ast.Store'>
Set start in <Scope: function train_PG> to <Node attribute:time.time>
Call setup_logger
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Call locals
Name locals in context <class '_ast.Load'>
Get locals in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.locals>
Name setup_logger in context <class '_ast.Load'>
Get setup_logger in <Scope: function train_PG>, found in <Scope: module >, value <Node function:train_policy.setup_logger>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.setup_logger>
Assign ['envs'] [<_ast.Dict object at 0x107d01a58>]
Name PointEnv in context <class '_ast.Load'>
Get PointEnv in <Scope: function train_PG>, found in <Scope: module >, value <Node import:point_mass.PointEnv>
Use from <Node function:train_policy.train_PG> to Name <Node import:point_mass.PointEnv>
Name ObservedPointEnv in context <class '_ast.Load'>
Get ObservedPointEnv in <Scope: function train_PG>, found in <Scope: module >, value <Node import:point_mass_observed.ObservedPointEnv>
Use from <Node function:train_policy.train_PG> to Name <Node import:point_mass_observed.ObservedPointEnv>
Name envs in context <class '_ast.Store'>
Set envs in <Scope: function train_PG> to <Node import:point_mass_observed.ObservedPointEnv>
Assign ['env'] [<_ast.Call object at 0x107d01be0>]
Call <_ast.Subscript object at 0x107d01c18>
Name num_tasks in context <class '_ast.Load'>
Get num_tasks in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name envs in context <class '_ast.Load'>
Get envs in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node import:point_mass_observed.ObservedPointEnv>
Use from <Node function:train_policy.train_PG> to Name <Node import:point_mass_observed.ObservedPointEnv>
Name env_name in context <class '_ast.Load'>
Get env_name in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name env in context <class '_ast.Store'>
Set env in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Call tf.set_random_seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute set_random_seed of tf in context <class '_ast.Load'>
Resolve tf.set_random_seed in context <class '_ast.Load'>
Get tf in <Scope: function train_PG>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr set_random_seed of <Node module:tensorflow>
Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.set_random_seed> (target obj <Node module:tensorflow> known but target attr set_random_seed not resolved; maybe fwd ref or unanalyzed import)
Call np.random.seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute seed of np.random in context <class '_ast.Load'>
Resolve np.random.seed in context <class '_ast.Load'>
Resolve np.random in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr random of <Node module:numpy>
Unresolved, returning attr seed of unknown
Use from <Node function:train_policy.train_PG> to <Node ???:*.seed> (target obj np.random not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:train_policy.train_PG> to <Node ???:*.seed> (target obj np.random not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call random.seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute seed of random in context <class '_ast.Load'>
Resolve random.seed in context <class '_ast.Load'>
Get random in <Scope: function train_PG>, found in <Scope: module >, value <Node module:random>
Resolved to attr seed of <Node module:random>
Use from <Node function:train_policy.train_PG> to <Node attribute:random.seed> (target obj <Node module:random> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:train_policy.train_PG> to <Node module:random> resolves <Node ???:*.seed>; removing wildcard
Call env.seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute seed of env in context <class '_ast.Load'>
Resolve env.seed in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Resolved to attr seed of <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to <Node attribute:train_policy.train_PG.^^^argument^^^.seed> (target obj <Node ---:train_policy.train_PG.^^^argument^^^> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Assign ['max_path_length'] ['max_path_length']
Name max_path_length in context <class '_ast.Load'>
Get max_path_length in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name max_path_length in context <class '_ast.Store'>
Set max_path_length in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Assign ['ob_dim'] [<_ast.Subscript object at 0x107d04320>]
Attribute shape of env.observation_space in context <class '_ast.Load'>
Resolve env.observation_space.shape in context <class '_ast.Load'>
Resolve env.observation_space in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Resolved to attr observation_space of <Node ---:train_policy.train_PG.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node function:train_policy.train_PG> to <Node ???:*.shape> (target obj env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ob_dim in context <class '_ast.Store'>
Set ob_dim in <Scope: function train_PG> to <Node ???:*.shape>
Assign ['ac_dim'] [<_ast.Subscript object at 0x107d044e0>]
Attribute shape of env.action_space in context <class '_ast.Load'>
Resolve env.action_space.shape in context <class '_ast.Load'>
Resolve env.action_space in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Resolved to attr action_space of <Node ---:train_policy.train_PG.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node function:train_policy.train_PG> to <Node ???:*.shape> (target obj env.action_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name ac_dim in context <class '_ast.Store'>
Set ac_dim in <Scope: function train_PG> to <Node ???:*.shape>
Assign ['task_dim'] [<_ast.Call object at 0x107d046a0>]
Call len
Attribute _goal of env in context <class '_ast.Load'>
Resolve env._goal in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Resolved to attr _goal of <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to <Node attribute:train_policy.train_PG.^^^argument^^^._goal> (target obj <Node ---:train_policy.train_PG.^^^argument^^^> known but target attr _goal not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.len>
Name task_dim in context <class '_ast.Store'>
Set task_dim in <Scope: function train_PG> to <Node ???:*.len>
Assign ['computation_graph_args'] [<_ast.Dict object at 0x107d047f0>]
Name n_layers in context <class '_ast.Load'>
Get n_layers in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name ob_dim in context <class '_ast.Load'>
Get ob_dim in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.shape>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.shape>
Name ac_dim in context <class '_ast.Load'>
Get ac_dim in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.shape>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.shape>
Name task_dim in context <class '_ast.Load'>
Get task_dim in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.len>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.len>
Name size in context <class '_ast.Load'>
Get size in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name gru_size in context <class '_ast.Load'>
Get gru_size in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name learning_rate in context <class '_ast.Load'>
Get learning_rate in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name history in context <class '_ast.Load'>
Get history in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name num_value_iters in context <class '_ast.Load'>
Get num_value_iters in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name l2reg in context <class '_ast.Load'>
Get l2reg in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name recurrent in context <class '_ast.Load'>
Get recurrent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name computation_graph_args in context <class '_ast.Store'>
Set computation_graph_args in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Assign ['sample_trajectory_args'] [<_ast.Dict object at 0x107d04d68>]
Name animate in context <class '_ast.Load'>
Get animate in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name max_path_length in context <class '_ast.Load'>
Get max_path_length in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name min_timesteps_per_batch in context <class '_ast.Load'>
Get min_timesteps_per_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name sample_trajectory_args in context <class '_ast.Store'>
Set sample_trajectory_args in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Assign ['estimate_return_args'] [<_ast.Dict object at 0x107d04f60>]
Name gamma in context <class '_ast.Load'>
Get gamma in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name nn_critic in context <class '_ast.Load'>
Get nn_critic in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name normalize_advantages in context <class '_ast.Load'>
Get normalize_advantages in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name estimate_return_args in context <class '_ast.Store'>
Set estimate_return_args in <Scope: function train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^>
Assign ['agent'] [<_ast.Call object at 0x107d08198>]
Call Agent
Name computation_graph_args in context <class '_ast.Load'>
Get computation_graph_args in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name sample_trajectory_args in context <class '_ast.Load'>
Get sample_trajectory_args in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name estimate_return_args in context <class '_ast.Load'>
Get estimate_return_args in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name Agent in context <class '_ast.Load'>
Get Agent in <Scope: function train_PG>, found in <Scope: module >, value <Node class:train_policy.Agent>
Use from <Node function:train_policy.train_PG> to Name <Node class:train_policy.Agent>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.__init__> (call creates an instance)
Name agent in context <class '_ast.Store'>
Set agent in <Scope: function train_PG> to <Node class:train_policy.Agent>
Call agent.build_computation_graph
Attribute build_computation_graph of agent in context <class '_ast.Load'>
Resolve agent.build_computation_graph in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr build_computation_graph of <Node class:train_policy.Agent>
getattr build_computation_graph on agent returns <Node method:train_policy.Agent.build_computation_graph>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.build_computation_graph>
Call agent.init_tf_sess
Attribute init_tf_sess of agent in context <class '_ast.Load'>
Resolve agent.init_tf_sess in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr init_tf_sess of <Node class:train_policy.Agent>
getattr init_tf_sess on agent returns <Node method:train_policy.Agent.init_tf_sess>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.init_tf_sess>
FunctionDef unpack_sample
Set unpack_sample in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Assign ['ob'] [<_ast.Subscript object at 0x107d08630>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ob in context <class '_ast.Store'>
Set ob in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['ac'] [<_ast.Subscript object at 0x107d08780>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ac in context <class '_ast.Store'>
Set ac in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['re'] [<_ast.Subscript object at 0x107d088d0>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name re in context <class '_ast.Store'>
Set re in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['hi'] [<_ast.Subscript object at 0x107d08a20>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name hi in context <class '_ast.Store'>
Set hi in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['ma'] [<_ast.BinOp object at 0x107d08b70>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ma in context <class '_ast.Store'>
Set ma in <Scope: function unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ob in context <class '_ast.Load'>
Get ob in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ac in context <class '_ast.Load'>
Get ac in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name re in context <class '_ast.Load'>
Get re in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name hi in context <class '_ast.Load'>
Get hi in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Name ma in context <class '_ast.Load'>
Get ma in <Scope: function unpack_sample>, found in <Scope: function unpack_sample>, value <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Use from <Node function:train_policy.train_PG.unpack_sample> to Name <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^>
Assign ['ppo_buffer'] [<_ast.Call object at 0x107d08eb8>]
Call PPOReplayBuffer
Attribute replay_buffer of agent in context <class '_ast.Load'>
Resolve agent.replay_buffer in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr replay_buffer of <Node class:train_policy.Agent>
getattr replay_buffer on agent returns <Node import:replay_buffer.ReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node import:replay_buffer.ReplayBuffer>
Name PPOReplayBuffer in context <class '_ast.Load'>
Get PPOReplayBuffer in <Scope: function train_PG>, found in <Scope: module >, value <Node import:replay_buffer.PPOReplayBuffer>
Use from <Node function:train_policy.train_PG> to Name <Node import:replay_buffer.PPOReplayBuffer>
Name ppo_buffer in context <class '_ast.Store'>
Set ppo_buffer in <Scope: function train_PG> to <Node import:replay_buffer.PPOReplayBuffer>
Assign ['total_timesteps'] [<_ast.Num object at 0x107d0d048>]
Name total_timesteps in context <class '_ast.Store'>
Set total_timesteps in <Scope: function train_PG>: value None is not a Node
For-loop
Call range
Name n_iter in context <class '_ast.Load'>
Get n_iter in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name itr in context <class '_ast.Store'>
Set itr in <Scope: function train_PG> to <Node ???:*.range>
Call ppo_buffer.flush
Attribute flush of ppo_buffer in context <class '_ast.Load'>
Resolve ppo_buffer.flush in context <class '_ast.Load'>
Get ppo_buffer in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node import:replay_buffer.PPOReplayBuffer>
Resolved to attr flush of <Node import:replay_buffer.PPOReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.flush> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr flush not resolved; maybe fwd ref or unanalyzed import)
Call print
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name print in context <class '_ast.Load'>
Get print in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.print>
Assign ['stats'] []
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function train_PG>: value None is not a Node
For-loop
Call range
Name num_tasks in context <class '_ast.Load'>
Get num_tasks in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function train_PG> to <Node ???:*.range>
Assign ['s', 'timesteps_this_batch'] [<_ast.Call object at 0x107d0d668>]
Call agent.sample_trajectories
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name env in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name min_timesteps_per_batch in context <class '_ast.Load'>
Get min_timesteps_per_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute sample_trajectories of agent in context <class '_ast.Load'>
Resolve agent.sample_trajectories in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sample_trajectories of <Node class:train_policy.Agent>
getattr sample_trajectories on agent returns <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Name timesteps_this_batch in context <class '_ast.Store'>
Set timesteps_this_batch in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
AugAssign ['total_timesteps'] <class '_ast.Add'> ['timesteps_this_batch']
Name timesteps_this_batch in context <class '_ast.Load'>
Get timesteps_this_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Name total_timesteps in context <class '_ast.Store'>
Set total_timesteps in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
AugAssign ['stats'] <class '_ast.Add'> ['s']
Name s in context <class '_ast.Load'>
Get s in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Name stats in context <class '_ast.Store'>
Set stats in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Assign ['data'] [<_ast.Call object at 0x107d0d978>]
Call agent.replay_buffer.all_batch
Attribute all_batch of agent.replay_buffer in context <class '_ast.Load'>
Resolve agent.replay_buffer.all_batch in context <class '_ast.Load'>
Resolve agent.replay_buffer in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr replay_buffer of <Node class:train_policy.Agent>
Resolved to attr all_batch of <Node import:replay_buffer.ReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.all_batch> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr all_batch not resolved; maybe fwd ref or unanalyzed import)
Name data in context <class '_ast.Store'>
Set data in <Scope: function train_PG> to <Node attribute:replay_buffer.ReplayBuffer.all_batch>
Assign ['ob_no', 'ac_na', 're_n', 'hidden', 'masks'] [<_ast.Call object at 0x107d0dbe0>]
Call unpack_sample
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.ReplayBuffer.all_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.ReplayBuffer.all_batch>
Name unpack_sample in context <class '_ast.Load'>
Get unpack_sample in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ob_no in context <class '_ast.Store'>
Set ob_no in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Store'>
Set ac_na in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name re_n in context <class '_ast.Store'>
Set re_n in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Store'>
Set hidden in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name masks in context <class '_ast.Store'>
Set masks in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Assign ['fixed_log_probs'] [<_ast.Call object at 0x107d0dcf8>]
Call agent.sess.run
Attribute sy_lp_n of agent in context <class '_ast.Load'>
Resolve agent.sy_lp_n in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
getattr sy_lp_n on agent returns <Node method:train_policy.Agent.get_log_prob>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.get_log_prob>
Attribute sy_ob_no of agent in context <class '_ast.Load'>
Resolve agent.sy_ob_no in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of agent in context <class '_ast.Load'>
Resolve agent.sy_hidden in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ac_na of agent in context <class '_ast.Load'>
Resolve agent.sy_ac_na in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
getattr sy_ac_na on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Attribute run of agent.sess in context <class '_ast.Load'>
Resolve agent.sess.run in context <class '_ast.Load'>
Resolve agent.sess in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name fixed_log_probs in context <class '_ast.Store'>
Set fixed_log_probs in <Scope: function train_PG> to <Node attribute:tensorflow.Session.run>
Assign ['q_n', 'adv_n'] [<_ast.Call object at 0x107d101d0>]
Call agent.estimate_return
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name re_n in context <class '_ast.Load'>
Get re_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name masks in context <class '_ast.Load'>
Get masks in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Attribute estimate_return of agent in context <class '_ast.Load'>
Resolve agent.estimate_return in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr estimate_return of <Node class:train_policy.Agent>
getattr estimate_return on agent returns <Node method:train_policy.Agent.estimate_return>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.estimate_return>
Name q_n in context <class '_ast.Store'>
Set q_n in <Scope: function train_PG> to <Node method:train_policy.Agent.estimate_return>
Name adv_n in context <class '_ast.Store'>
Set adv_n in <Scope: function train_PG> to <Node method:train_policy.Agent.estimate_return>
Call ppo_buffer.add_samples
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:tensorflow.Session.run>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:tensorflow.Session.run>
Name adv_n in context <class '_ast.Load'>
Get adv_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.estimate_return>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.estimate_return>
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.estimate_return>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.estimate_return>
Attribute add_samples of ppo_buffer in context <class '_ast.Load'>
Resolve ppo_buffer.add_samples in context <class '_ast.Load'>
Get ppo_buffer in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node import:replay_buffer.PPOReplayBuffer>
Resolved to attr add_samples of <Node import:replay_buffer.PPOReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.add_samples> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr add_samples not resolved; maybe fwd ref or unanalyzed import)
For-loop
Call range
Name num_ppo_updates in context <class '_ast.Load'>
Get num_ppo_updates in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function train_PG> to <Node ???:*.range>
Assign ['data'] [<_ast.Call object at 0x107d106a0>]
Call ppo_buffer.random_batch
Name mini_batch_size in context <class '_ast.Load'>
Get mini_batch_size in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute random_batch of ppo_buffer in context <class '_ast.Load'>
Resolve ppo_buffer.random_batch in context <class '_ast.Load'>
Get ppo_buffer in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node import:replay_buffer.PPOReplayBuffer>
Resolved to attr random_batch of <Node import:replay_buffer.PPOReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch> (target obj <Node import:replay_buffer.PPOReplayBuffer> known but target attr random_batch not resolved; maybe fwd ref or unanalyzed import)
Name data in context <class '_ast.Store'>
Set data in <Scope: function train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Assign ['ob_no', 'ac_na', 're_n', 'hidden', 'masks'] [<_ast.Call object at 0x107d10908>]
Call unpack_sample
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name unpack_sample in context <class '_ast.Load'>
Get unpack_sample in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ob_no in context <class '_ast.Store'>
Set ob_no in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Store'>
Set ac_na in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name re_n in context <class '_ast.Store'>
Set re_n in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Store'>
Set hidden in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Name masks in context <class '_ast.Store'>
Set masks in <Scope: function train_PG> to <Node function:train_policy.train_PG.unpack_sample>
Assign ['fixed_log_probs'] [<_ast.Subscript object at 0x107d10a20>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name fixed_log_probs in context <class '_ast.Store'>
Set fixed_log_probs in <Scope: function train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Assign ['adv_n'] [<_ast.Subscript object at 0x107d10b70>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name adv_n in context <class '_ast.Store'>
Set adv_n in <Scope: function train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Assign ['q_n'] [<_ast.Subscript object at 0x107d10cc0>]
Name data in context <class '_ast.Load'>
Get data in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name q_n in context <class '_ast.Store'>
Set q_n in <Scope: function train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Assign ['log_probs'] [<_ast.Call object at 0x107d10e10>]
Call agent.sess.run
Attribute sy_lp_n of agent in context <class '_ast.Load'>
Resolve agent.sy_lp_n in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_lp_n of <Node class:train_policy.Agent>
getattr sy_lp_n on agent returns <Node method:train_policy.Agent.get_log_prob>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.get_log_prob>
Attribute sy_ob_no of agent in context <class '_ast.Load'>
Resolve agent.sy_ob_no in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_ob_no of <Node class:train_policy.Agent>
getattr sy_ob_no on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_hidden of agent in context <class '_ast.Load'>
Resolve agent.sy_hidden in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_hidden of <Node class:train_policy.Agent>
getattr sy_hidden on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Attribute sy_ac_na of agent in context <class '_ast.Load'>
Resolve agent.sy_ac_na in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sy_ac_na of <Node class:train_policy.Agent>
getattr sy_ac_na on agent returns <Node method:train_policy.Agent.define_placeholders>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.define_placeholders>
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Attribute run of agent.sess in context <class '_ast.Load'>
Resolve agent.sess.run in context <class '_ast.Load'>
Resolve agent.sess in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sess of <Node class:train_policy.Agent>
Resolved to attr run of <Node attribute:tensorflow.Session>
Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.Session.run> (target obj <Node attribute:tensorflow.Session> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Name log_probs in context <class '_ast.Store'>
Set log_probs in <Scope: function train_PG> to <Node attribute:tensorflow.Session.run>
Call agent.update_parameters
Name ob_no in context <class '_ast.Load'>
Get ob_no in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name hidden in context <class '_ast.Load'>
Get hidden in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name ac_na in context <class '_ast.Load'>
Get ac_na in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node function:train_policy.train_PG.unpack_sample>
Use from <Node function:train_policy.train_PG> to Name <Node function:train_policy.train_PG.unpack_sample>
Name fixed_log_probs in context <class '_ast.Load'>
Get fixed_log_probs in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name q_n in context <class '_ast.Load'>
Get q_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Name adv_n in context <class '_ast.Load'>
Get adv_n in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:replay_buffer.PPOReplayBuffer.random_batch>
Attribute update_parameters of agent in context <class '_ast.Load'>
Resolve agent.update_parameters in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr update_parameters of <Node class:train_policy.Agent>
getattr update_parameters on agent returns <Node method:train_policy.Agent.update_parameters>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.update_parameters>
Call print
Name print in context <class '_ast.Load'>
Get print in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.print>
Assign ['val_stats'] []
Name val_stats in context <class '_ast.Store'>
Set val_stats in <Scope: function train_PG>: value None is not a Node
For-loop
Call range
Name num_tasks in context <class '_ast.Load'>
Get num_tasks in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function train_PG> to <Node ???:*.range>
Assign ['vs', 'timesteps_this_batch'] [<_ast.Call object at 0x107d157b8>]
Call agent.sample_trajectories
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Name env in context <class '_ast.Load'>
Get env in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name min_timesteps_per_batch in context <class '_ast.Load'>
Get min_timesteps_per_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Attribute sample_trajectories of agent in context <class '_ast.Load'>
Resolve agent.sample_trajectories in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr sample_trajectories of <Node class:train_policy.Agent>
getattr sample_trajectories on agent returns <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Name vs in context <class '_ast.Store'>
Set vs in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
Name timesteps_this_batch in context <class '_ast.Store'>
Set timesteps_this_batch in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
AugAssign ['val_stats'] <class '_ast.Add'> ['vs']
Name vs in context <class '_ast.Load'>
Get vs in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Name val_stats in context <class '_ast.Store'>
Set val_stats in <Scope: function train_PG> to <Node method:train_policy.Agent.sample_trajectories>
With (context manager)
Call open
Call <_ast.Str object at 0x107d15be0>.format
Name exp_name in context <class '_ast.Load'>
Get exp_name in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Attribute format of <_ast.Str object at 0x107d15be0> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x107d15be0>.format in context <class '_ast.Load'>
Resolved to attr format of <Node class:Str>
getattr format on <_ast.Str object at 0x107d15be0> returns <Node attribute:Str.format>
Use from <Node function:train_policy.train_PG> to <Node attribute:Str.format>
Name open in context <class '_ast.Load'>
Get open in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.open>
Use from <Node function:train_policy.train_PG> to With <Node ???:*.open>
Call open
Call <_ast.Str object at 0x107d15be0>.format
Name exp_name in context <class '_ast.Load'>
Get exp_name in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ---:train_policy.train_PG.^^^argument^^^>
Use from <Node function:train_policy.train_PG> to Name <Node ---:train_policy.train_PG.^^^argument^^^>
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Attribute format of <_ast.Str object at 0x107d15be0> in context <class '_ast.Load'>
Resolve <_ast.Str object at 0x107d15be0>.format in context <class '_ast.Load'>
Resolved to attr format of <Node class:Str>
getattr format on <_ast.Str object at 0x107d15be0> returns <Node attribute:Str.format>
Use from <Node function:train_policy.train_PG> to <Node attribute:Str.format>
Name open in context <class '_ast.Load'>
Get open in <Scope: function train_PG>: no Node value (or name not in scope)
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.open>
Name f in context <class '_ast.Store'>
Set f in <Scope: function train_PG> to <Node ???:*.open>
Call pickle.dump
Call agent.val_replay_buffer.all_batch
Attribute all_batch of agent.val_replay_buffer in context <class '_ast.Load'>
Resolve agent.val_replay_buffer.all_batch in context <class '_ast.Load'>
Resolve agent.val_replay_buffer in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr val_replay_buffer of <Node class:train_policy.Agent>
Resolved to attr all_batch of <Node import:replay_buffer.ReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.all_batch> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr all_batch not resolved; maybe fwd ref or unanalyzed import)
Name f in context <class '_ast.Load'>
Get f in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.open>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.open>
Attribute HIGHEST_PROTOCOL of pickle in context <class '_ast.Load'>
Resolve pickle.HIGHEST_PROTOCOL in context <class '_ast.Load'>
Get pickle in <Scope: function train_PG>, found in <Scope: module >, value <Node module:pickle>
Resolved to attr HIGHEST_PROTOCOL of <Node module:pickle>
Use from <Node function:train_policy.train_PG> to <Node attribute:pickle.HIGHEST_PROTOCOL> (target obj <Node module:pickle> known but target attr HIGHEST_PROTOCOL not resolved; maybe fwd ref or unanalyzed import)
Attribute dump of pickle in context <class '_ast.Load'>
Resolve pickle.dump in context <class '_ast.Load'>
Get pickle in <Scope: function train_PG>, found in <Scope: module >, value <Node module:pickle>
Resolved to attr dump of <Node module:pickle>
Use from <Node function:train_policy.train_PG> to <Node attribute:pickle.dump> (target obj <Node module:pickle> known but target attr dump not resolved; maybe fwd ref or unanalyzed import)
Call agent.val_replay_buffer.flush
Attribute flush of agent.val_replay_buffer in context <class '_ast.Load'>
Resolve agent.val_replay_buffer.flush in context <class '_ast.Load'>
Resolve agent.val_replay_buffer in context <class '_ast.Load'>
Get agent in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node class:train_policy.Agent>
Resolved to attr val_replay_buffer of <Node class:train_policy.Agent>
Resolved to attr flush of <Node import:replay_buffer.ReplayBuffer>
Use from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.flush> (target obj <Node import:replay_buffer.ReplayBuffer> known but target attr flush not resolved; maybe fwd ref or unanalyzed import)
Assign ['returns'] [<_ast.ListComp object at 0x107d19128>]
ListComp
Call sum
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name sum in context <class '_ast.Load'>
Get sum in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node ???:*.sum>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name returns in context <class '_ast.Store'>
Set returns in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Assign ['final_rewards'] [<_ast.ListComp object at 0x107d193c8>]
ListComp
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name final_rewards in context <class '_ast.Store'>
Set final_rewards in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Assign ['ep_lengths'] [<_ast.ListComp object at 0x107d196d8>]
ListComp
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name stats in context <class '_ast.Load'>
Get stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name ep_lengths in context <class '_ast.Store'>
Set ep_lengths in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Call logz.log_tabular
Call time.time
Attribute time of time in context <class '_ast.Load'>
Resolve time.time in context <class '_ast.Load'>
Get time in <Scope: function train_PG>, found in <Scope: module >, value <Node module:time>
Resolved to attr time of <Node module:time>
Use from <Node function:train_policy.train_PG> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
Name start in context <class '_ast.Load'>
Get start in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node attribute:time.time>
Use from <Node function:train_policy.train_PG> to Name <Node attribute:time.time>
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Name itr in context <class '_ast.Load'>
Get itr in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node ???:*.range>
Use from <Node function:train_policy.train_PG> to Name <Node ???:*.range>
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.mean
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.mean
Name final_rewards in context <class '_ast.Load'>
Get final_rewards in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.std
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute std of np in context <class '_ast.Load'>
Resolve np.std in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr std of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.max
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute max of np in context <class '_ast.Load'>
Resolve np.max in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr max of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.max> (target obj <Node module:numpy> known but target attr max not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.min
Name returns in context <class '_ast.Load'>
Get returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute min of np in context <class '_ast.Load'>
Resolve np.min in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr min of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.min> (target obj <Node module:numpy> known but target attr min not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.mean
Name ep_lengths in context <class '_ast.Load'>
Get ep_lengths in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.std
Name ep_lengths in context <class '_ast.Load'>
Get ep_lengths in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute std of np in context <class '_ast.Load'>
Resolve np.std in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr std of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.std> (target obj <Node module:numpy> known but target attr std not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Name timesteps_this_batch in context <class '_ast.Load'>
Get timesteps_this_batch in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Name total_timesteps in context <class '_ast.Load'>
Get total_timesteps in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node function:train_policy.train_PG> to Name <Node method:train_policy.Agent.sample_trajectories>
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Assign ['val_returns'] [<_ast.ListComp object at 0x107c9ad30>]
ListComp
Call sum
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name sum in context <class '_ast.Load'>
Get sum in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node ???:*.sum>
Name val_stats in context <class '_ast.Load'>
Get val_stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name val_returns in context <class '_ast.Store'>
Set val_returns in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Assign ['val_final_rewards'] [<_ast.ListComp object at 0x107c9afd0>]
ListComp
Name s in context <class '_ast.Load'>
Get s in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name val_stats in context <class '_ast.Load'>
Get val_stats in <Scope: function listcomp>, found in <Scope: function train_PG>, value <Node method:train_policy.Agent.sample_trajectories>
Use from <Node namespace:train_policy.train_PG.listcomp> to Name <Node method:train_policy.Agent.sample_trajectories>
Name s in context <class '_ast.Store'>
Set s in <Scope: function listcomp> to <Node method:train_policy.Agent.sample_trajectories>
Name val_final_rewards in context <class '_ast.Store'>
Set val_final_rewards in <Scope: function train_PG> to <Node namespace:train_policy.train_PG.listcomp>
Call logz.log_tabular
Call np.mean
Name val_returns in context <class '_ast.Load'>
Get val_returns in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.log_tabular
Call np.mean
Name val_final_rewards in context <class '_ast.Load'>
Get val_final_rewards in <Scope: function train_PG>, found in <Scope: function train_PG>, value <Node namespace:train_policy.train_PG.listcomp>
Use from <Node function:train_policy.train_PG> to Name <Node namespace:train_policy.train_PG.listcomp>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function train_PG>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute log_tabular of logz in context <class '_ast.Load'>
Resolve logz.log_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr log_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> (target obj <Node module:logz> known but target attr log_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.dump_tabular
Attribute dump_tabular of logz in context <class '_ast.Load'>
Resolve logz.dump_tabular in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr dump_tabular of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.dump_tabular> (target obj <Node module:logz> known but target attr dump_tabular not resolved; maybe fwd ref or unanalyzed import)
Call logz.pickle_tf_vars
Attribute pickle_tf_vars of logz in context <class '_ast.Load'>
Resolve logz.pickle_tf_vars in context <class '_ast.Load'>
Get logz in <Scope: function train_PG>, found in <Scope: module >, value <Node module:logz>
Resolved to attr pickle_tf_vars of <Node module:logz>
Use from <Node function:train_policy.train_PG> to <Node attribute:logz.pickle_tf_vars> (target obj <Node module:logz> known but target attr pickle_tf_vars not resolved; maybe fwd ref or unanalyzed import)
FunctionDef main
Set main in <Scope: module > to <Node function:train_policy.main>
Import ['argparse']
Set argparse in <Scope: function main> to <Node module:argparse>
Use from <Node function:train_policy.main> to Import <Node module:argparse>
Assign ['parser'] [<_ast.Call object at 0x107c9f9b0>]
Call argparse.ArgumentParser
Attribute ArgumentParser of argparse in context <class '_ast.Load'>
Resolve argparse.ArgumentParser in context <class '_ast.Load'>
Get argparse in <Scope: function main>, found in <Scope: function main>, value <Node module:argparse>
Resolved to attr ArgumentParser of <Node module:argparse>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser> (target obj <Node module:argparse> known but target attr ArgumentParser not resolved; maybe fwd ref or unanalyzed import)
Name parser in context <class '_ast.Store'>
Set parser in <Scope: function main> to <Node attribute:argparse.ArgumentParser>
Call parser.add_argument
Name str in context <class '_ast.Load'>
Get str in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.str>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name str in context <class '_ast.Load'>
Get str in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.str>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name float in context <class '_ast.Load'>
Get float in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.float>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name float in context <class '_ast.Load'>
Get float in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.float>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.int>
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Call parser.add_argument
Attribute add_argument of parser in context <class '_ast.Load'>
Resolve parser.add_argument in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr add_argument of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> (target obj <Node attribute:argparse.ArgumentParser> known but target attr add_argument not resolved; maybe fwd ref or unanalyzed import)
Assign ['args'] [<_ast.Call object at 0x107caa5c0>]
Call parser.parse_args
Attribute parse_args of parser in context <class '_ast.Load'>
Resolve parser.parse_args in context <class '_ast.Load'>
Get parser in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser>
Resolved to attr parse_args of <Node attribute:argparse.ArgumentParser>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args> (target obj <Node attribute:argparse.ArgumentParser> known but target attr parse_args not resolved; maybe fwd ref or unanalyzed import)
Name args in context <class '_ast.Store'>
Set args in <Scope: function main> to <Node attribute:argparse.ArgumentParser.parse_args>
Call os.path.exists
Attribute exists of os.path in context <class '_ast.Load'>
Resolve os.path.exists in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr path of <Node module:os>
Unresolved, returning attr exists of unknown
Use from <Node function:train_policy.main> to <Node ???:*.exists> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call os.makedirs
Attribute makedirs of os in context <class '_ast.Load'>
Resolve os.makedirs in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr makedirs of <Node module:os>
Use from <Node function:train_policy.main> to <Node attribute:os.makedirs> (target obj <Node module:os> known but target attr makedirs not resolved; maybe fwd ref or unanalyzed import)
Assign ['logdir'] [<_ast.BinOp object at 0x107caa978>]
Attribute exp_name of args in context <class '_ast.Load'>
Resolve args.exp_name in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr exp_name of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.exp_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr exp_name not resolved; maybe fwd ref or unanalyzed import)
Attribute env_name of args in context <class '_ast.Load'>
Resolve args.env_name in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr env_name of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.env_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr env_name not resolved; maybe fwd ref or unanalyzed import)
Call time.strftime
Attribute strftime of time in context <class '_ast.Load'>
Resolve time.strftime in context <class '_ast.Load'>
Get time in <Scope: function main>, found in <Scope: module >, value <Node module:time>
Resolved to attr strftime of <Node module:time>
Use from <Node function:train_policy.main> to <Node attribute:time.strftime> (target obj <Node module:time> known but target attr strftime not resolved; maybe fwd ref or unanalyzed import)
Name logdir in context <class '_ast.Store'>
Set logdir in <Scope: function main> to <Node attribute:time.strftime>
Assign ['logdir'] [<_ast.Call object at 0x107caacf8>]
Call os.path.join
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function main>, found in <Scope: function main>, value <Node attribute:time.strftime>
Use from <Node function:train_policy.main> to Name <Node attribute:time.strftime>
Attribute join of os.path in context <class '_ast.Load'>
Resolve os.path.join in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr path of <Node module:os>
Unresolved, returning attr join of unknown
Use from <Node function:train_policy.main> to <Node ???:*.join> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name logdir in context <class '_ast.Store'>
Set logdir in <Scope: function main> to <Node ???:*.join>
Call os.path.exists
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.join>
Use from <Node function:train_policy.main> to Name <Node ???:*.join>
Attribute exists of os.path in context <class '_ast.Load'>
Resolve os.path.exists in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr path of <Node module:os>
Unresolved, returning attr exists of unknown
Use from <Node function:train_policy.main> to <Node ???:*.exists> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call os.makedirs
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.join>
Use from <Node function:train_policy.main> to Name <Node ???:*.join>
Attribute makedirs of os in context <class '_ast.Load'>
Resolve os.makedirs in context <class '_ast.Load'>
Get os in <Scope: function main>, found in <Scope: module >, value <Node module:os>
Resolved to attr makedirs of <Node module:os>
Use from <Node function:train_policy.main> to <Node attribute:os.makedirs> (target obj <Node module:os> known but target attr makedirs not resolved; maybe fwd ref or unanalyzed import)
Assign ['max_path_length'] [<_ast.IfExp object at 0x107cae198>]
Attribute ep_len of args in context <class '_ast.Load'>
Resolve args.ep_len in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr ep_len of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr ep_len not resolved; maybe fwd ref or unanalyzed import)
Attribute ep_len of args in context <class '_ast.Load'>
Resolve args.ep_len in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr ep_len of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr ep_len not resolved; maybe fwd ref or unanalyzed import)
Name max_path_length in context <class '_ast.Store'>
Set max_path_length in <Scope: function main> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len>
Assign ['processes'] []
Name processes in context <class '_ast.Store'>
Set processes in <Scope: function main>: value None is not a Node
For-loop
Call range
Attribute n_experiments of args in context <class '_ast.Load'>
Resolve args.n_experiments in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr n_experiments of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.n_experiments> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_experiments not resolved; maybe fwd ref or unanalyzed import)
Name range in context <class '_ast.Load'>
Get range in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.range>
Name e in context <class '_ast.Store'>
Set e in <Scope: function main> to <Node ???:*.range>
Assign ['seed'] [<_ast.BinOp object at 0x107cae5c0>]
Attribute seed of args in context <class '_ast.Load'>
Resolve args.seed in context <class '_ast.Load'>
Get args in <Scope: function main>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr seed of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.seed> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Name e in context <class '_ast.Load'>
Get e in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.range>
Use from <Node function:train_policy.main> to Name <Node ???:*.range>
Name seed in context <class '_ast.Store'>
Set seed in <Scope: function main> to <Node ???:*.range>
Call print
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.range>
Use from <Node function:train_policy.main> to Name <Node ???:*.range>
Name print in context <class '_ast.Load'>
Get print in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.print>
FunctionDef train_func
Set train_func in <Scope: function main> to <Node function:train_policy.main.train_func>
Call train_PG
Attribute exp_name of args in context <class '_ast.Load'>
Resolve args.exp_name in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr exp_name of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.exp_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr exp_name not resolved; maybe fwd ref or unanalyzed import)
Attribute env_name of args in context <class '_ast.Load'>
Resolve args.env_name in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr env_name of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.env_name> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr env_name not resolved; maybe fwd ref or unanalyzed import)
Attribute n_iter of args in context <class '_ast.Load'>
Resolve args.n_iter in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr n_iter of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.n_iter> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_iter not resolved; maybe fwd ref or unanalyzed import)
Attribute discount of args in context <class '_ast.Load'>
Resolve args.discount in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr discount of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.discount> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr discount not resolved; maybe fwd ref or unanalyzed import)
Attribute batch_size of args in context <class '_ast.Load'>
Resolve args.batch_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr batch_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr batch_size not resolved; maybe fwd ref or unanalyzed import)
Attribute num_tasks of args in context <class '_ast.Load'>
Resolve args.num_tasks in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr num_tasks of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_tasks> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr num_tasks not resolved; maybe fwd ref or unanalyzed import)
Attribute mini_batch_size of args in context <class '_ast.Load'>
Resolve args.mini_batch_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr mini_batch_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.mini_batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr mini_batch_size not resolved; maybe fwd ref or unanalyzed import)
Name max_path_length in context <class '_ast.Load'>
Get max_path_length in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args.ep_len>
Use from <Node function:train_policy.main.train_func> to Name <Node attribute:argparse.ArgumentParser.parse_args.ep_len>
Attribute learning_rate of args in context <class '_ast.Load'>
Resolve args.learning_rate in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr learning_rate of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.learning_rate> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr learning_rate not resolved; maybe fwd ref or unanalyzed import)
Attribute batch_size of args in context <class '_ast.Load'>
Resolve args.batch_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr batch_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr batch_size not resolved; maybe fwd ref or unanalyzed import)
Attribute mini_batch_size of args in context <class '_ast.Load'>
Resolve args.mini_batch_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr mini_batch_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.mini_batch_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr mini_batch_size not resolved; maybe fwd ref or unanalyzed import)
Attribute num_value_iters of args in context <class '_ast.Load'>
Resolve args.num_value_iters in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr num_value_iters of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_value_iters> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr num_value_iters not resolved; maybe fwd ref or unanalyzed import)
Attribute render of args in context <class '_ast.Load'>
Resolve args.render in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr render of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.render> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr render not resolved; maybe fwd ref or unanalyzed import)
Call os.path.join
Name logdir in context <class '_ast.Load'>
Get logdir in <Scope: function train_func>, found in <Scope: function main>, value <Node ???:*.join>
Use from <Node function:train_policy.main.train_func> to Name <Node ???:*.join>
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_func>, found in <Scope: function main>, value <Node ???:*.range>
Use from <Node function:train_policy.main.train_func> to Name <Node ???:*.range>
Attribute join of os.path in context <class '_ast.Load'>
Resolve os.path.join in context <class '_ast.Load'>
Resolve os.path in context <class '_ast.Load'>
Get os in <Scope: function train_func>, found in <Scope: module >, value <Node module:os>
Resolved to attr path of <Node module:os>
Unresolved, returning attr join of unknown
Use from <Node function:train_policy.main.train_func> to <Node ???:*.join> (target obj os.path not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute dont_normalize_advantages of args in context <class '_ast.Load'>
Resolve args.dont_normalize_advantages in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr dont_normalize_advantages of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.dont_normalize_advantages> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr dont_normalize_advantages not resolved; maybe fwd ref or unanalyzed import)
Attribute nn_critic of args in context <class '_ast.Load'>
Resolve args.nn_critic in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr nn_critic of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.nn_critic> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr nn_critic not resolved; maybe fwd ref or unanalyzed import)
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function train_func>, found in <Scope: function main>, value <Node ???:*.range>
Use from <Node function:train_policy.main.train_func> to Name <Node ???:*.range>
Attribute n_layers of args in context <class '_ast.Load'>
Resolve args.n_layers in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr n_layers of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.n_layers> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr n_layers not resolved; maybe fwd ref or unanalyzed import)
Attribute size of args in context <class '_ast.Load'>
Resolve args.size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr size not resolved; maybe fwd ref or unanalyzed import)
Attribute gru_size of args in context <class '_ast.Load'>
Resolve args.gru_size in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr gru_size of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.gru_size> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr gru_size not resolved; maybe fwd ref or unanalyzed import)
Attribute history of args in context <class '_ast.Load'>
Resolve args.history in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr history of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.history> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr history not resolved; maybe fwd ref or unanalyzed import)
Attribute num_tasks of args in context <class '_ast.Load'>
Resolve args.num_tasks in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr num_tasks of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_tasks> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr num_tasks not resolved; maybe fwd ref or unanalyzed import)
Attribute l2reg of args in context <class '_ast.Load'>
Resolve args.l2reg in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr l2reg of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.l2reg> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr l2reg not resolved; maybe fwd ref or unanalyzed import)
Attribute recurrent of args in context <class '_ast.Load'>
Resolve args.recurrent in context <class '_ast.Load'>
Get args in <Scope: function train_func>, found in <Scope: function main>, value <Node attribute:argparse.ArgumentParser.parse_args>
Resolved to attr recurrent of <Node attribute:argparse.ArgumentParser.parse_args>
Use from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.recurrent> (target obj <Node attribute:argparse.ArgumentParser.parse_args> known but target attr recurrent not resolved; maybe fwd ref or unanalyzed import)
Name train_PG in context <class '_ast.Load'>
Get train_PG in <Scope: function train_func>, found in <Scope: module >, value <Node function:train_policy.train_PG>
Use from <Node function:train_policy.main.train_func> to Name <Node function:train_policy.train_PG>
Assign ['p'] [<_ast.Call object at 0x107cb5b70>]
Call Process
Name train_func in context <class '_ast.Load'>
Get train_func in <Scope: function main>, found in <Scope: function main>, value <Node function:train_policy.main.train_func>
Use from <Node function:train_policy.main> to Name <Node function:train_policy.main.train_func>
Call tuple
Name tuple in context <class '_ast.Load'>
Get tuple in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.tuple>
Name Process in context <class '_ast.Load'>
Get Process in <Scope: function main>, found in <Scope: module >, value <Node import:multiprocessing.Process>
Use from <Node function:train_policy.main> to Name <Node import:multiprocessing.Process>
Name p in context <class '_ast.Store'>
Set p in <Scope: function main> to <Node import:multiprocessing.Process>
Call p.start
Attribute start of p in context <class '_ast.Load'>
Resolve p.start in context <class '_ast.Load'>
Get p in <Scope: function main>, found in <Scope: function main>, value <Node import:multiprocessing.Process>
Resolved to attr start of <Node import:multiprocessing.Process>
Use from <Node function:train_policy.main> to <Node attribute:multiprocessing.Process.start> (target obj <Node import:multiprocessing.Process> known but target attr start not resolved; maybe fwd ref or unanalyzed import)
Call processes.append
Name p in context <class '_ast.Load'>
Get p in <Scope: function main>, found in <Scope: function main>, value <Node import:multiprocessing.Process>
Use from <Node function:train_policy.main> to Name <Node import:multiprocessing.Process>
Attribute append of processes in context <class '_ast.Load'>
Resolve processes.append in context <class '_ast.Load'>
Get processes in <Scope: function main>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:train_policy.main> to <Node ???:*.append> (target obj processes not resolved; maybe fwd ref, function argument, or unanalyzed import)
For-loop
Name processes in context <class '_ast.Load'>
Get processes in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:train_policy.main> to Name <Node ???:*.processes>
Name p in context <class '_ast.Store'>
Set p in <Scope: function main> to <Node ???:*.processes>
Call p.join
Attribute join of p in context <class '_ast.Load'>
Resolve p.join in context <class '_ast.Load'>
Get p in <Scope: function main>, found in <Scope: function main>, value <Node ???:*.processes>
Resolved to attr join of <Node ???:*.processes>
Use from <Node function:train_policy.main> to <Node ???:*.join> (target obj p not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: module >: no Node value (or name not in scope)
Use from <Node module:train_policy> to Name <Node ???:*.__name__>
Call main
Name main in context <class '_ast.Load'>
Get main in <Scope: module >, found in <Scope: module >, value <Node function:train_policy.main>
Use from <Node module:train_policy> to Name <Node function:train_policy.main>
Expanding unknowns: new uses edge from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.reward_dim>
Expanding unknowns: new uses edge from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.terminal_dim>
Use from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session.run> resolves <Node ???:*.run>; removing wildcard
Expanding unknowns: new uses edge from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session.run>
Expanding unknowns: new uses edge from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:train_policy.Agent.terminal_dim>
Expanding unknowns: new uses edge from <Node method:train_policy.Agent.policy_forward_pass> to <Node attribute:train_policy.Agent.scope>
Expanding unknowns: new uses edge from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:train_policy.Agent.scope>
Expanding unknowns: new uses edge from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.terminal_dim>
Use from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.max> resolves <Node ???:*.max>; removing wildcard
Expanding unknowns: new uses edge from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.max>
Use from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.shape> resolves <Node ???:*.shape>; removing wildcard
Expanding unknowns: new uses edge from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.shape>
Expanding unknowns: new uses edge from <Node function:train_policy.train_PG> to <Node attribute:numpy.squeeze.shape>
Expanding unknowns: new uses edge from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.Session.run.shape>
Contracting non-existent from <Node module:train_policy> to <Node module:random> as <Node ---:*.random>
Contracting non-existent from <Node module:train_policy> to <Node module:multiprocessing> as <Node ---:*.multiprocessing>
Contracting non-existent from <Node module:train_policy> to <Node module:inspect> as <Node ---:*.inspect>
Contracting non-existent from <Node module:train_policy> to <Node module:pickle> as <Node ---:*.pickle>
Contracting non-existent from <Node module:train_policy> to <Node import:tf> as <Node ---:*.tf>
Contracting non-existent from <Node module:train_policy> to <Node module:replay_buffer> as <Node ---:*.replay_buffer>
Contracting non-existent from <Node module:train_policy> to <Node import:tfp> as <Node ---:*.tfp>
Contracting non-existent from <Node module:train_policy> to <Node module:point_mass> as <Node ---:*.point_mass>
Contracting non-existent from <Node module:train_policy> to <Node module:logz> as <Node ---:*.logz>
Contracting non-existent from <Node module:train_policy> to <Node import:np> as <Node ---:*.np>
Contracting non-existent from <Node module:train_policy> to <Node module:gym> as <Node ---:*.gym>
Contracting non-existent from <Node module:train_policy> to <Node module:time> as <Node ---:*.time>
Contracting non-existent from <Node module:train_policy> to <Node module:pdb> as <Node ---:*.pdb>
Contracting non-existent from <Node module:train_policy> to <Node module:point_mass_observed> as <Node ---:*.point_mass_observed>
Contracting non-existent from <Node module:train_policy> to <Node module:scipy.signal> as <Node ---:*.scipy.signal>
Contracting non-existent from <Node module:train_policy> to <Node module:os> as <Node ---:*.os>
Contracting non-existent from <Node function:train_policy.minimize_and_clip> to <Node ---:train_policy.minimize_and_clip.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.minimize_and_clip> to <Node attribute:tensorflow.clip_by_norm> as <Node ---:*.clip_by_norm>
Contracting non-existent from <Node function:train_policy.minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.compute_gradients> as <Node ---:*.compute_gradients>
Contracting non-existent from <Node function:train_policy.minimize_and_clip> to <Node attribute:train_policy.minimize_and_clip.^^^argument^^^.apply_gradients> as <Node ---:*.apply_gradients>
Contracting non-existent from <Node function:train_policy.build_mlp> to <Node attribute:Str.format> as <Node ---:*.format>
Contracting non-existent from <Node function:train_policy.build_mlp> to <Node ---:train_policy.build_mlp.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.build_mlp> to <Node attribute:tensorflow.tanh> as <Node ---:*.tanh>
Contracting non-existent from <Node function:train_policy.build_rnn> to <Node attribute:tensorflow.tanh> as <Node ---:*.tanh>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.reshape> as <Node ---:*.reshape>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.variable_scope> as <Node ---:*.variable_scope>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.zeros_initializer> as <Node ---:*.zeros_initializer>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node method:tensorflow.variable_scope.__enter__> as <Node ---:*.__enter__>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.AUTO_REUSE> as <Node ---:*.AUTO_REUSE>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node ---:train_policy.build_policy.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node method:tensorflow.variable_scope.__exit__> as <Node ---:*.__exit__>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node attribute:train_policy.build_rnn.get_shape> as <Node ---:*.get_shape>
Contracting non-existent from <Node function:train_policy.build_policy> to <Node attribute:tensorflow.tanh> as <Node ---:*.tanh>
Contracting non-existent from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.reshape> as <Node ---:*.reshape>
Contracting non-existent from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.variable_scope> as <Node ---:*.variable_scope>
Contracting non-existent from <Node function:train_policy.build_critic> to <Node ---:train_policy.build_critic.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.build_critic> to <Node method:tensorflow.variable_scope.__enter__> as <Node ---:*.__enter__>
Contracting non-existent from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.AUTO_REUSE> as <Node ---:*.AUTO_REUSE>
Contracting non-existent from <Node function:train_policy.build_critic> to <Node method:tensorflow.variable_scope.__exit__> as <Node ---:*.__exit__>
Contracting non-existent from <Node function:train_policy.build_critic> to <Node attribute:train_policy.build_rnn.get_shape> as <Node ---:*.get_shape>
Contracting non-existent from <Node function:train_policy.build_critic> to <Node attribute:tensorflow.tanh> as <Node ---:*.tanh>
Contracting non-existent from <Node function:train_policy.pathlength> to <Node ---:train_policy.pathlength.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.discounted_return> to <Node attribute:numpy.arange> as <Node ---:*.arange>
Contracting non-existent from <Node function:train_policy.discounted_return> to <Node ---:train_policy.discounted_return.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.discount_cumsum> to <Node ---:train_policy.discount_cumsum.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.setup_logger> to <Node attribute:logz.save_params> as <Node ---:*.save_params>
Contracting non-existent from <Node function:train_policy.setup_logger> to <Node attribute:inspect.getargspec> as <Node ---:*.getargspec>
Contracting non-existent from <Node function:train_policy.setup_logger> to <Node ---:train_policy.setup_logger.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.setup_logger> to <Node attribute:logz.configure_output_dir> as <Node ---:*.configure_output_dir>
Contracting non-existent from <Node namespace:train_policy.setup_logger.dictcomp> to <Node ---:train_policy.setup_logger.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:train_policy.setup_logger.dictcomp> to <Node attribute:inspect.getargspec> as <Node ---:*.getargspec>
Contracting non-existent from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.terminal_dim> as <Node ???:*.terminal_dim>
Contracting non-existent from <Node method:train_policy.Agent.__init__> to <Node attribute:train_policy.Agent.reward_dim> as <Node ???:*.reward_dim>
Contracting non-existent from <Node method:train_policy.Agent.__init__> to <Node import:replay_buffer.ReplayBuffer> as <Node ---:*.ReplayBuffer>
Contracting non-existent from <Node method:train_policy.Agent.__init__> to <Node ---:train_policy.Agent.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session.run> as <Node ???:*.run>
Contracting non-existent from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session.__enter__> as <Node ---:*.__enter__>
Contracting non-existent from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.ConfigProto> as <Node ---:*.ConfigProto>
Contracting non-existent from <Node method:train_policy.Agent.init_tf_sess> to <Node attribute:tensorflow.Session> as <Node ---:*.Session>
Contracting non-existent from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:train_policy.Agent.terminal_dim> as <Node ???:*.terminal_dim>
Contracting non-existent from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.placeholder> as <Node ---:*.placeholder>
Contracting non-existent from <Node method:train_policy.Agent.define_placeholders> to <Node attribute:tensorflow.float32> as <Node ---:*.float32>
Contracting non-existent from <Node method:train_policy.Agent.define_placeholders> to <Node ---:train_policy.Agent.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.policy_forward_pass.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.policy_forward_pass> to <Node ---:train_policy.Agent.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.policy_forward_pass> to <Node attribute:train_policy.Agent.scope> as <Node ???:*.scope>
Contracting non-existent from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.shape> as <Node ???:*.shape>
Contracting non-existent from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.exp> as <Node ---:*.exp>
Contracting non-existent from <Node method:train_policy.Agent.sample_action> to <Node ---:train_policy.Agent.sample_action.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.sample_action> to <Node attribute:tensorflow.random_normal> as <Node ---:*.random_normal>
Contracting non-existent from <Node method:train_policy.Agent.get_log_prob> to <Node ---:train_policy.Agent.get_log_prob.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.squeeze> as <Node ---:*.squeeze>
Contracting non-existent from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.get_collection> as <Node ---:*.get_collection>
Contracting non-existent from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.placeholder> as <Node ---:*.placeholder>
Contracting non-existent from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.float32> as <Node ---:*.float32>
Contracting non-existent from <Node method:train_policy.Agent.build_computation_graph> to <Node ---:train_policy.Agent.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:train_policy.Agent.scope> as <Node ???:*.scope>
Contracting non-existent from <Node method:train_policy.Agent.build_computation_graph> to <Node attribute:tensorflow.split> as <Node ---:*.split>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectories> to <Node ---:train_policy.Agent.sample_trajectories.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectories> to <Node ---:train_policy.Agent.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:replay_buffer.ReplayBuffer.add_sample> as <Node ---:*.add_sample>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^._goal> as <Node ---:*._goal>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.sample_trajectory.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node ---:train_policy.Agent.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset_task> as <Node ---:*.reset_task>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.terminal_dim> as <Node ???:*.terminal_dim>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.max> as <Node ???:*.max>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.zeros> as <Node ---:*.zeros>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.render> as <Node ---:*.render>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:time.sleep> as <Node ---:*.sleep>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:numpy.float32> as <Node ---:*.float32>
Contracting non-existent from <Node method:train_policy.Agent.sample_trajectory> to <Node attribute:train_policy.Agent.sample_trajectory.^^^argument^^^.reset> as <Node ---:*.reset>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.squeeze> as <Node ---:*.squeeze>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.Session.run.shape> as <Node ???:*.shape>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:tensorflow.Session.run> as <Node ???:*.run>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node ---:train_policy.Agent.compute_advantage.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.empty> as <Node ---:*.empty>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node ---:train_policy.Agent.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze> as <Node ---:*.squeeze>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.std> as <Node ---:*.std>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.mean> as <Node ---:*.mean>
Contracting non-existent from <Node method:train_policy.Agent.compute_advantage> to <Node attribute:numpy.squeeze.shape> as <Node ???:*.shape>
Contracting non-existent from <Node method:train_policy.Agent.estimate_return> to <Node ---:train_policy.Agent.estimate_return.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.update_parameters> to <Node ---:train_policy.Agent.update_parameters.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.update_critic> to <Node attribute:tensorflow.Session.run> as <Node ???:*.run>
Contracting non-existent from <Node method:train_policy.Agent.update_critic> to <Node ---:train_policy.Agent.update_critic.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.update_critic> to <Node attribute:tensorflow.placeholder> as <Node ---:*.placeholder>
Contracting non-existent from <Node method:train_policy.Agent.update_critic> to <Node ---:train_policy.Agent.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.update_critic> to <Node attribute:numpy.std> as <Node ---:*.std>
Contracting non-existent from <Node method:train_policy.Agent.update_critic> to <Node attribute:numpy.mean> as <Node ---:*.mean>
Contracting non-existent from <Node method:train_policy.Agent.update_policy> to <Node attribute:tensorflow.Session.run> as <Node ???:*.run>
Contracting non-existent from <Node method:train_policy.Agent.update_policy> to <Node ---:train_policy.Agent.update_policy.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.reduce_sum> as <Node ---:*.reduce_sum>
Contracting non-existent from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.clip_by_value> as <Node ---:*.clip_by_value>
Contracting non-existent from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.exp> as <Node ---:*.exp>
Contracting non-existent from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.reduce_mean> as <Node ---:*.reduce_mean>
Contracting non-existent from <Node method:train_policy.Agent.ppo_loss> to <Node attribute:tensorflow.minimum> as <Node ---:*.minimum>
Contracting non-existent from <Node method:train_policy.Agent.ppo_loss> to <Node ---:train_policy.Agent.ppo_loss.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node import:point_mass_observed.ObservedPointEnv> as <Node ---:*.ObservedPointEnv>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:train_policy.train_PG.^^^argument^^^.seed> as <Node ???:*.seed>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:train_policy.train_PG.^^^argument^^^._goal> as <Node ---:*._goal>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.shape> as <Node ???:*.shape>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.flush> as <Node ---:*.flush>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:numpy.squeeze.shape> as <Node ???:*.shape>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.all_batch> as <Node ---:*.all_batch>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.add_samples> as <Node ---:*.add_samples>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.Session.run.shape> as <Node ???:*.shape>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.PPOReplayBuffer.random_batch> as <Node ---:*.random_batch>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.Session.run> as <Node ???:*.run>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:replay_buffer.ReplayBuffer.flush> as <Node ---:*.flush>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node import:point_mass.PointEnv> as <Node ---:*.PointEnv>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node method:*.open.__enter__> as <Node ---:*.__enter__>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:numpy.std> as <Node ---:*.std>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node method:*.open.__exit__> as <Node ---:*.__exit__>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:numpy.mean> as <Node ---:*.mean>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:pickle.dump> as <Node ---:*.dump>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:Str.format> as <Node ---:*.format>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:pickle.HIGHEST_PROTOCOL> as <Node ---:*.HIGHEST_PROTOCOL>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:logz.dump_tabular> as <Node ---:*.dump_tabular>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:logz.log_tabular> as <Node ---:*.log_tabular>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:numpy.max> as <Node ???:*.max>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:numpy.min> as <Node ---:*.min>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node ---:train_policy.train_PG.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:logz.pickle_tf_vars> as <Node ---:*.pickle_tf_vars>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:time.time> as <Node ---:*.time>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node import:replay_buffer.ReplayBuffer> as <Node ---:*.ReplayBuffer>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node import:replay_buffer.PPOReplayBuffer> as <Node ---:*.PPOReplayBuffer>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:random.seed> as <Node ???:*.seed>
Contracting non-existent from <Node function:train_policy.train_PG> to <Node attribute:tensorflow.set_random_seed> as <Node ---:*.set_random_seed>
Contracting non-existent from <Node function:train_policy.train_PG.unpack_sample> to <Node ---:train_policy.train_PG.unpack_sample.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:time.strftime> as <Node ---:*.strftime>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.env_name> as <Node ---:*.env_name>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.exp_name> as <Node ---:*.exp_name>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:multiprocessing.Process.start> as <Node ---:*.start>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.seed> as <Node ???:*.seed>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len> as <Node ---:*.ep_len>
Contracting non-existent from <Node function:train_policy.main> to <Node module:argparse> as <Node ---:*.argparse>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser> as <Node ---:*.ArgumentParser>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.add_argument> as <Node ---:*.add_argument>
Contracting non-existent from <Node function:train_policy.main> to <Node import:multiprocessing.Process> as <Node ---:*.Process>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args> as <Node ---:*.parse_args>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:argparse.ArgumentParser.parse_args.n_experiments> as <Node ---:*.n_experiments>
Contracting non-existent from <Node function:train_policy.main> to <Node attribute:os.makedirs> as <Node ---:*.makedirs>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.env_name> as <Node ---:*.env_name>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.exp_name> as <Node ---:*.exp_name>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.ep_len> as <Node ---:*.ep_len>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.n_iter> as <Node ---:*.n_iter>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.discount> as <Node ---:*.discount>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.mini_batch_size> as <Node ---:*.mini_batch_size>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.batch_size> as <Node ---:*.batch_size>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_tasks> as <Node ---:*.num_tasks>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.learning_rate> as <Node ---:*.learning_rate>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.num_value_iters> as <Node ---:*.num_value_iters>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.render> as <Node ---:*.render>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.nn_critic> as <Node ---:*.nn_critic>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.dont_normalize_advantages> as <Node ---:*.dont_normalize_advantages>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.size> as <Node ---:*.size>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.n_layers> as <Node ---:*.n_layers>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.gru_size> as <Node ---:*.gru_size>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.history> as <Node ---:*.history>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.l2reg> as <Node ---:*.l2reg>
Contracting non-existent from <Node function:train_policy.main.train_func> to <Node attribute:argparse.ArgumentParser.parse_args.recurrent> as <Node ---:*.recurrent>
Collapsing inner from <Node namespace:train_policy.setup_logger.dictcomp> to <Node function:train_policy.setup_logger>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:train_policy.setup_logger.dictcomp> to <Node function:train_policy.setup_logger>, uses <Node ---:*.getargspec>
Collapsing inner from <Node namespace:train_policy.setup_logger.dictcomp> to <Node function:train_policy.setup_logger>, uses <Node ???:*.k>
Collapsing inner from <Node namespace:train_policy.train_PG.listcomp> to <Node function:train_policy.train_PG>, uses <Node ???:*.sum>
Collapsing inner from <Node namespace:train_policy.train_PG.listcomp> to <Node function:train_policy.train_PG>, uses <Node method:train_policy.Agent.sample_trajectories>
Looking at train_policy
Coloring train_policy from file 'train_policy.py'
Looking at Agent
Coloring Agent from file 'train_policy.py'
New namespace train_policy, old was 
Looking at build_critic
Coloring build_critic from file 'train_policy.py'
New namespace train_policy, old was 
Looking at build_mlp
Coloring build_mlp from file 'train_policy.py'
New namespace train_policy, old was 
Looking at build_policy
Coloring build_policy from file 'train_policy.py'
New namespace train_policy, old was 
Looking at build_rnn
Coloring build_rnn from file 'train_policy.py'
New namespace train_policy, old was 
Looking at discount_cumsum
Coloring discount_cumsum from file 'train_policy.py'
New namespace train_policy, old was 
Looking at discounted_return
Coloring discounted_return from file 'train_policy.py'
New namespace train_policy, old was 
Looking at main
Coloring main from file 'train_policy.py'
New namespace train_policy, old was 
Looking at minimize_and_clip
Coloring minimize_and_clip from file 'train_policy.py'
New namespace train_policy, old was 
Looking at pathlength
Coloring pathlength from file 'train_policy.py'
New namespace train_policy, old was 
Looking at setup_logger
Coloring setup_logger from file 'train_policy.py'
New namespace train_policy, old was 
Looking at train_PG
Coloring train_PG from file 'train_policy.py'
New namespace train_policy, old was 
Looking at __init__
Coloring __init__ from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at build_computation_graph
Coloring build_computation_graph from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at compute_advantage
Coloring compute_advantage from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at define_placeholders
Coloring define_placeholders from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at estimate_return
Coloring estimate_return from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at get_log_prob
Coloring get_log_prob from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at init_tf_sess
Coloring init_tf_sess from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at policy_forward_pass
Coloring policy_forward_pass from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at ppo_loss
Coloring ppo_loss from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at sample_action
Coloring sample_action from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at sample_trajectories
Coloring sample_trajectories from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at sample_trajectory
Coloring sample_trajectory from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at update_critic
Coloring update_critic from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at update_parameters
Coloring update_parameters from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at update_policy
Coloring update_policy from file 'train_policy.py'
New namespace train_policy.Agent, old was 
Looking at train_func
Coloring train_func from file 'train_policy.py'
New namespace train_policy.main, old was 
Looking at unpack_sample
Coloring unpack_sample from file 'train_policy.py'
New namespace train_policy.train_PG, old was 
<class 'pyan.writers.DotWriter'> running
Start subgraph 
Write node train_policy
Start subgraph train_policy
Write node Agent\n(train_policy.py:148)
Finish subgraph train_policy
Start subgraph train_policy
Write node build_critic\n(train_policy.py:110)
Finish subgraph train_policy
Start subgraph train_policy
Write node build_mlp\n(train_policy.py:41)
Finish subgraph train_policy
Start subgraph train_policy
Write node build_policy\n(train_policy.py:79)
Finish subgraph train_policy
Start subgraph train_policy
Write node build_rnn\n(train_policy.py:60)
Finish subgraph train_policy
Start subgraph train_policy
Write node discount_cumsum\n(train_policy.py:136)
Finish subgraph train_policy
Start subgraph train_policy
Write node discounted_return\n(train_policy.py:132)
Finish subgraph train_policy
Start subgraph train_policy
Write node main\n(train_policy.py:767)
Finish subgraph train_policy
Start subgraph train_policy
Write node minimize_and_clip\n(train_policy.py:29)
Finish subgraph train_policy
Start subgraph train_policy
Write node pathlength\n(train_policy.py:129)
Finish subgraph train_policy
Start subgraph train_policy
Write node setup_logger\n(train_policy.py:139)
Finish subgraph train_policy
Start subgraph train_policy
Write node train_PG\n(train_policy.py:579)
Finish subgraph train_policy
Start subgraph train_policy.Agent
Write node __init__\n(train_policy.py:149)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node build_computation_graph\n(train_policy.py:275)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node compute_advantage\n(train_policy.py:424)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node define_placeholders\n(train_policy.py:186)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node estimate_return\n(train_policy.py:473)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node get_log_prob\n(train_policy.py:253)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node init_tf_sess\n(train_policy.py:179)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node policy_forward_pass\n(train_policy.py:211)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node ppo_loss\n(train_policy.py:550)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node sample_action\n(train_policy.py:234)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node sample_trajectories\n(train_policy.py:328)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node sample_trajectory\n(train_policy.py:341)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node update_critic\n(train_policy.py:517)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node update_parameters\n(train_policy.py:497)
Finish subgraph train_policy.Agent
Start subgraph train_policy.Agent
Write node update_policy\n(train_policy.py:538)
Finish subgraph train_policy.Agent
Start subgraph train_policy.main
Write node train_func\n(train_policy.py:808)
Finish subgraph train_policy.main
Start subgraph train_policy.train_PG
Write node unpack_sample\n(train_policy.py:676)
Finish subgraph train_policy.train_PG
Finish subgraph 
