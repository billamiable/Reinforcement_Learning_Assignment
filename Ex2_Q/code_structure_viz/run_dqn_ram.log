========== pass 1, file 'run_dqn_ram.py' ==========
Scopes now: {'run_dqn_ram': <Scope: module >, 'run_dqn_ram.atari_model': <Scope: function atari_model>, 'run_dqn_ram.atari_learn': <Scope: function atari_learn>, 'run_dqn_ram.atari_learn.stopping_criterion': <Scope: function stopping_criterion>, 'run_dqn_ram.get_available_gpus': <Scope: function get_available_gpus>, 'run_dqn_ram.get_available_gpus.listcomp': <Scope: function listcomp>, 'run_dqn_ram.set_global_seeds': <Scope: function set_global_seeds>, 'run_dqn_ram.get_session': <Scope: function get_session>, 'run_dqn_ram.get_env': <Scope: function get_env>, 'run_dqn_ram.main': <Scope: function main>}
Module
Import ['argparse']
Set argparse in <Scope: module > to <Node module:argparse>
Use from <Node module:run_dqn_ram> to Import <Node module:argparse>
New edge added for Use from <Node module:run_dqn_ram> to Import <Node module:argparse>
Import ['gym']
Set gym in <Scope: module > to <Node module:gym>
Use from <Node module:run_dqn_ram> to Import <Node module:gym>
New edge added for Use from <Node module:run_dqn_ram> to Import <Node module:gym>
ImportFrom: from gym import ['wrappers']
Use from <Node module:run_dqn_ram> to ImportFrom <Node module:gym>
Set wrappers in <Scope: module > to <Node import:gym.wrappers>
From setting name wrappers to <Node import:gym.wrappers>
Import ['os.path as osp']
Set osp in <Scope: module > to <Node module:os.path>
Use from <Node module:run_dqn_ram> to Import <Node import:osp>
New edge added for Use from <Node module:run_dqn_ram> to Import <Node import:osp>
Import ['random']
Set random in <Scope: module > to <Node module:random>
Use from <Node module:run_dqn_ram> to Import <Node module:random>
New edge added for Use from <Node module:run_dqn_ram> to Import <Node module:random>
Import ['numpy as np']
Set np in <Scope: module > to <Node module:numpy>
Use from <Node module:run_dqn_ram> to Import <Node import:np>
New edge added for Use from <Node module:run_dqn_ram> to Import <Node import:np>
Import ['tensorflow as tf']
Set tf in <Scope: module > to <Node module:tensorflow>
Use from <Node module:run_dqn_ram> to Import <Node import:tf>
New edge added for Use from <Node module:run_dqn_ram> to Import <Node import:tf>
Import ['tensorflow.contrib.layers as layers']
Set layers in <Scope: module > to <Node module:tensorflow.contrib.layers>
Use from <Node module:run_dqn_ram> to Import <Node import:layers>
New edge added for Use from <Node module:run_dqn_ram> to Import <Node import:layers>
Import ['dqn']
Set dqn in <Scope: module > to <Node module:dqn>
Use from <Node module:run_dqn_ram> to Import <Node module:dqn>
New edge added for Use from <Node module:run_dqn_ram> to Import <Node module:dqn>
ImportFrom: from dqn_utils import ['*']
Use from <Node module:run_dqn_ram> to ImportFrom <Node module:dqn_utils>
New edge added for Use from <Node module:run_dqn_ram> to ImportFrom <Node module:dqn_utils>
Set: name * not in scope
From setting name * to <Node import:dqn_utils.*>
ImportFrom: from atari_wrappers import ['*']
Use from <Node module:run_dqn_ram> to ImportFrom <Node module:atari_wrappers>
New edge added for Use from <Node module:run_dqn_ram> to ImportFrom <Node module:atari_wrappers>
Set: name * not in scope
From setting name * to <Node import:atari_wrappers.*>
FunctionDef atari_model
Def from <Node module:run_dqn_ram> to Function <Node function:run_dqn_ram.atari_model>
Set atari_model in <Scope: module > to <Node function:run_dqn_ram.atari_model>
With (context manager)
Call tf.variable_scope
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
New edge added for Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Name reuse in context <class '_ast.Load'>
Get reuse in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Attribute variable_scope of tf in context <class '_ast.Load'>
Resolve tf.variable_scope in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variable_scope of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:run_dqn_ram.atari_model> to With <Node attribute:tensorflow.variable_scope>
New edge added for Use from <Node function:run_dqn_ram.atari_model> to <Node method:tensorflow.variable_scope.__enter__>
New edge added for Use from <Node function:run_dqn_ram.atari_model> to <Node method:tensorflow.variable_scope.__exit__>
Assign ['out'] ['ram_in']
Name ram_in in context <class '_ast.Load'>
Get ram_in in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
With (context manager)
Call tf.variable_scope
Attribute variable_scope of tf in context <class '_ast.Load'>
Resolve tf.variable_scope in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variable_scope of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:run_dqn_ram.atari_model> to With <Node attribute:tensorflow.variable_scope>
Assign ['out'] [<_ast.Call object at 0x10587ddd8>]
Call layers.fully_connected
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Attribute relu of tf.nn in context <class '_ast.Load'>
Resolve tf.nn.relu in context <class '_ast.Load'>
Resolve tf.nn in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr nn of <Node module:tensorflow>
Unresolved, returning attr relu of unknown
Use from <Node function:run_dqn_ram.atari_model> to <Node ???:*.relu> (target obj tf.nn not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.atari_model> to <Node ???:*.relu> (target obj tf.nn not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute fully_connected of layers in context <class '_ast.Load'>
Resolve layers.fully_connected in context <class '_ast.Load'>
Get layers in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow.contrib.layers>
Resolved to attr fully_connected of <Node module:tensorflow.contrib.layers>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected>
Assign ['out'] [<_ast.Call object at 0x1058df0b8>]
Call layers.fully_connected
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node attribute:tensorflow.contrib.layers.fully_connected>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node attribute:tensorflow.contrib.layers.fully_connected>
Attribute relu of tf.nn in context <class '_ast.Load'>
Resolve tf.nn.relu in context <class '_ast.Load'>
Resolve tf.nn in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr nn of <Node module:tensorflow>
Unresolved, returning attr relu of unknown
Use from <Node function:run_dqn_ram.atari_model> to <Node ???:*.relu> (target obj tf.nn not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute fully_connected of layers in context <class '_ast.Load'>
Resolve layers.fully_connected in context <class '_ast.Load'>
Get layers in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow.contrib.layers>
Resolved to attr fully_connected of <Node module:tensorflow.contrib.layers>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected>
Assign ['out'] [<_ast.Call object at 0x1058df358>]
Call layers.fully_connected
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node attribute:tensorflow.contrib.layers.fully_connected>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node attribute:tensorflow.contrib.layers.fully_connected>
Attribute relu of tf.nn in context <class '_ast.Load'>
Resolve tf.nn.relu in context <class '_ast.Load'>
Resolve tf.nn in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr nn of <Node module:tensorflow>
Unresolved, returning attr relu of unknown
Use from <Node function:run_dqn_ram.atari_model> to <Node ???:*.relu> (target obj tf.nn not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute fully_connected of layers in context <class '_ast.Load'>
Resolve layers.fully_connected in context <class '_ast.Load'>
Get layers in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow.contrib.layers>
Resolved to attr fully_connected of <Node module:tensorflow.contrib.layers>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected>
Assign ['out'] [<_ast.Call object at 0x1058df5f8>]
Call layers.fully_connected
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node attribute:tensorflow.contrib.layers.fully_connected>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node attribute:tensorflow.contrib.layers.fully_connected>
Name num_actions in context <class '_ast.Load'>
Get num_actions in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Attribute fully_connected of layers in context <class '_ast.Load'>
Resolve layers.fully_connected in context <class '_ast.Load'>
Get layers in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow.contrib.layers>
Resolved to attr fully_connected of <Node module:tensorflow.contrib.layers>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected>
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node attribute:tensorflow.contrib.layers.fully_connected>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node attribute:tensorflow.contrib.layers.fully_connected>
FunctionDef atari_learn
Def from <Node module:run_dqn_ram> to Function <Node function:run_dqn_ram.atari_learn>
Set atari_learn in <Scope: module > to <Node function:run_dqn_ram.atari_learn>
Assign ['num_iterations'] [<_ast.BinOp object at 0x1058df9e8>]
Call float
Name num_timesteps in context <class '_ast.Load'>
Get num_timesteps in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Name float in context <class '_ast.Load'>
Get float in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
Name num_iterations in context <class '_ast.Store'>
Set num_iterations in <Scope: function atari_learn> to <Node ???:*.float>
Assign ['lr_multiplier'] [<_ast.Num object at 0x1058dfb70>]
Name lr_multiplier in context <class '_ast.Store'>
Set lr_multiplier in <Scope: function atari_learn>: value None is not a Node
Assign ['lr_schedule'] [<_ast.Call object at 0x1058dfc18>]
Call PiecewiseSchedule
Name lr_multiplier in context <class '_ast.Load'>
Get lr_multiplier in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
Name num_iterations in context <class '_ast.Load'>
Get num_iterations in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.float>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
Name lr_multiplier in context <class '_ast.Load'>
Get lr_multiplier in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
Name num_iterations in context <class '_ast.Load'>
Get num_iterations in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.float>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
Name lr_multiplier in context <class '_ast.Load'>
Get lr_multiplier in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
Name lr_multiplier in context <class '_ast.Load'>
Get lr_multiplier in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
Name PiecewiseSchedule in context <class '_ast.Load'>
Get PiecewiseSchedule in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
Name lr_schedule in context <class '_ast.Store'>
Set lr_schedule in <Scope: function atari_learn> to <Node ???:*.PiecewiseSchedule>
Assign ['optimizer'] [<_ast.Call object at 0x1058e4278>]
Call dqn.OptimizerSpec
Attribute AdamOptimizer of tf.train in context <class '_ast.Load'>
Resolve tf.train.AdamOptimizer in context <class '_ast.Load'>
Resolve tf.train in context <class '_ast.Load'>
Get tf in <Scope: function atari_learn>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr train of <Node module:tensorflow>
Unresolved, returning attr AdamOptimizer of unknown
Use from <Node function:run_dqn_ram.atari_learn> to <Node ???:*.AdamOptimizer> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to <Node ???:*.AdamOptimizer> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call dict
Name dict in context <class '_ast.Load'>
Get dict in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.dict>
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.dict>
Name lr_schedule in context <class '_ast.Load'>
Get lr_schedule in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.PiecewiseSchedule>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
Attribute OptimizerSpec of dqn in context <class '_ast.Load'>
Resolve dqn.OptimizerSpec in context <class '_ast.Load'>
Get dqn in <Scope: function atari_learn>, found in <Scope: module >, value <Node module:dqn>
Resolved to attr OptimizerSpec of <Node module:dqn>
Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:dqn.OptimizerSpec> (target obj <Node module:dqn> known but target attr OptimizerSpec not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:dqn.OptimizerSpec> (target obj <Node module:dqn> known but target attr OptimizerSpec not resolved; maybe fwd ref or unanalyzed import)
Name optimizer in context <class '_ast.Store'>
Set optimizer in <Scope: function atari_learn> to <Node attribute:dqn.OptimizerSpec>
FunctionDef stopping_criterion
Def from <Node function:run_dqn_ram.atari_learn> to Function <Node function:run_dqn_ram.atari_learn.stopping_criterion>
Set stopping_criterion in <Scope: function atari_learn> to <Node function:run_dqn_ram.atari_learn.stopping_criterion>
Call <_ast.Call object at 0x1058e4748>.get_total_steps
Attribute get_total_steps of <_ast.Call object at 0x1058e4748> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x1058e4748>.get_total_steps in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_total_steps of unknown
Use from <Node function:run_dqn_ram.atari_learn.stopping_criterion> to <Node ???:*.get_total_steps> (target obj <_ast.Call object at 0x1058e4748> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.atari_learn.stopping_criterion> to <Node ???:*.get_total_steps> (target obj <_ast.Call object at 0x1058e4748> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name num_timesteps in context <class '_ast.Load'>
Get num_timesteps in <Scope: function stopping_criterion>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn.stopping_criterion> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
New edge added for Use from <Node function:run_dqn_ram.atari_learn.stopping_criterion> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Assign ['exploration_schedule'] [<_ast.Call object at 0x1058e4908>]
Call PiecewiseSchedule
Name num_iterations in context <class '_ast.Load'>
Get num_iterations in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.float>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
Name PiecewiseSchedule in context <class '_ast.Load'>
Get PiecewiseSchedule in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
Name exploration_schedule in context <class '_ast.Store'>
Set exploration_schedule in <Scope: function atari_learn> to <Node ???:*.PiecewiseSchedule>
Call dqn.learn
Name env in context <class '_ast.Load'>
Get env in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Name atari_model in context <class '_ast.Load'>
Get atari_model in <Scope: function atari_learn>, found in <Scope: module >, value <Node function:run_dqn_ram.atari_model>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node function:run_dqn_ram.atari_model>
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to Name <Node function:run_dqn_ram.atari_model>
Name optimizer in context <class '_ast.Load'>
Get optimizer in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node attribute:dqn.OptimizerSpec>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node attribute:dqn.OptimizerSpec>
Name session in context <class '_ast.Load'>
Get session in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Name exploration_schedule in context <class '_ast.Load'>
Get exploration_schedule in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.PiecewiseSchedule>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
Name stopping_criterion in context <class '_ast.Load'>
Get stopping_criterion in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node function:run_dqn_ram.atari_learn.stopping_criterion>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node function:run_dqn_ram.atari_learn.stopping_criterion>
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to Name <Node function:run_dqn_ram.atari_learn.stopping_criterion>
Attribute learn of dqn in context <class '_ast.Load'>
Resolve dqn.learn in context <class '_ast.Load'>
Get dqn in <Scope: function atari_learn>, found in <Scope: module >, value <Node module:dqn>
Resolved to attr learn of <Node module:dqn>
Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:dqn.learn> (target obj <Node module:dqn> known but target attr learn not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:dqn.learn> (target obj <Node module:dqn> known but target attr learn not resolved; maybe fwd ref or unanalyzed import)
Call env.close
Attribute close of env in context <class '_ast.Load'>
Resolve env.close in context <class '_ast.Load'>
Get env in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Resolved to attr close of <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:run_dqn_ram.atari_learn.^^^argument^^^.close> (target obj <Node ---:run_dqn_ram.atari_learn.^^^argument^^^> known but target attr close not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:run_dqn_ram.atari_learn.^^^argument^^^.close> (target obj <Node ---:run_dqn_ram.atari_learn.^^^argument^^^> known but target attr close not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_available_gpus
Def from <Node module:run_dqn_ram> to Function <Node function:run_dqn_ram.get_available_gpus>
Set get_available_gpus in <Scope: module > to <Node function:run_dqn_ram.get_available_gpus>
ImportFrom: from tensorflow.python.client import ['device_lib']
Use from <Node function:run_dqn_ram.get_available_gpus> to ImportFrom <Node module:tensorflow.python.client>
New edge added for Use from <Node function:run_dqn_ram.get_available_gpus> to ImportFrom <Node module:tensorflow.python.client>
Set device_lib in <Scope: function get_available_gpus> to <Node import:tensorflow.python.client.device_lib>
From setting name device_lib to <Node import:tensorflow.python.client.device_lib>
Assign ['local_device_protos'] [<_ast.Call object at 0x1058e95c0>]
Call device_lib.list_local_devices
Attribute list_local_devices of device_lib in context <class '_ast.Load'>
Resolve device_lib.list_local_devices in context <class '_ast.Load'>
Get device_lib in <Scope: function get_available_gpus>, found in <Scope: function get_available_gpus>, value <Node import:tensorflow.python.client.device_lib>
Resolved to attr list_local_devices of <Node import:tensorflow.python.client.device_lib>
Use from <Node function:run_dqn_ram.get_available_gpus> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices> (target obj <Node import:tensorflow.python.client.device_lib> known but target attr list_local_devices not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.get_available_gpus> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices> (target obj <Node import:tensorflow.python.client.device_lib> known but target attr list_local_devices not resolved; maybe fwd ref or unanalyzed import)
Name local_device_protos in context <class '_ast.Store'>
Set local_device_protos in <Scope: function get_available_gpus> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
ListComp
Attribute physical_device_desc of x in context <class '_ast.Load'>
Resolve x.physical_device_desc in context <class '_ast.Load'>
Get x in <Scope: function listcomp>: no Node value (or name not in scope)
Resolved to attr physical_device_desc of None
Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node ???:*.physical_device_desc> (target obj x not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node ???:*.physical_device_desc> (target obj x not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name local_device_protos in context <class '_ast.Load'>
Get local_device_protos in <Scope: function listcomp>, found in <Scope: function get_available_gpus>, value <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to Name <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
New edge added for Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to Name <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Attribute device_type of x in context <class '_ast.Load'>
Resolve x.device_type in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Resolved to attr device_type of <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices.device_type> (target obj <Node attribute:tensorflow.python.client.device_lib.list_local_devices> known but target attr device_type not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices.device_type> (target obj <Node attribute:tensorflow.python.client.device_lib.list_local_devices> known but target attr device_type not resolved; maybe fwd ref or unanalyzed import)
Def from <Node function:run_dqn_ram.get_available_gpus> to listcomp <Node namespace:run_dqn_ram.get_available_gpus.listcomp>
FunctionDef set_global_seeds
Def from <Node module:run_dqn_ram> to Function <Node function:run_dqn_ram.set_global_seeds>
Set set_global_seeds in <Scope: module > to <Node function:run_dqn_ram.set_global_seeds>
Import ['tensorflow as tf']
Set tf in <Scope: function set_global_seeds> to <Node module:tensorflow>
Use from <Node function:run_dqn_ram.set_global_seeds> to Import <Node import:tf>
New edge added for Use from <Node function:run_dqn_ram.set_global_seeds> to Import <Node import:tf>
Name ImportError in context <class '_ast.Load'>
Get ImportError in <Scope: function set_global_seeds>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ???:*.ImportError>
New edge added for Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ???:*.ImportError>
Call tf.set_random_seed
Name i in context <class '_ast.Load'>
Get i in <Scope: function set_global_seeds>, found in <Scope: function set_global_seeds>, value <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
New edge added for Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Attribute set_random_seed of tf in context <class '_ast.Load'>
Resolve tf.set_random_seed in context <class '_ast.Load'>
Get tf in <Scope: function set_global_seeds>, found in <Scope: function set_global_seeds>, value <Node module:tensorflow>
Resolved to attr set_random_seed of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:tensorflow.set_random_seed> (target obj <Node module:tensorflow> known but target attr set_random_seed not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:tensorflow.set_random_seed> (target obj <Node module:tensorflow> known but target attr set_random_seed not resolved; maybe fwd ref or unanalyzed import)
Call np.random.seed
Name i in context <class '_ast.Load'>
Get i in <Scope: function set_global_seeds>, found in <Scope: function set_global_seeds>, value <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Attribute seed of np.random in context <class '_ast.Load'>
Resolve np.random.seed in context <class '_ast.Load'>
Resolve np.random in context <class '_ast.Load'>
Get np in <Scope: function set_global_seeds>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr random of <Node module:numpy>
Unresolved, returning attr seed of unknown
Use from <Node function:run_dqn_ram.set_global_seeds> to <Node ???:*.seed> (target obj np.random not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.set_global_seeds> to <Node ???:*.seed> (target obj np.random not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call random.seed
Name i in context <class '_ast.Load'>
Get i in <Scope: function set_global_seeds>, found in <Scope: function set_global_seeds>, value <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Attribute seed of random in context <class '_ast.Load'>
Resolve random.seed in context <class '_ast.Load'>
Get random in <Scope: function set_global_seeds>, found in <Scope: module >, value <Node module:random>
Resolved to attr seed of <Node module:random>
Use from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:random.seed> (target obj <Node module:random> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:random.seed> resolves <Node ???:*.seed>; removing wildcard
New edge added for Use from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:random.seed> (target obj <Node module:random> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_session
Def from <Node module:run_dqn_ram> to Function <Node function:run_dqn_ram.get_session>
Set get_session in <Scope: module > to <Node function:run_dqn_ram.get_session>
Call tf.reset_default_graph
Attribute reset_default_graph of tf in context <class '_ast.Load'>
Resolve tf.reset_default_graph in context <class '_ast.Load'>
Get tf in <Scope: function get_session>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reset_default_graph of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.reset_default_graph> (target obj <Node module:tensorflow> known but target attr reset_default_graph not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.reset_default_graph> (target obj <Node module:tensorflow> known but target attr reset_default_graph not resolved; maybe fwd ref or unanalyzed import)
Assign ['tf_config'] [<_ast.Call object at 0x1058e7048>]
Call tf.ConfigProto
Attribute ConfigProto of tf in context <class '_ast.Load'>
Resolve tf.ConfigProto in context <class '_ast.Load'>
Get tf in <Scope: function get_session>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr ConfigProto of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.ConfigProto> (target obj <Node module:tensorflow> known but target attr ConfigProto not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.ConfigProto> (target obj <Node module:tensorflow> known but target attr ConfigProto not resolved; maybe fwd ref or unanalyzed import)
Name tf_config in context <class '_ast.Store'>
Set tf_config in <Scope: function get_session> to <Node attribute:tensorflow.ConfigProto>
Assign ['session'] [<_ast.Call object at 0x1058e7240>]
Call tf.Session
Name tf_config in context <class '_ast.Load'>
Get tf_config in <Scope: function get_session>, found in <Scope: function get_session>, value <Node attribute:tensorflow.ConfigProto>
Use from <Node function:run_dqn_ram.get_session> to Name <Node attribute:tensorflow.ConfigProto>
Attribute Session of tf in context <class '_ast.Load'>
Resolve tf.Session in context <class '_ast.Load'>
Get tf in <Scope: function get_session>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr Session of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.Session> (target obj <Node module:tensorflow> known but target attr Session not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.Session> (target obj <Node module:tensorflow> known but target attr Session not resolved; maybe fwd ref or unanalyzed import)
Name session in context <class '_ast.Store'>
Set session in <Scope: function get_session> to <Node attribute:tensorflow.Session>
Call print
Call get_available_gpus
Name get_available_gpus in context <class '_ast.Load'>
Get get_available_gpus in <Scope: function get_session>, found in <Scope: module >, value <Node function:run_dqn_ram.get_available_gpus>
Use from <Node function:run_dqn_ram.get_session> to Name <Node function:run_dqn_ram.get_available_gpus>
New edge added for Use from <Node function:run_dqn_ram.get_session> to Name <Node function:run_dqn_ram.get_available_gpus>
Name print in context <class '_ast.Load'>
Get print in <Scope: function get_session>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.get_session> to Name <Node ???:*.print>
New edge added for Use from <Node function:run_dqn_ram.get_session> to Name <Node ???:*.print>
Name session in context <class '_ast.Load'>
Get session in <Scope: function get_session>, found in <Scope: function get_session>, value <Node attribute:tensorflow.Session>
Use from <Node function:run_dqn_ram.get_session> to Name <Node attribute:tensorflow.Session>
FunctionDef get_env
Def from <Node module:run_dqn_ram> to Function <Node function:run_dqn_ram.get_env>
Set get_env in <Scope: module > to <Node function:run_dqn_ram.get_env>
Assign ['env'] [<_ast.Call object at 0x1058e7668>]
Call gym.make
Attribute make of gym in context <class '_ast.Load'>
Resolve gym.make in context <class '_ast.Load'>
Get gym in <Scope: function get_env>, found in <Scope: module >, value <Node module:gym>
Resolved to attr make of <Node module:gym>
Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.make> (target obj <Node module:gym> known but target attr make not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.make> (target obj <Node module:gym> known but target attr make not resolved; maybe fwd ref or unanalyzed import)
Name env in context <class '_ast.Store'>
Set env in <Scope: function get_env> to <Node attribute:gym.make>
Call set_global_seeds
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function get_env>, found in <Scope: function get_env>, value <Node ---:run_dqn_ram.get_env.^^^argument^^^>
Use from <Node function:run_dqn_ram.get_env> to Name <Node ---:run_dqn_ram.get_env.^^^argument^^^>
New edge added for Use from <Node function:run_dqn_ram.get_env> to Name <Node ---:run_dqn_ram.get_env.^^^argument^^^>
Name set_global_seeds in context <class '_ast.Load'>
Get set_global_seeds in <Scope: function get_env>, found in <Scope: module >, value <Node function:run_dqn_ram.set_global_seeds>
Use from <Node function:run_dqn_ram.get_env> to Name <Node function:run_dqn_ram.set_global_seeds>
New edge added for Use from <Node function:run_dqn_ram.get_env> to Name <Node function:run_dqn_ram.set_global_seeds>
Call env.seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function get_env>, found in <Scope: function get_env>, value <Node ---:run_dqn_ram.get_env.^^^argument^^^>
Use from <Node function:run_dqn_ram.get_env> to Name <Node ---:run_dqn_ram.get_env.^^^argument^^^>
Attribute seed of env in context <class '_ast.Load'>
Resolve env.seed in context <class '_ast.Load'>
Get env in <Scope: function get_env>, found in <Scope: function get_env>, value <Node attribute:gym.make>
Resolved to attr seed of <Node attribute:gym.make>
Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.make.seed> (target obj <Node attribute:gym.make> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.make.seed> (target obj <Node attribute:gym.make> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Assign ['expt_dir'] [<_ast.Str object at 0x1058e79b0>]
Name expt_dir in context <class '_ast.Store'>
Set expt_dir in <Scope: function get_env>: value None is not a Node
Assign ['env'] [<_ast.Call object at 0x1058e7a58>]
Call wrappers.Monitor
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_env>, found in <Scope: function get_env>, value <Node attribute:gym.make>
Use from <Node function:run_dqn_ram.get_env> to Name <Node attribute:gym.make>
Call osp.join
Name expt_dir in context <class '_ast.Load'>
Get expt_dir in <Scope: function get_env>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.get_env> to Name <Node ???:*.expt_dir>
New edge added for Use from <Node function:run_dqn_ram.get_env> to Name <Node ???:*.expt_dir>
Attribute join of osp in context <class '_ast.Load'>
Resolve osp.join in context <class '_ast.Load'>
Get osp in <Scope: function get_env>, found in <Scope: module >, value <Node module:os.path>
Resolved to attr join of <Node module:os.path>
Use from <Node function:run_dqn_ram.get_env> to <Node attribute:os.path.join> (target obj <Node module:os.path> known but target attr join not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.get_env> to <Node attribute:os.path.join> (target obj <Node module:os.path> known but target attr join not resolved; maybe fwd ref or unanalyzed import)
Attribute Monitor of wrappers in context <class '_ast.Load'>
Resolve wrappers.Monitor in context <class '_ast.Load'>
Get wrappers in <Scope: function get_env>, found in <Scope: module >, value <Node import:gym.wrappers>
Resolved to attr Monitor of <Node import:gym.wrappers>
Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.wrappers.Monitor> (target obj <Node import:gym.wrappers> known but target attr Monitor not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.wrappers.Monitor> (target obj <Node import:gym.wrappers> known but target attr Monitor not resolved; maybe fwd ref or unanalyzed import)
Name env in context <class '_ast.Store'>
Set env in <Scope: function get_env> to <Node attribute:gym.wrappers.Monitor>
Assign ['env'] [<_ast.Call object at 0x1058e7d30>]
Call wrap_deepmind_ram
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_env>, found in <Scope: function get_env>, value <Node attribute:gym.wrappers.Monitor>
Use from <Node function:run_dqn_ram.get_env> to Name <Node attribute:gym.wrappers.Monitor>
Name wrap_deepmind_ram in context <class '_ast.Load'>
Get wrap_deepmind_ram in <Scope: function get_env>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.get_env> to Name <Node ???:*.wrap_deepmind_ram>
New edge added for Use from <Node function:run_dqn_ram.get_env> to Name <Node ???:*.wrap_deepmind_ram>
Name env in context <class '_ast.Store'>
Set env in <Scope: function get_env> to <Node ???:*.wrap_deepmind_ram>
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_env>, found in <Scope: function get_env>, value <Node ???:*.wrap_deepmind_ram>
Use from <Node function:run_dqn_ram.get_env> to Name <Node ???:*.wrap_deepmind_ram>
FunctionDef main
Def from <Node module:run_dqn_ram> to Function <Node function:run_dqn_ram.main>
Set main in <Scope: module > to <Node function:run_dqn_ram.main>
Assign ['seed'] [<_ast.Num object at 0x1058e7f28>]
Name seed in context <class '_ast.Store'>
Set seed in <Scope: function main>: value None is not a Node
Assign ['env'] [<_ast.Call object at 0x1058e7fd0>]
Call get_env
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.main> to Name <Node ???:*.seed>
New edge added for Use from <Node function:run_dqn_ram.main> to Name <Node ???:*.seed>
Name get_env in context <class '_ast.Load'>
Get get_env in <Scope: function main>, found in <Scope: module >, value <Node function:run_dqn_ram.get_env>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_env>
New edge added for Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_env>
Name env in context <class '_ast.Store'>
Set env in <Scope: function main> to <Node function:run_dqn_ram.get_env>
Assign ['session'] [<_ast.Call object at 0x1058a9128>]
Call get_session
Name get_session in context <class '_ast.Load'>
Get get_session in <Scope: function main>, found in <Scope: module >, value <Node function:run_dqn_ram.get_session>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_session>
New edge added for Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_session>
Name session in context <class '_ast.Store'>
Set session in <Scope: function main> to <Node function:run_dqn_ram.get_session>
Call atari_learn
Name env in context <class '_ast.Load'>
Get env in <Scope: function main>, found in <Scope: function main>, value <Node function:run_dqn_ram.get_env>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_env>
Name session in context <class '_ast.Load'>
Get session in <Scope: function main>, found in <Scope: function main>, value <Node function:run_dqn_ram.get_session>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_session>
Call int
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.main> to Name <Node ???:*.int>
New edge added for Use from <Node function:run_dqn_ram.main> to Name <Node ???:*.int>
Name atari_learn in context <class '_ast.Load'>
Get atari_learn in <Scope: function main>, found in <Scope: module >, value <Node function:run_dqn_ram.atari_learn>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.atari_learn>
New edge added for Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.atari_learn>
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: module >: no Node value (or name not in scope)
Use from <Node module:run_dqn_ram> to Name <Node ???:*.__name__>
New edge added for Use from <Node module:run_dqn_ram> to Name <Node ???:*.__name__>
Call main
Name main in context <class '_ast.Load'>
Get main in <Scope: module >, found in <Scope: module >, value <Node function:run_dqn_ram.main>
Use from <Node module:run_dqn_ram> to Name <Node function:run_dqn_ram.main>
New edge added for Use from <Node module:run_dqn_ram> to Name <Node function:run_dqn_ram.main>
Resolving base classes
All base classes (non-recursive, local level only): {}
Resolving method resolution order (MRO) for all analyzed classes
Method resolution order (MRO) for all analyzed classes: {}
========== pass 2, file 'run_dqn_ram.py' ==========
Scopes now: {'run_dqn_ram': <Scope: module >, 'run_dqn_ram.atari_model': <Scope: function atari_model>, 'run_dqn_ram.atari_learn': <Scope: function atari_learn>, 'run_dqn_ram.atari_learn.stopping_criterion': <Scope: function stopping_criterion>, 'run_dqn_ram.get_available_gpus': <Scope: function get_available_gpus>, 'run_dqn_ram.get_available_gpus.listcomp': <Scope: function listcomp>, 'run_dqn_ram.set_global_seeds': <Scope: function set_global_seeds>, 'run_dqn_ram.get_session': <Scope: function get_session>, 'run_dqn_ram.get_env': <Scope: function get_env>, 'run_dqn_ram.main': <Scope: function main>}
Module
Import ['argparse']
Set argparse in <Scope: module > to <Node module:argparse>
Use from <Node module:run_dqn_ram> to Import <Node module:argparse>
Import ['gym']
Set gym in <Scope: module > to <Node module:gym>
Use from <Node module:run_dqn_ram> to Import <Node module:gym>
ImportFrom: from gym import ['wrappers']
Use from <Node module:run_dqn_ram> to ImportFrom <Node module:gym>
Set wrappers in <Scope: module > to <Node import:gym.wrappers>
From setting name wrappers to <Node import:gym.wrappers>
Import ['os.path as osp']
Set osp in <Scope: module > to <Node module:os.path>
Use from <Node module:run_dqn_ram> to Import <Node import:osp>
Import ['random']
Set random in <Scope: module > to <Node module:random>
Use from <Node module:run_dqn_ram> to Import <Node module:random>
Import ['numpy as np']
Set np in <Scope: module > to <Node module:numpy>
Use from <Node module:run_dqn_ram> to Import <Node import:np>
Import ['tensorflow as tf']
Set tf in <Scope: module > to <Node module:tensorflow>
Use from <Node module:run_dqn_ram> to Import <Node import:tf>
Import ['tensorflow.contrib.layers as layers']
Set layers in <Scope: module > to <Node module:tensorflow.contrib.layers>
Use from <Node module:run_dqn_ram> to Import <Node import:layers>
Import ['dqn']
Set dqn in <Scope: module > to <Node module:dqn>
Use from <Node module:run_dqn_ram> to Import <Node module:dqn>
ImportFrom: from dqn_utils import ['*']
Use from <Node module:run_dqn_ram> to ImportFrom <Node module:dqn_utils>
Set: name * not in scope
From setting name * to <Node import:dqn_utils.*>
ImportFrom: from atari_wrappers import ['*']
Use from <Node module:run_dqn_ram> to ImportFrom <Node module:atari_wrappers>
Set: name * not in scope
From setting name * to <Node import:atari_wrappers.*>
FunctionDef atari_model
Set atari_model in <Scope: module > to <Node function:run_dqn_ram.atari_model>
With (context manager)
Call tf.variable_scope
Name scope in context <class '_ast.Load'>
Get scope in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Name reuse in context <class '_ast.Load'>
Get reuse in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Attribute variable_scope of tf in context <class '_ast.Load'>
Resolve tf.variable_scope in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variable_scope of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:run_dqn_ram.atari_model> to With <Node attribute:tensorflow.variable_scope>
Assign ['out'] ['ram_in']
Name ram_in in context <class '_ast.Load'>
Get ram_in in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
With (context manager)
Call tf.variable_scope
Attribute variable_scope of tf in context <class '_ast.Load'>
Resolve tf.variable_scope in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variable_scope of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.variable_scope> (target obj <Node module:tensorflow> known but target attr variable_scope not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:run_dqn_ram.atari_model> to With <Node attribute:tensorflow.variable_scope>
Assign ['out'] [<_ast.Call object at 0x105871898>]
Call layers.fully_connected
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Attribute relu of tf.nn in context <class '_ast.Load'>
Resolve tf.nn.relu in context <class '_ast.Load'>
Resolve tf.nn in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr nn of <Node module:tensorflow>
Unresolved, returning attr relu of unknown
Use from <Node function:run_dqn_ram.atari_model> to <Node ???:*.relu> (target obj tf.nn not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute fully_connected of layers in context <class '_ast.Load'>
Resolve layers.fully_connected in context <class '_ast.Load'>
Get layers in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow.contrib.layers>
Resolved to attr fully_connected of <Node module:tensorflow.contrib.layers>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected>
Assign ['out'] [<_ast.Call object at 0x1058732e8>]
Call layers.fully_connected
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node attribute:tensorflow.contrib.layers.fully_connected>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node attribute:tensorflow.contrib.layers.fully_connected>
Attribute relu of tf.nn in context <class '_ast.Load'>
Resolve tf.nn.relu in context <class '_ast.Load'>
Resolve tf.nn in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr nn of <Node module:tensorflow>
Unresolved, returning attr relu of unknown
Use from <Node function:run_dqn_ram.atari_model> to <Node ???:*.relu> (target obj tf.nn not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute fully_connected of layers in context <class '_ast.Load'>
Resolve layers.fully_connected in context <class '_ast.Load'>
Get layers in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow.contrib.layers>
Resolved to attr fully_connected of <Node module:tensorflow.contrib.layers>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected>
Assign ['out'] [<_ast.Call object at 0x105873588>]
Call layers.fully_connected
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node attribute:tensorflow.contrib.layers.fully_connected>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node attribute:tensorflow.contrib.layers.fully_connected>
Attribute relu of tf.nn in context <class '_ast.Load'>
Resolve tf.nn.relu in context <class '_ast.Load'>
Resolve tf.nn in context <class '_ast.Load'>
Get tf in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr nn of <Node module:tensorflow>
Unresolved, returning attr relu of unknown
Use from <Node function:run_dqn_ram.atari_model> to <Node ???:*.relu> (target obj tf.nn not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute fully_connected of layers in context <class '_ast.Load'>
Resolve layers.fully_connected in context <class '_ast.Load'>
Get layers in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow.contrib.layers>
Resolved to attr fully_connected of <Node module:tensorflow.contrib.layers>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected>
Assign ['out'] [<_ast.Call object at 0x105873828>]
Call layers.fully_connected
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node attribute:tensorflow.contrib.layers.fully_connected>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node attribute:tensorflow.contrib.layers.fully_connected>
Name num_actions in context <class '_ast.Load'>
Get num_actions in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node ---:run_dqn_ram.atari_model.^^^argument^^^>
Attribute fully_connected of layers in context <class '_ast.Load'>
Resolve layers.fully_connected in context <class '_ast.Load'>
Get layers in <Scope: function atari_model>, found in <Scope: module >, value <Node module:tensorflow.contrib.layers>
Resolved to attr fully_connected of <Node module:tensorflow.contrib.layers>
Use from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> (target obj <Node module:tensorflow.contrib.layers> known but target attr fully_connected not resolved; maybe fwd ref or unanalyzed import)
Name out in context <class '_ast.Store'>
Set out in <Scope: function atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected>
Name out in context <class '_ast.Load'>
Get out in <Scope: function atari_model>, found in <Scope: function atari_model>, value <Node attribute:tensorflow.contrib.layers.fully_connected>
Use from <Node function:run_dqn_ram.atari_model> to Name <Node attribute:tensorflow.contrib.layers.fully_connected>
FunctionDef atari_learn
Set atari_learn in <Scope: module > to <Node function:run_dqn_ram.atari_learn>
Assign ['num_iterations'] [<_ast.BinOp object at 0x105873be0>]
Call float
Name num_timesteps in context <class '_ast.Load'>
Get num_timesteps in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Name float in context <class '_ast.Load'>
Get float in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
Name num_iterations in context <class '_ast.Store'>
Set num_iterations in <Scope: function atari_learn> to <Node ???:*.float>
Assign ['lr_multiplier'] [<_ast.Num object at 0x105873d68>]
Name lr_multiplier in context <class '_ast.Store'>
Set lr_multiplier in <Scope: function atari_learn>: value None is not a Node
Assign ['lr_schedule'] [<_ast.Call object at 0x105873e10>]
Call PiecewiseSchedule
Name lr_multiplier in context <class '_ast.Load'>
Get lr_multiplier in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
Name num_iterations in context <class '_ast.Load'>
Get num_iterations in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.float>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
Name lr_multiplier in context <class '_ast.Load'>
Get lr_multiplier in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
Name num_iterations in context <class '_ast.Load'>
Get num_iterations in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.float>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
Name lr_multiplier in context <class '_ast.Load'>
Get lr_multiplier in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
Name lr_multiplier in context <class '_ast.Load'>
Get lr_multiplier in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.lr_multiplier>
Name PiecewiseSchedule in context <class '_ast.Load'>
Get PiecewiseSchedule in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
Name lr_schedule in context <class '_ast.Store'>
Set lr_schedule in <Scope: function atari_learn> to <Node ???:*.PiecewiseSchedule>
Assign ['optimizer'] [<_ast.Call object at 0x105877470>]
Call dqn.OptimizerSpec
Attribute AdamOptimizer of tf.train in context <class '_ast.Load'>
Resolve tf.train.AdamOptimizer in context <class '_ast.Load'>
Resolve tf.train in context <class '_ast.Load'>
Get tf in <Scope: function atari_learn>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr train of <Node module:tensorflow>
Unresolved, returning attr AdamOptimizer of unknown
Use from <Node function:run_dqn_ram.atari_learn> to <Node ???:*.AdamOptimizer> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call dict
Name dict in context <class '_ast.Load'>
Get dict in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.dict>
Name lr_schedule in context <class '_ast.Load'>
Get lr_schedule in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.PiecewiseSchedule>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
Attribute OptimizerSpec of dqn in context <class '_ast.Load'>
Resolve dqn.OptimizerSpec in context <class '_ast.Load'>
Get dqn in <Scope: function atari_learn>, found in <Scope: module >, value <Node module:dqn>
Resolved to attr OptimizerSpec of <Node module:dqn>
Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:dqn.OptimizerSpec> (target obj <Node module:dqn> known but target attr OptimizerSpec not resolved; maybe fwd ref or unanalyzed import)
Name optimizer in context <class '_ast.Store'>
Set optimizer in <Scope: function atari_learn> to <Node attribute:dqn.OptimizerSpec>
FunctionDef stopping_criterion
Set stopping_criterion in <Scope: function atari_learn> to <Node function:run_dqn_ram.atari_learn.stopping_criterion>
Call <_ast.Call object at 0x105877940>.get_total_steps
Attribute get_total_steps of <_ast.Call object at 0x105877940> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x105877940>.get_total_steps in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_total_steps of unknown
Use from <Node function:run_dqn_ram.atari_learn.stopping_criterion> to <Node ???:*.get_total_steps> (target obj <_ast.Call object at 0x105877940> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name num_timesteps in context <class '_ast.Load'>
Get num_timesteps in <Scope: function stopping_criterion>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn.stopping_criterion> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Assign ['exploration_schedule'] [<_ast.Call object at 0x105877ac8>]
Call PiecewiseSchedule
Name num_iterations in context <class '_ast.Load'>
Get num_iterations in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.float>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.float>
Name PiecewiseSchedule in context <class '_ast.Load'>
Get PiecewiseSchedule in <Scope: function atari_learn>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
Name exploration_schedule in context <class '_ast.Store'>
Set exploration_schedule in <Scope: function atari_learn> to <Node ???:*.PiecewiseSchedule>
Call dqn.learn
Name env in context <class '_ast.Load'>
Get env in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Name atari_model in context <class '_ast.Load'>
Get atari_model in <Scope: function atari_learn>, found in <Scope: module >, value <Node function:run_dqn_ram.atari_model>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node function:run_dqn_ram.atari_model>
Name optimizer in context <class '_ast.Load'>
Get optimizer in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node attribute:dqn.OptimizerSpec>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node attribute:dqn.OptimizerSpec>
Name session in context <class '_ast.Load'>
Get session in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Name exploration_schedule in context <class '_ast.Load'>
Get exploration_schedule in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ???:*.PiecewiseSchedule>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node ???:*.PiecewiseSchedule>
Name stopping_criterion in context <class '_ast.Load'>
Get stopping_criterion in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node function:run_dqn_ram.atari_learn.stopping_criterion>
Use from <Node function:run_dqn_ram.atari_learn> to Name <Node function:run_dqn_ram.atari_learn.stopping_criterion>
Attribute learn of dqn in context <class '_ast.Load'>
Resolve dqn.learn in context <class '_ast.Load'>
Get dqn in <Scope: function atari_learn>, found in <Scope: module >, value <Node module:dqn>
Resolved to attr learn of <Node module:dqn>
Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:dqn.learn> (target obj <Node module:dqn> known but target attr learn not resolved; maybe fwd ref or unanalyzed import)
Call env.close
Attribute close of env in context <class '_ast.Load'>
Resolve env.close in context <class '_ast.Load'>
Get env in <Scope: function atari_learn>, found in <Scope: function atari_learn>, value <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Resolved to attr close of <Node ---:run_dqn_ram.atari_learn.^^^argument^^^>
Use from <Node function:run_dqn_ram.atari_learn> to <Node attribute:run_dqn_ram.atari_learn.^^^argument^^^.close> (target obj <Node ---:run_dqn_ram.atari_learn.^^^argument^^^> known but target attr close not resolved; maybe fwd ref or unanalyzed import)
FunctionDef get_available_gpus
Set get_available_gpus in <Scope: module > to <Node function:run_dqn_ram.get_available_gpus>
ImportFrom: from tensorflow.python.client import ['device_lib']
Use from <Node function:run_dqn_ram.get_available_gpus> to ImportFrom <Node module:tensorflow.python.client>
Set device_lib in <Scope: function get_available_gpus> to <Node import:tensorflow.python.client.device_lib>
From setting name device_lib to <Node import:tensorflow.python.client.device_lib>
Assign ['local_device_protos'] [<_ast.Call object at 0x10587e780>]
Call device_lib.list_local_devices
Attribute list_local_devices of device_lib in context <class '_ast.Load'>
Resolve device_lib.list_local_devices in context <class '_ast.Load'>
Get device_lib in <Scope: function get_available_gpus>, found in <Scope: function get_available_gpus>, value <Node import:tensorflow.python.client.device_lib>
Resolved to attr list_local_devices of <Node import:tensorflow.python.client.device_lib>
Use from <Node function:run_dqn_ram.get_available_gpus> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices> (target obj <Node import:tensorflow.python.client.device_lib> known but target attr list_local_devices not resolved; maybe fwd ref or unanalyzed import)
Name local_device_protos in context <class '_ast.Store'>
Set local_device_protos in <Scope: function get_available_gpus> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
ListComp
Attribute physical_device_desc of x in context <class '_ast.Load'>
Resolve x.physical_device_desc in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Resolved to attr physical_device_desc of <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices.physical_device_desc> (target obj <Node attribute:tensorflow.python.client.device_lib.list_local_devices> known but target attr physical_device_desc not resolved; maybe fwd ref or unanalyzed import)
Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices.physical_device_desc> resolves <Node ???:*.physical_device_desc>; removing wildcard
New edge added for Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices.physical_device_desc> (target obj <Node attribute:tensorflow.python.client.device_lib.list_local_devices> known but target attr physical_device_desc not resolved; maybe fwd ref or unanalyzed import)
Name local_device_protos in context <class '_ast.Load'>
Get local_device_protos in <Scope: function listcomp>, found in <Scope: function get_available_gpus>, value <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to Name <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Name x in context <class '_ast.Store'>
Set x in <Scope: function listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Attribute device_type of x in context <class '_ast.Load'>
Resolve x.device_type in context <class '_ast.Load'>
Get x in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Resolved to attr device_type of <Node attribute:tensorflow.python.client.device_lib.list_local_devices>
Use from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices.device_type> (target obj <Node attribute:tensorflow.python.client.device_lib.list_local_devices> known but target attr device_type not resolved; maybe fwd ref or unanalyzed import)
FunctionDef set_global_seeds
Set set_global_seeds in <Scope: module > to <Node function:run_dqn_ram.set_global_seeds>
Import ['tensorflow as tf']
Set tf in <Scope: function set_global_seeds> to <Node module:tensorflow>
Use from <Node function:run_dqn_ram.set_global_seeds> to Import <Node import:tf>
Name ImportError in context <class '_ast.Load'>
Get ImportError in <Scope: function set_global_seeds>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ???:*.ImportError>
Call tf.set_random_seed
Name i in context <class '_ast.Load'>
Get i in <Scope: function set_global_seeds>, found in <Scope: function set_global_seeds>, value <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Attribute set_random_seed of tf in context <class '_ast.Load'>
Resolve tf.set_random_seed in context <class '_ast.Load'>
Get tf in <Scope: function set_global_seeds>, found in <Scope: function set_global_seeds>, value <Node module:tensorflow>
Resolved to attr set_random_seed of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:tensorflow.set_random_seed> (target obj <Node module:tensorflow> known but target attr set_random_seed not resolved; maybe fwd ref or unanalyzed import)
Call np.random.seed
Name i in context <class '_ast.Load'>
Get i in <Scope: function set_global_seeds>, found in <Scope: function set_global_seeds>, value <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Attribute seed of np.random in context <class '_ast.Load'>
Resolve np.random.seed in context <class '_ast.Load'>
Resolve np.random in context <class '_ast.Load'>
Get np in <Scope: function set_global_seeds>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr random of <Node module:numpy>
Unresolved, returning attr seed of unknown
Use from <Node function:run_dqn_ram.set_global_seeds> to <Node ???:*.seed> (target obj np.random not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:run_dqn_ram.set_global_seeds> to <Node ???:*.seed> (target obj np.random not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call random.seed
Name i in context <class '_ast.Load'>
Get i in <Scope: function set_global_seeds>, found in <Scope: function set_global_seeds>, value <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Use from <Node function:run_dqn_ram.set_global_seeds> to Name <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^>
Attribute seed of random in context <class '_ast.Load'>
Resolve random.seed in context <class '_ast.Load'>
Get random in <Scope: function set_global_seeds>, found in <Scope: module >, value <Node module:random>
Resolved to attr seed of <Node module:random>
Use from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:random.seed> (target obj <Node module:random> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Use from <Node function:run_dqn_ram.set_global_seeds> to <Node module:random> resolves <Node ???:*.seed>; removing wildcard
FunctionDef get_session
Set get_session in <Scope: module > to <Node function:run_dqn_ram.get_session>
Call tf.reset_default_graph
Attribute reset_default_graph of tf in context <class '_ast.Load'>
Resolve tf.reset_default_graph in context <class '_ast.Load'>
Get tf in <Scope: function get_session>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr reset_default_graph of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.reset_default_graph> (target obj <Node module:tensorflow> known but target attr reset_default_graph not resolved; maybe fwd ref or unanalyzed import)
Assign ['tf_config'] [<_ast.Call object at 0x105883208>]
Call tf.ConfigProto
Attribute ConfigProto of tf in context <class '_ast.Load'>
Resolve tf.ConfigProto in context <class '_ast.Load'>
Get tf in <Scope: function get_session>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr ConfigProto of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.ConfigProto> (target obj <Node module:tensorflow> known but target attr ConfigProto not resolved; maybe fwd ref or unanalyzed import)
Name tf_config in context <class '_ast.Store'>
Set tf_config in <Scope: function get_session> to <Node attribute:tensorflow.ConfigProto>
Assign ['session'] [<_ast.Call object at 0x105883400>]
Call tf.Session
Name tf_config in context <class '_ast.Load'>
Get tf_config in <Scope: function get_session>, found in <Scope: function get_session>, value <Node attribute:tensorflow.ConfigProto>
Use from <Node function:run_dqn_ram.get_session> to Name <Node attribute:tensorflow.ConfigProto>
Attribute Session of tf in context <class '_ast.Load'>
Resolve tf.Session in context <class '_ast.Load'>
Get tf in <Scope: function get_session>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr Session of <Node module:tensorflow>
Use from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.Session> (target obj <Node module:tensorflow> known but target attr Session not resolved; maybe fwd ref or unanalyzed import)
Name session in context <class '_ast.Store'>
Set session in <Scope: function get_session> to <Node attribute:tensorflow.Session>
Call print
Call get_available_gpus
Name get_available_gpus in context <class '_ast.Load'>
Get get_available_gpus in <Scope: function get_session>, found in <Scope: module >, value <Node function:run_dqn_ram.get_available_gpus>
Use from <Node function:run_dqn_ram.get_session> to Name <Node function:run_dqn_ram.get_available_gpus>
Name print in context <class '_ast.Load'>
Get print in <Scope: function get_session>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.get_session> to Name <Node ???:*.print>
Name session in context <class '_ast.Load'>
Get session in <Scope: function get_session>, found in <Scope: function get_session>, value <Node attribute:tensorflow.Session>
Use from <Node function:run_dqn_ram.get_session> to Name <Node attribute:tensorflow.Session>
FunctionDef get_env
Set get_env in <Scope: module > to <Node function:run_dqn_ram.get_env>
Assign ['env'] [<_ast.Call object at 0x105883828>]
Call gym.make
Attribute make of gym in context <class '_ast.Load'>
Resolve gym.make in context <class '_ast.Load'>
Get gym in <Scope: function get_env>, found in <Scope: module >, value <Node module:gym>
Resolved to attr make of <Node module:gym>
Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.make> (target obj <Node module:gym> known but target attr make not resolved; maybe fwd ref or unanalyzed import)
Name env in context <class '_ast.Store'>
Set env in <Scope: function get_env> to <Node attribute:gym.make>
Call set_global_seeds
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function get_env>, found in <Scope: function get_env>, value <Node ---:run_dqn_ram.get_env.^^^argument^^^>
Use from <Node function:run_dqn_ram.get_env> to Name <Node ---:run_dqn_ram.get_env.^^^argument^^^>
Name set_global_seeds in context <class '_ast.Load'>
Get set_global_seeds in <Scope: function get_env>, found in <Scope: module >, value <Node function:run_dqn_ram.set_global_seeds>
Use from <Node function:run_dqn_ram.get_env> to Name <Node function:run_dqn_ram.set_global_seeds>
Call env.seed
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function get_env>, found in <Scope: function get_env>, value <Node ---:run_dqn_ram.get_env.^^^argument^^^>
Use from <Node function:run_dqn_ram.get_env> to Name <Node ---:run_dqn_ram.get_env.^^^argument^^^>
Attribute seed of env in context <class '_ast.Load'>
Resolve env.seed in context <class '_ast.Load'>
Get env in <Scope: function get_env>, found in <Scope: function get_env>, value <Node attribute:gym.make>
Resolved to attr seed of <Node attribute:gym.make>
Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.make.seed> (target obj <Node attribute:gym.make> known but target attr seed not resolved; maybe fwd ref or unanalyzed import)
Assign ['expt_dir'] [<_ast.Str object at 0x105883b70>]
Name expt_dir in context <class '_ast.Store'>
Set expt_dir in <Scope: function get_env>: value None is not a Node
Assign ['env'] [<_ast.Call object at 0x105883c18>]
Call wrappers.Monitor
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_env>, found in <Scope: function get_env>, value <Node attribute:gym.make>
Use from <Node function:run_dqn_ram.get_env> to Name <Node attribute:gym.make>
Call osp.join
Name expt_dir in context <class '_ast.Load'>
Get expt_dir in <Scope: function get_env>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.get_env> to Name <Node ???:*.expt_dir>
Attribute join of osp in context <class '_ast.Load'>
Resolve osp.join in context <class '_ast.Load'>
Get osp in <Scope: function get_env>, found in <Scope: module >, value <Node module:os.path>
Resolved to attr join of <Node module:os.path>
Use from <Node function:run_dqn_ram.get_env> to <Node attribute:os.path.join> (target obj <Node module:os.path> known but target attr join not resolved; maybe fwd ref or unanalyzed import)
Attribute Monitor of wrappers in context <class '_ast.Load'>
Resolve wrappers.Monitor in context <class '_ast.Load'>
Get wrappers in <Scope: function get_env>, found in <Scope: module >, value <Node import:gym.wrappers>
Resolved to attr Monitor of <Node import:gym.wrappers>
Use from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.wrappers.Monitor> (target obj <Node import:gym.wrappers> known but target attr Monitor not resolved; maybe fwd ref or unanalyzed import)
Name env in context <class '_ast.Store'>
Set env in <Scope: function get_env> to <Node attribute:gym.wrappers.Monitor>
Assign ['env'] [<_ast.Call object at 0x105883ef0>]
Call wrap_deepmind_ram
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_env>, found in <Scope: function get_env>, value <Node attribute:gym.wrappers.Monitor>
Use from <Node function:run_dqn_ram.get_env> to Name <Node attribute:gym.wrappers.Monitor>
Name wrap_deepmind_ram in context <class '_ast.Load'>
Get wrap_deepmind_ram in <Scope: function get_env>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.get_env> to Name <Node ???:*.wrap_deepmind_ram>
Name env in context <class '_ast.Store'>
Set env in <Scope: function get_env> to <Node ???:*.wrap_deepmind_ram>
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_env>, found in <Scope: function get_env>, value <Node ???:*.wrap_deepmind_ram>
Use from <Node function:run_dqn_ram.get_env> to Name <Node ???:*.wrap_deepmind_ram>
FunctionDef main
Set main in <Scope: module > to <Node function:run_dqn_ram.main>
Assign ['seed'] [<_ast.Num object at 0x105887128>]
Name seed in context <class '_ast.Store'>
Set seed in <Scope: function main>: value None is not a Node
Assign ['env'] [<_ast.Call object at 0x1058871d0>]
Call get_env
Name seed in context <class '_ast.Load'>
Get seed in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.main> to Name <Node ???:*.seed>
Name get_env in context <class '_ast.Load'>
Get get_env in <Scope: function main>, found in <Scope: module >, value <Node function:run_dqn_ram.get_env>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_env>
Name env in context <class '_ast.Store'>
Set env in <Scope: function main> to <Node function:run_dqn_ram.get_env>
Assign ['session'] [<_ast.Call object at 0x1058872e8>]
Call get_session
Name get_session in context <class '_ast.Load'>
Get get_session in <Scope: function main>, found in <Scope: module >, value <Node function:run_dqn_ram.get_session>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_session>
Name session in context <class '_ast.Store'>
Set session in <Scope: function main> to <Node function:run_dqn_ram.get_session>
Call atari_learn
Name env in context <class '_ast.Load'>
Get env in <Scope: function main>, found in <Scope: function main>, value <Node function:run_dqn_ram.get_env>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_env>
Name session in context <class '_ast.Load'>
Get session in <Scope: function main>, found in <Scope: function main>, value <Node function:run_dqn_ram.get_session>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.get_session>
Call int
Name int in context <class '_ast.Load'>
Get int in <Scope: function main>: no Node value (or name not in scope)
Use from <Node function:run_dqn_ram.main> to Name <Node ???:*.int>
Name atari_learn in context <class '_ast.Load'>
Get atari_learn in <Scope: function main>, found in <Scope: module >, value <Node function:run_dqn_ram.atari_learn>
Use from <Node function:run_dqn_ram.main> to Name <Node function:run_dqn_ram.atari_learn>
Name __name__ in context <class '_ast.Load'>
Get __name__ in <Scope: module >: no Node value (or name not in scope)
Use from <Node module:run_dqn_ram> to Name <Node ???:*.__name__>
Call main
Name main in context <class '_ast.Load'>
Get main in <Scope: module >, found in <Scope: module >, value <Node function:run_dqn_ram.main>
Use from <Node module:run_dqn_ram> to Name <Node function:run_dqn_ram.main>
Use from <Node function:run_dqn_ram.main> to <Node attribute:random.seed> resolves <Node ???:*.seed>; removing wildcard
Expanding unknowns: new uses edge from <Node function:run_dqn_ram.main> to <Node attribute:random.seed>
Expanding unknowns: new uses edge from <Node function:run_dqn_ram.main> to <Node attribute:gym.make.seed>
Contracting non-existent from <Node module:run_dqn_ram> to <Node import:layers> as <Node ---:*.layers>
Contracting non-existent from <Node module:run_dqn_ram> to <Node module:gym> as <Node ---:*.gym>
Contracting non-existent from <Node module:run_dqn_ram> to <Node module:dqn> as <Node ---:*.dqn>
Contracting non-existent from <Node module:run_dqn_ram> to <Node import:osp> as <Node ---:*.osp>
Contracting non-existent from <Node module:run_dqn_ram> to <Node module:atari_wrappers> as <Node ---:*.atari_wrappers>
Contracting non-existent from <Node module:run_dqn_ram> to <Node module:random> as <Node ---:*.random>
Contracting non-existent from <Node module:run_dqn_ram> to <Node import:tf> as <Node ---:*.tf>
Contracting non-existent from <Node module:run_dqn_ram> to <Node import:np> as <Node ---:*.np>
Contracting non-existent from <Node module:run_dqn_ram> to <Node module:dqn_utils> as <Node ---:*.dqn_utils>
Contracting non-existent from <Node module:run_dqn_ram> to <Node module:argparse> as <Node ---:*.argparse>
Contracting non-existent from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.variable_scope> as <Node ---:*.variable_scope>
Contracting non-existent from <Node function:run_dqn_ram.atari_model> to <Node method:tensorflow.variable_scope.__exit__> as <Node ---:*.__exit__>
Contracting non-existent from <Node function:run_dqn_ram.atari_model> to <Node method:tensorflow.variable_scope.__enter__> as <Node ---:*.__enter__>
Contracting non-existent from <Node function:run_dqn_ram.atari_model> to <Node ---:run_dqn_ram.atari_model.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:run_dqn_ram.atari_model> to <Node attribute:tensorflow.contrib.layers.fully_connected> as <Node ---:*.fully_connected>
Contracting non-existent from <Node function:run_dqn_ram.atari_learn> to <Node ---:run_dqn_ram.atari_learn.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:run_dqn_ram.atari_learn> to <Node attribute:dqn.OptimizerSpec> as <Node ---:*.OptimizerSpec>
Contracting non-existent from <Node function:run_dqn_ram.atari_learn> to <Node attribute:dqn.learn> as <Node ---:*.learn>
Contracting non-existent from <Node function:run_dqn_ram.atari_learn> to <Node attribute:run_dqn_ram.atari_learn.^^^argument^^^.close> as <Node ---:*.close>
Contracting non-existent from <Node function:run_dqn_ram.atari_learn.stopping_criterion> to <Node ---:run_dqn_ram.atari_learn.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:run_dqn_ram.get_available_gpus> to <Node module:tensorflow.python.client> as <Node ---:*.tensorflow.python.client>
Contracting non-existent from <Node function:run_dqn_ram.get_available_gpus> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices> as <Node ---:*.list_local_devices>
Contracting non-existent from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices.physical_device_desc> as <Node ???:*.physical_device_desc>
Contracting non-existent from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices> as <Node ---:*.list_local_devices>
Contracting non-existent from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node attribute:tensorflow.python.client.device_lib.list_local_devices.device_type> as <Node ---:*.device_type>
Contracting non-existent from <Node function:run_dqn_ram.set_global_seeds> to <Node ---:run_dqn_ram.set_global_seeds.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:random.seed> as <Node ???:*.seed>
Contracting non-existent from <Node function:run_dqn_ram.set_global_seeds> to <Node import:tf> as <Node ---:*.tf>
Contracting non-existent from <Node function:run_dqn_ram.set_global_seeds> to <Node attribute:tensorflow.set_random_seed> as <Node ---:*.set_random_seed>
Contracting non-existent from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.ConfigProto> as <Node ---:*.ConfigProto>
Contracting non-existent from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.Session> as <Node ---:*.Session>
Contracting non-existent from <Node function:run_dqn_ram.get_session> to <Node attribute:tensorflow.reset_default_graph> as <Node ---:*.reset_default_graph>
Contracting non-existent from <Node function:run_dqn_ram.get_env> to <Node ---:run_dqn_ram.get_env.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:run_dqn_ram.get_env> to <Node attribute:os.path.join> as <Node ---:*.join>
Contracting non-existent from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.wrappers.Monitor> as <Node ---:*.Monitor>
Contracting non-existent from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.make.seed> as <Node ???:*.seed>
Contracting non-existent from <Node function:run_dqn_ram.get_env> to <Node attribute:gym.make> as <Node ---:*.make>
Contracting non-existent from <Node function:run_dqn_ram.main> to <Node attribute:random.seed> as <Node ???:*.seed>
Contracting non-existent from <Node function:run_dqn_ram.main> to <Node attribute:gym.make.seed> as <Node ???:*.seed>
Collapsing inner from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node function:run_dqn_ram.get_available_gpus>, uses <Node ---:*.list_local_devices>
Collapsing inner from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node function:run_dqn_ram.get_available_gpus>, uses <Node ---:*.device_type>
Collapsing inner from <Node namespace:run_dqn_ram.get_available_gpus.listcomp> to <Node function:run_dqn_ram.get_available_gpus>, uses <Node ???:*.physical_device_desc>
Looking at run_dqn_ram
Coloring run_dqn_ram from file 'run_dqn_ram.py'
Looking at atari_learn
Coloring atari_learn from file 'run_dqn_ram.py'
New namespace run_dqn_ram, old was 
Looking at atari_model
Coloring atari_model from file 'run_dqn_ram.py'
New namespace run_dqn_ram, old was 
Looking at get_available_gpus
Coloring get_available_gpus from file 'run_dqn_ram.py'
New namespace run_dqn_ram, old was 
Looking at get_env
Coloring get_env from file 'run_dqn_ram.py'
New namespace run_dqn_ram, old was 
Looking at get_session
Coloring get_session from file 'run_dqn_ram.py'
New namespace run_dqn_ram, old was 
Looking at main
Coloring main from file 'run_dqn_ram.py'
New namespace run_dqn_ram, old was 
Looking at set_global_seeds
Coloring set_global_seeds from file 'run_dqn_ram.py'
New namespace run_dqn_ram, old was 
Looking at stopping_criterion
Coloring stopping_criterion from file 'run_dqn_ram.py'
New namespace run_dqn_ram.atari_learn, old was 
<class 'pyan.writers.DotWriter'> running
Start subgraph 
Write node run_dqn_ram
Start subgraph run_dqn_ram
Write node atari_learn\n(run_dqn_ram.py:27)
Finish subgraph run_dqn_ram
Start subgraph run_dqn_ram
Write node atari_model\n(run_dqn_ram.py:15)
Finish subgraph run_dqn_ram
Start subgraph run_dqn_ram
Write node get_available_gpus\n(run_dqn_ram.py:77)
Finish subgraph run_dqn_ram
Start subgraph run_dqn_ram
Write node get_env\n(run_dqn_ram.py:101)
Finish subgraph run_dqn_ram
Start subgraph run_dqn_ram
Write node get_session\n(run_dqn_ram.py:92)
Finish subgraph run_dqn_ram
Start subgraph run_dqn_ram
Write node main\n(run_dqn_ram.py:113)
Finish subgraph run_dqn_ram
Start subgraph run_dqn_ram
Write node set_global_seeds\n(run_dqn_ram.py:82)
Finish subgraph run_dqn_ram
Start subgraph run_dqn_ram.atari_learn
Write node stopping_criterion\n(run_dqn_ram.py:46)
Finish subgraph run_dqn_ram.atari_learn
Finish subgraph 
