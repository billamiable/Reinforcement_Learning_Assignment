========== pass 1, file 'dqn.py' ==========
Scopes now: {'dqn': <Scope: module >, 'dqn.QLearner': <Scope: class QLearner>, 'dqn.QLearner.__init__': <Scope: function __init__>, 'dqn.QLearner.__init__.lambda': <Scope: function lambda>, 'dqn.QLearner.stopping_criterion_met': <Scope: function stopping_criterion_met>, 'dqn.QLearner.step_env': <Scope: function step_env>, 'dqn.QLearner.update_model': <Scope: function update_model>, 'dqn.QLearner.log_progress': <Scope: function log_progress>, 'dqn.learn': <Scope: function learn>}
Module
Import ['uuid']
Set uuid in <Scope: module > to <Node module:uuid>
Use from <Node module:dqn> to Import <Node module:uuid>
New edge added for Use from <Node module:dqn> to Import <Node module:uuid>
Import ['time']
Set time in <Scope: module > to <Node module:time>
Use from <Node module:dqn> to Import <Node module:time>
New edge added for Use from <Node module:dqn> to Import <Node module:time>
Import ['pickle']
Set pickle in <Scope: module > to <Node module:pickle>
Use from <Node module:dqn> to Import <Node module:pickle>
New edge added for Use from <Node module:dqn> to Import <Node module:pickle>
Import ['sys']
Set sys in <Scope: module > to <Node module:sys>
Use from <Node module:dqn> to Import <Node module:sys>
New edge added for Use from <Node module:dqn> to Import <Node module:sys>
Import ['gym.spaces']
Set: name gym.spaces not in scope
Use from <Node module:dqn> to Import <Node module:gym.spaces>
New edge added for Use from <Node module:dqn> to Import <Node module:gym.spaces>
Import ['itertools']
Set itertools in <Scope: module > to <Node module:itertools>
Use from <Node module:dqn> to Import <Node module:itertools>
New edge added for Use from <Node module:dqn> to Import <Node module:itertools>
Import ['numpy as np']
Set np in <Scope: module > to <Node module:numpy>
Use from <Node module:dqn> to Import <Node import:np>
New edge added for Use from <Node module:dqn> to Import <Node import:np>
Import ['random']
Set random in <Scope: module > to <Node module:random>
Use from <Node module:dqn> to Import <Node module:random>
New edge added for Use from <Node module:dqn> to Import <Node module:random>
Import ['tensorflow as tf']
Set tf in <Scope: module > to <Node module:tensorflow>
Use from <Node module:dqn> to Import <Node import:tf>
New edge added for Use from <Node module:dqn> to Import <Node import:tf>
Import ['tensorflow.contrib.layers as layers']
Set layers in <Scope: module > to <Node module:tensorflow.contrib.layers>
Use from <Node module:dqn> to Import <Node import:layers>
New edge added for Use from <Node module:dqn> to Import <Node import:layers>
ImportFrom: from collections import ['namedtuple']
Use from <Node module:dqn> to ImportFrom <Node module:collections>
New edge added for Use from <Node module:dqn> to ImportFrom <Node module:collections>
Set namedtuple in <Scope: module > to <Node import:collections.namedtuple>
From setting name namedtuple to <Node import:collections.namedtuple>
ImportFrom: from dqn_utils import ['*']
Use from <Node module:dqn> to ImportFrom <Node module:dqn_utils>
New edge added for Use from <Node module:dqn> to ImportFrom <Node module:dqn_utils>
Set: name * not in scope
From setting name * to <Node import:dqn_utils.*>
Assign ['OptimizerSpec'] [<_ast.Call object at 0x102404e48>]
Call namedtuple
Name namedtuple in context <class '_ast.Load'>
Get namedtuple in <Scope: module >, found in <Scope: module >, value <Node import:collections.namedtuple>
Use from <Node module:dqn> to Name <Node import:collections.namedtuple>
New edge added for Use from <Node module:dqn> to Name <Node import:collections.namedtuple>
Name OptimizerSpec in context <class '_ast.Store'>
Set OptimizerSpec in <Scope: module > to <Node import:collections.namedtuple>
ClassDef QLearner
Def from <Node module:dqn> to Class <Node class:dqn.QLearner>
Set QLearner in <Scope: module > to <Node class:dqn.QLearner>
Name object in context <class '_ast.Load'>
Get object in <Scope: class QLearner>: no Node value (or name not in scope)
Use from <Node class:dqn.QLearner> to Name <Node ???:*.object>
New edge added for Use from <Node class:dqn.QLearner> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:dqn.QLearner> to Function <Node method:dqn.QLearner.__init__>
Set __init__ in <Scope: class QLearner> to <Node method:dqn.QLearner.__init__>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Call LinearSchedule
Name LinearSchedule in context <class '_ast.Load'>
Get LinearSchedule in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.LinearSchedule>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.LinearSchedule>
Call type
Attribute observation_space of env in context <class '_ast.Load'>
Resolve env.observation_space in context <class '_ast.Load'>
Get env in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Resolved to attr observation_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.observation_space> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr observation_space not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.observation_space> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr observation_space not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.type>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.type>
Attribute Box of gym.spaces in context <class '_ast.Load'>
Resolve gym.spaces.Box in context <class '_ast.Load'>
Resolve gym.spaces in context <class '_ast.Load'>
Get gym in <Scope: function __init__>: no Node value (or name not in scope)
Resolved to attr spaces of None
Unresolved, returning attr Box of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.Box> (target obj gym.spaces not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.Box> (target obj gym.spaces not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call type
Attribute action_space of env in context <class '_ast.Load'>
Resolve env.action_space in context <class '_ast.Load'>
Get env in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Resolved to attr action_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.action_space> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr action_space not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.action_space> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr action_space not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.type>
Attribute Discrete of gym.spaces in context <class '_ast.Load'>
Resolve gym.spaces.Discrete in context <class '_ast.Load'>
Resolve gym.spaces in context <class '_ast.Load'>
Get gym in <Scope: function __init__>: no Node value (or name not in scope)
Resolved to attr spaces of None
Unresolved, returning attr Discrete of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.Discrete> (target obj gym.spaces not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.Discrete> (target obj gym.spaces not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.target_update_freq'] ['target_update_freq']
Name target_update_freq in context <class '_ast.Load'>
Get target_update_freq in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute target_update_freq of self in context <class '_ast.Store'>
Resolve self.target_update_freq in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr target_update_freq of <Node class:dqn.QLearner>
setattr target_update_freq on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.optimizer_spec'] ['optimizer_spec']
Name optimizer_spec in context <class '_ast.Load'>
Get optimizer_spec in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute optimizer_spec of self in context <class '_ast.Store'>
Resolve self.optimizer_spec in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr optimizer_spec of <Node class:dqn.QLearner>
setattr optimizer_spec on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.batch_size'] ['batch_size']
Name batch_size in context <class '_ast.Load'>
Get batch_size in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute batch_size of self in context <class '_ast.Store'>
Resolve self.batch_size in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr batch_size of <Node class:dqn.QLearner>
setattr batch_size on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.learning_freq'] ['learning_freq']
Name learning_freq in context <class '_ast.Load'>
Get learning_freq in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute learning_freq of self in context <class '_ast.Store'>
Resolve self.learning_freq in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr learning_freq of <Node class:dqn.QLearner>
setattr learning_freq on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.learning_starts'] ['learning_starts']
Name learning_starts in context <class '_ast.Load'>
Get learning_starts in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute learning_starts of self in context <class '_ast.Store'>
Resolve self.learning_starts in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr learning_starts of <Node class:dqn.QLearner>
setattr learning_starts on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.stopping_criterion'] ['stopping_criterion']
Name stopping_criterion in context <class '_ast.Load'>
Get stopping_criterion in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute stopping_criterion of self in context <class '_ast.Store'>
Resolve self.stopping_criterion in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr stopping_criterion of <Node class:dqn.QLearner>
setattr stopping_criterion on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.env'] ['env']
Name env in context <class '_ast.Load'>
Get env in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute env of self in context <class '_ast.Store'>
Resolve self.env in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
setattr env on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.session'] ['session']
Name session in context <class '_ast.Load'>
Get session in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute session of self in context <class '_ast.Store'>
Resolve self.session in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr session of <Node class:dqn.QLearner>
setattr session on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.exploration'] ['exploration']
Name exploration in context <class '_ast.Load'>
Get exploration in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute exploration of self in context <class '_ast.Store'>
Resolve self.exploration in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr exploration of <Node class:dqn.QLearner>
setattr exploration on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.rew_file'] [<_ast.IfExp object at 0x1023c55c0>]
Name rew_file in context <class '_ast.Load'>
Get rew_file in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Call str
Call uuid.uuid4
Attribute uuid4 of uuid in context <class '_ast.Load'>
Resolve uuid.uuid4 in context <class '_ast.Load'>
Get uuid in <Scope: function __init__>, found in <Scope: module >, value <Node module:uuid>
Resolved to attr uuid4 of <Node module:uuid>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:uuid.uuid4> (target obj <Node module:uuid> known but target attr uuid4 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:uuid.uuid4> (target obj <Node module:uuid> known but target attr uuid4 not resolved; maybe fwd ref or unanalyzed import)
Name str in context <class '_ast.Load'>
Get str in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.str>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.str>
Name rew_file in context <class '_ast.Load'>
Get rew_file in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute rew_file of self in context <class '_ast.Store'>
Resolve self.rew_file in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr rew_file of <Node class:dqn.QLearner>
setattr rew_file on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Call len
Attribute shape of self.env.observation_space in context <class '_ast.Load'>
Resolve self.env.observation_space.shape in context <class '_ast.Load'>
Resolve self.env.observation_space in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr observation_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.shape> (target obj self.env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.shape> (target obj self.env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.len>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.len>
Assign ['input_shape'] ['self.env.observation_space.shape']
Attribute shape of self.env.observation_space in context <class '_ast.Load'>
Resolve self.env.observation_space.shape in context <class '_ast.Load'>
Resolve self.env.observation_space in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr observation_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.shape> (target obj self.env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name input_shape in context <class '_ast.Store'>
Set input_shape in <Scope: function __init__> to <Node ???:*.shape>
Assign ['img_h', 'img_w', 'img_c'] ['self.env.observation_space.shape']
Attribute shape of self.env.observation_space in context <class '_ast.Load'>
Resolve self.env.observation_space.shape in context <class '_ast.Load'>
Resolve self.env.observation_space in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr observation_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.shape> (target obj self.env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name img_h in context <class '_ast.Store'>
Set img_h in <Scope: function __init__> to <Node ???:*.shape>
Name img_w in context <class '_ast.Store'>
Set img_w in <Scope: function __init__> to <Node ???:*.shape>
Name img_c in context <class '_ast.Store'>
Set img_c in <Scope: function __init__> to <Node ???:*.shape>
Assign ['input_shape'] ['img_h', 'img_w', <_ast.BinOp object at 0x1023c5eb8>]
Name img_h in context <class '_ast.Load'>
Get img_h in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name img_w in context <class '_ast.Load'>
Get img_w in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name frame_history_len in context <class '_ast.Load'>
Get frame_history_len in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name img_c in context <class '_ast.Load'>
Get img_c in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name input_shape in context <class '_ast.Store'>
Set input_shape in <Scope: function __init__> to <Node ???:*.shape>
Assign ['self.num_actions'] ['self.env.action_space.n']
Attribute n of self.env.action_space in context <class '_ast.Load'>
Resolve self.env.action_space.n in context <class '_ast.Load'>
Resolve self.env.action_space in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr action_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr n of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.n> (target obj self.env.action_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.n> (target obj self.env.action_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute num_actions of self in context <class '_ast.Store'>
Resolve self.num_actions in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr num_actions of <Node class:dqn.QLearner>
setattr num_actions on self to <Node ???:*.n>
Assign ['self.obs_t_ph'] [<_ast.Call object at 0x1023c91d0>]
Call tf.placeholder
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute uint8 of tf in context <class '_ast.Load'>
Resolve tf.uint8 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr uint8 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.uint8> (target obj <Node module:tensorflow> known but target attr uint8 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.uint8> (target obj <Node module:tensorflow> known but target attr uint8 not resolved; maybe fwd ref or unanalyzed import)
Call list
Name input_shape in context <class '_ast.Load'>
Get input_shape in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name list in context <class '_ast.Load'>
Get list in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.list>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.list>
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute obs_t_ph of self in context <class '_ast.Store'>
Resolve self.obs_t_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_t_ph of <Node class:dqn.QLearner>
setattr obs_t_ph on self to <Node attribute:tensorflow.placeholder>
Assign ['self.act_t_ph'] [<_ast.Call object at 0x1023c95c0>]
Call tf.placeholder
Attribute int32 of tf in context <class '_ast.Load'>
Resolve tf.int32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr int32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.int32> (target obj <Node module:tensorflow> known but target attr int32 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.int32> (target obj <Node module:tensorflow> known but target attr int32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute act_t_ph of self in context <class '_ast.Store'>
Resolve self.act_t_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr act_t_ph of <Node class:dqn.QLearner>
setattr act_t_ph on self to <Node attribute:tensorflow.placeholder>
Assign ['self.rew_t_ph'] [<_ast.Call object at 0x1023c97f0>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute rew_t_ph of self in context <class '_ast.Store'>
Resolve self.rew_t_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr rew_t_ph of <Node class:dqn.QLearner>
setattr rew_t_ph on self to <Node attribute:tensorflow.placeholder>
Assign ['self.obs_tp1_ph'] [<_ast.Call object at 0x1023c9a20>]
Call tf.placeholder
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute uint8 of tf in context <class '_ast.Load'>
Resolve tf.uint8 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr uint8 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.uint8> (target obj <Node module:tensorflow> known but target attr uint8 not resolved; maybe fwd ref or unanalyzed import)
Call list
Name input_shape in context <class '_ast.Load'>
Get input_shape in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name list in context <class '_ast.Load'>
Get list in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.list>
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute obs_tp1_ph of self in context <class '_ast.Store'>
Resolve self.obs_tp1_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_tp1_ph of <Node class:dqn.QLearner>
setattr obs_tp1_ph on self to <Node attribute:tensorflow.placeholder>
Assign ['self.done_mask_ph'] [<_ast.Call object at 0x1023c9e10>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute done_mask_ph of self in context <class '_ast.Store'>
Resolve self.done_mask_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr done_mask_ph of <Node class:dqn.QLearner>
setattr done_mask_ph on self to <Node attribute:tensorflow.placeholder>
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['obs_t_float'] ['self.obs_t_ph']
Attribute obs_t_ph of self in context <class '_ast.Load'>
Resolve self.obs_t_ph in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_t_ph of <Node class:dqn.QLearner>
getattr obs_t_ph on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Name obs_t_float in context <class '_ast.Store'>
Set obs_t_float in <Scope: function __init__> to <Node attribute:tensorflow.placeholder>
Assign ['obs_tp1_float'] ['self.obs_tp1_ph']
Attribute obs_tp1_ph of self in context <class '_ast.Load'>
Resolve self.obs_tp1_ph in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_tp1_ph of <Node class:dqn.QLearner>
getattr obs_tp1_ph on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Name obs_tp1_float in context <class '_ast.Store'>
Set obs_tp1_float in <Scope: function __init__> to <Node attribute:tensorflow.placeholder>
Assign ['obs_t_float'] [<_ast.BinOp object at 0x1023cd278>]
Call tf.cast
Attribute obs_t_ph of self in context <class '_ast.Load'>
Resolve self.obs_t_ph in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_t_ph of <Node class:dqn.QLearner>
getattr obs_t_ph on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute cast of tf in context <class '_ast.Load'>
Resolve tf.cast in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr cast of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.cast> (target obj <Node module:tensorflow> known but target attr cast not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.cast> (target obj <Node module:tensorflow> known but target attr cast not resolved; maybe fwd ref or unanalyzed import)
Name obs_t_float in context <class '_ast.Store'>
Set obs_t_float in <Scope: function __init__> to <Node attribute:tensorflow.cast>
Assign ['obs_tp1_float'] [<_ast.BinOp object at 0x1023cd4e0>]
Call tf.cast
Attribute obs_tp1_ph of self in context <class '_ast.Load'>
Resolve self.obs_tp1_ph in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_tp1_ph of <Node class:dqn.QLearner>
getattr obs_tp1_ph on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute cast of tf in context <class '_ast.Load'>
Resolve tf.cast in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr cast of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.cast> (target obj <Node module:tensorflow> known but target attr cast not resolved; maybe fwd ref or unanalyzed import)
Name obs_tp1_float in context <class '_ast.Store'>
Set obs_tp1_float in <Scope: function __init__> to <Node attribute:tensorflow.cast>
Assign ['self.learning_rate'] [<_ast.Call object at 0x1023cd780>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute learning_rate of self in context <class '_ast.Store'>
Resolve self.learning_rate in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr learning_rate of <Node class:dqn.QLearner>
setattr learning_rate on self to <Node attribute:tensorflow.placeholder>
Assign ['optimizer'] [<_ast.Call object at 0x1023cd9b0>]
Call self.optimizer_spec.constructor
Attribute learning_rate of self in context <class '_ast.Load'>
Resolve self.learning_rate in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr learning_rate of <Node class:dqn.QLearner>
getattr learning_rate on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Attribute kwargs of self.optimizer_spec in context <class '_ast.Load'>
Resolve self.optimizer_spec.kwargs in context <class '_ast.Load'>
Resolve self.optimizer_spec in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr optimizer_spec of <Node class:dqn.QLearner>
Resolved to attr kwargs of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.kwargs> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr kwargs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.kwargs> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr kwargs not resolved; maybe fwd ref or unanalyzed import)
Attribute constructor of self.optimizer_spec in context <class '_ast.Load'>
Resolve self.optimizer_spec.constructor in context <class '_ast.Load'>
Resolve self.optimizer_spec in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr optimizer_spec of <Node class:dqn.QLearner>
Resolved to attr constructor of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr constructor not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr constructor not resolved; maybe fwd ref or unanalyzed import)
Name optimizer in context <class '_ast.Store'>
Set optimizer in <Scope: function __init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor>
Assign ['self.train_fn'] [<_ast.Call object at 0x1023cdcc0>]
Call minimize_and_clip
Name optimizer in context <class '_ast.Load'>
Get optimizer in <Scope: function __init__>, found in <Scope: function __init__>, value <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor>
Use from <Node method:dqn.QLearner.__init__> to Name <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor>
Attribute total_error of self in context <class '_ast.Load'>
Resolve self.total_error in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr total_error of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.total_error> (target obj <Node class:dqn.QLearner> known but target attr total_error not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.total_error> (target obj <Node class:dqn.QLearner> known but target attr total_error not resolved; maybe fwd ref or unanalyzed import)
Name q_func_vars in context <class '_ast.Load'>
Get q_func_vars in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.q_func_vars>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.q_func_vars>
Name grad_norm_clipping in context <class '_ast.Load'>
Get grad_norm_clipping in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name minimize_and_clip in context <class '_ast.Load'>
Get minimize_and_clip in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.minimize_and_clip>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.minimize_and_clip>
Attribute train_fn of self in context <class '_ast.Store'>
Resolve self.train_fn in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr train_fn of <Node class:dqn.QLearner>
setattr train_fn on self to <Node ???:*.minimize_and_clip>
Assign ['update_target_fn'] []
Name update_target_fn in context <class '_ast.Store'>
Set update_target_fn in <Scope: function __init__>: value None is not a Node
For-loop
Call zip
Call sorted
Name q_func_vars in context <class '_ast.Load'>
Get q_func_vars in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.q_func_vars>
Lambda
Attribute name of v in context <class '_ast.Load'>
Resolve v.name in context <class '_ast.Load'>
Get v in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr name of None
Use from <Node namespace:dqn.QLearner.__init__.lambda> to <Node ???:*.name> (target obj v not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:dqn.QLearner.__init__.lambda> to <Node ???:*.name> (target obj v not resolved; maybe fwd ref, function argument, or unanalyzed import)
Def from <Node method:dqn.QLearner.__init__> to lambda <Node namespace:dqn.QLearner.__init__.lambda>
Name sorted in context <class '_ast.Load'>
Get sorted in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.sorted>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.sorted>
Call sorted
Name target_q_func_vars in context <class '_ast.Load'>
Get target_q_func_vars in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.target_q_func_vars>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.target_q_func_vars>
Lambda
Attribute name of v in context <class '_ast.Load'>
Resolve v.name in context <class '_ast.Load'>
Get v in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr name of None
Use from <Node namespace:dqn.QLearner.__init__.lambda> to <Node ???:*.name> (target obj v not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sorted in context <class '_ast.Load'>
Get sorted in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.sorted>
Name zip in context <class '_ast.Load'>
Get zip in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.zip>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.zip>
Name var in context <class '_ast.Store'>
Set var in <Scope: function __init__> to <Node ???:*.zip>
Name var_target in context <class '_ast.Store'>
Set var_target in <Scope: function __init__> to <Node ???:*.zip>
Call update_target_fn.append
Call var_target.assign
Name var in context <class '_ast.Load'>
Get var in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.zip>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.zip>
Attribute assign of var_target in context <class '_ast.Load'>
Resolve var_target.assign in context <class '_ast.Load'>
Get var_target in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.zip>
Resolved to attr assign of <Node ???:*.zip>
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.assign> (target obj var_target not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.assign> (target obj var_target not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute append of update_target_fn in context <class '_ast.Load'>
Resolve update_target_fn.append in context <class '_ast.Load'>
Get update_target_fn in <Scope: function __init__>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.append> (target obj update_target_fn not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.append> (target obj update_target_fn not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.update_target_fn'] [<_ast.Call object at 0x1023df748>]
Call tf.group
Name update_target_fn in context <class '_ast.Load'>
Get update_target_fn in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.update_target_fn>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.update_target_fn>
Attribute group of tf in context <class '_ast.Load'>
Resolve tf.group in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr group of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.group> (target obj <Node module:tensorflow> known but target attr group not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.group> (target obj <Node module:tensorflow> known but target attr group not resolved; maybe fwd ref or unanalyzed import)
Attribute update_target_fn of self in context <class '_ast.Store'>
Resolve self.update_target_fn in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr update_target_fn of <Node class:dqn.QLearner>
setattr update_target_fn on self to <Node attribute:tensorflow.group>
Assign ['self.replay_buffer'] [<_ast.Call object at 0x1023df908>]
Call ReplayBuffer
Name replay_buffer_size in context <class '_ast.Load'>
Get replay_buffer_size in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name frame_history_len in context <class '_ast.Load'>
Get frame_history_len in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name ReplayBuffer in context <class '_ast.Load'>
Get ReplayBuffer in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.ReplayBuffer>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.ReplayBuffer>
Attribute replay_buffer of self in context <class '_ast.Store'>
Resolve self.replay_buffer in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr replay_buffer of <Node class:dqn.QLearner>
setattr replay_buffer on self to <Node ???:*.ReplayBuffer>
Assign ['self.replay_buffer_idx'] [<_ast.NameConstant object at 0x1023dfb00>]
Attribute replay_buffer_idx of self in context <class '_ast.Store'>
Assign ['self.model_initialized'] [<_ast.NameConstant object at 0x1023dfbe0>]
Attribute model_initialized of self in context <class '_ast.Store'>
Assign ['self.num_param_updates'] [<_ast.Num object at 0x1023dfcc0>]
Attribute num_param_updates of self in context <class '_ast.Store'>
Assign ['self.mean_episode_reward'] [<_ast.UnaryOp object at 0x1023dfda0>]
Call float
Name float in context <class '_ast.Load'>
Get float in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.float>
New edge added for Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.float>
Attribute mean_episode_reward of self in context <class '_ast.Store'>
Resolve self.mean_episode_reward in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr mean_episode_reward of <Node class:dqn.QLearner>
setattr mean_episode_reward on self to <Node ???:*.float>
Assign ['self.best_mean_episode_reward'] [<_ast.UnaryOp object at 0x1023dff28>]
Call float
Name float in context <class '_ast.Load'>
Get float in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.float>
Attribute best_mean_episode_reward of self in context <class '_ast.Store'>
Resolve self.best_mean_episode_reward in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr best_mean_episode_reward of <Node class:dqn.QLearner>
setattr best_mean_episode_reward on self to <Node ???:*.float>
Assign ['self.last_obs'] [<_ast.Call object at 0x1023d00f0>]
Call self.env.reset
Attribute reset of self.env in context <class '_ast.Load'>
Resolve self.env.reset in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr reset of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.reset> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr reset not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.reset> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr reset not resolved; maybe fwd ref or unanalyzed import)
Attribute last_obs of self in context <class '_ast.Store'>
Resolve self.last_obs in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr last_obs of <Node class:dqn.QLearner>
setattr last_obs on self to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.reset>
Assign ['self.log_every_n_steps'] [<_ast.Num object at 0x1023d0278>]
Attribute log_every_n_steps of self in context <class '_ast.Store'>
Assign ['self.start_time'] [<_ast.NameConstant object at 0x1023d0358>]
Attribute start_time of self in context <class '_ast.Store'>
Assign ['self.t'] [<_ast.Num object at 0x1023d0438>]
Attribute t of self in context <class '_ast.Store'>
FunctionDef stopping_criterion_met
Def from <Node class:dqn.QLearner> to Function <Node method:dqn.QLearner.stopping_criterion_met>
Set stopping_criterion_met in <Scope: class QLearner> to <Node method:dqn.QLearner.stopping_criterion_met>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Attribute stopping_criterion of self in context <class '_ast.Load'>
Resolve self.stopping_criterion in context <class '_ast.Load'>
Get self in <Scope: function stopping_criterion_met>, found in <Scope: function stopping_criterion_met>, value <Node class:dqn.QLearner>
Resolved to attr stopping_criterion of <Node class:dqn.QLearner>
getattr stopping_criterion on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Call self.stopping_criterion
Attribute env of self in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function stopping_criterion_met>, found in <Scope: function stopping_criterion_met>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
getattr env on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function stopping_criterion_met>, found in <Scope: function stopping_criterion_met>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
Attribute stopping_criterion of self in context <class '_ast.Load'>
Resolve self.stopping_criterion in context <class '_ast.Load'>
Get self in <Scope: function stopping_criterion_met>, found in <Scope: function stopping_criterion_met>, value <Node class:dqn.QLearner>
Resolved to attr stopping_criterion of <Node class:dqn.QLearner>
getattr stopping_criterion on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
FunctionDef step_env
Def from <Node class:dqn.QLearner> to Function <Node method:dqn.QLearner.step_env>
Set step_env in <Scope: class QLearner> to <Node method:dqn.QLearner.step_env>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Call print
Name print in context <class '_ast.Load'>
Get print in <Scope: function step_env>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.step_env> to Name <Node ???:*.print>
New edge added for Use from <Node method:dqn.QLearner.step_env> to Name <Node ???:*.print>
FunctionDef update_model
Def from <Node class:dqn.QLearner> to Function <Node method:dqn.QLearner.update_model>
Set update_model in <Scope: class QLearner> to <Node method:dqn.QLearner.update_model>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.update_model> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.update_model> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
Attribute learning_starts of self in context <class '_ast.Load'>
Resolve self.learning_starts in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr learning_starts of <Node class:dqn.QLearner>
getattr learning_starts on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.update_model> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn.QLearner.update_model> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.update_model> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
Attribute learning_freq of self in context <class '_ast.Load'>
Resolve self.learning_freq in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr learning_freq of <Node class:dqn.QLearner>
getattr learning_freq on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.update_model> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Call self.replay_buffer.can_sample
Attribute batch_size of self in context <class '_ast.Load'>
Resolve self.batch_size in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr batch_size of <Node class:dqn.QLearner>
getattr batch_size on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.update_model> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute can_sample of self.replay_buffer in context <class '_ast.Load'>
Resolve self.replay_buffer.can_sample in context <class '_ast.Load'>
Resolve self.replay_buffer in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr replay_buffer of <Node class:dqn.QLearner>
Resolved to attr can_sample of <Node ???:*.ReplayBuffer>
Use from <Node method:dqn.QLearner.update_model> to <Node ???:*.can_sample> (target obj self.replay_buffer not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.update_model> to <Node ???:*.can_sample> (target obj self.replay_buffer not resolved; maybe fwd ref, function argument, or unanalyzed import)
AugAssign ['self.num_param_updates'] <class '_ast.Add'> [<_ast.Num object at 0x1023d0f60>]
Attribute num_param_updates of self in context <class '_ast.Store'>
AugAssign ['self.t'] <class '_ast.Add'> [<_ast.Num object at 0x1023d3080>]
Attribute t of self in context <class '_ast.Store'>
FunctionDef log_progress
Def from <Node class:dqn.QLearner> to Function <Node method:dqn.QLearner.log_progress>
Set log_progress in <Scope: class QLearner> to <Node method:dqn.QLearner.log_progress>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Assign ['episode_rewards'] [<_ast.Call object at 0x1023d31d0>]
Call <_ast.Call object at 0x1023d3240>.get_episode_rewards
Attribute get_episode_rewards of <_ast.Call object at 0x1023d3240> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x1023d3240>.get_episode_rewards in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_episode_rewards of unknown
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.get_episode_rewards> (target obj <_ast.Call object at 0x1023d3240> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.get_episode_rewards> (target obj <_ast.Call object at 0x1023d3240> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name episode_rewards in context <class '_ast.Store'>
Set episode_rewards in <Scope: function log_progress> to <Node ???:*.get_episode_rewards>
Call len
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Name len in context <class '_ast.Load'>
Get len in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.len>
New edge added for Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.len>
Assign ['self.mean_episode_reward'] [<_ast.Call object at 0x1023d3550>]
Call np.mean
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function log_progress>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute mean_episode_reward of self in context <class '_ast.Store'>
Resolve self.mean_episode_reward in context <class '_ast.Store'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr mean_episode_reward of <Node class:dqn.QLearner>
setattr mean_episode_reward on self to <Node attribute:numpy.mean>
Call len
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Name len in context <class '_ast.Load'>
Get len in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.len>
Assign ['self.best_mean_episode_reward'] [<_ast.Call object at 0x1023d3908>]
Call max
Attribute best_mean_episode_reward of self in context <class '_ast.Load'>
Resolve self.best_mean_episode_reward in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr best_mean_episode_reward of <Node class:dqn.QLearner>
getattr best_mean_episode_reward on self returns <Node ???:*.float>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.float>
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.float>
Attribute mean_episode_reward of self in context <class '_ast.Load'>
Resolve self.mean_episode_reward in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr mean_episode_reward of <Node class:dqn.QLearner>
getattr mean_episode_reward on self returns <Node attribute:numpy.mean>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:numpy.mean>
Name max in context <class '_ast.Load'>
Get max in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.max>
New edge added for Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.max>
Attribute best_mean_episode_reward of self in context <class '_ast.Store'>
Resolve self.best_mean_episode_reward in context <class '_ast.Store'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr best_mean_episode_reward of <Node class:dqn.QLearner>
setattr best_mean_episode_reward on self to <Node ???:*.max>
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
Attribute log_every_n_steps of self in context <class '_ast.Load'>
Resolve self.log_every_n_steps in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr log_every_n_steps of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.log_every_n_steps> (target obj <Node class:dqn.QLearner> known but target attr log_every_n_steps not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.log_every_n_steps> (target obj <Node class:dqn.QLearner> known but target attr log_every_n_steps not resolved; maybe fwd ref or unanalyzed import)
Attribute model_initialized of self in context <class '_ast.Load'>
Resolve self.model_initialized in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr model_initialized of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.model_initialized> (target obj <Node class:dqn.QLearner> known but target attr model_initialized not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.model_initialized> (target obj <Node class:dqn.QLearner> known but target attr model_initialized not resolved; maybe fwd ref or unanalyzed import)
Call print
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
New edge added for Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Attribute mean_episode_reward of self in context <class '_ast.Load'>
Resolve self.mean_episode_reward in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr mean_episode_reward of <Node class:dqn.QLearner>
getattr mean_episode_reward on self returns <Node attribute:numpy.mean>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:numpy.mean>
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Attribute best_mean_episode_reward of self in context <class '_ast.Load'>
Resolve self.best_mean_episode_reward in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr best_mean_episode_reward of <Node class:dqn.QLearner>
getattr best_mean_episode_reward on self returns <Node ???:*.max>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.max>
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Call len
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Name len in context <class '_ast.Load'>
Get len in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.len>
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Call self.exploration.value
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
Attribute value of self.exploration in context <class '_ast.Load'>
Resolve self.exploration.value in context <class '_ast.Load'>
Resolve self.exploration in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr exploration of <Node class:dqn.QLearner>
Resolved to attr value of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.value> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.value> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Call self.optimizer_spec.lr_schedule.value
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.t> (target obj <Node class:dqn.QLearner> known but target attr t not resolved; maybe fwd ref or unanalyzed import)
Attribute value of self.optimizer_spec.lr_schedule in context <class '_ast.Load'>
Resolve self.optimizer_spec.lr_schedule.value in context <class '_ast.Load'>
Resolve self.optimizer_spec.lr_schedule in context <class '_ast.Load'>
Resolve self.optimizer_spec in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr optimizer_spec of <Node class:dqn.QLearner>
Resolved to attr lr_schedule of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr value of unknown
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.value> (target obj self.optimizer_spec.lr_schedule not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.value> (target obj self.optimizer_spec.lr_schedule not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Attribute start_time of self in context <class '_ast.Load'>
Resolve self.start_time in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr start_time of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.start_time> (target obj <Node class:dqn.QLearner> known but target attr start_time not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.start_time> (target obj <Node class:dqn.QLearner> known but target attr start_time not resolved; maybe fwd ref or unanalyzed import)
Call print
Call time.time
Attribute time of time in context <class '_ast.Load'>
Resolve time.time in context <class '_ast.Load'>
Get time in <Scope: function log_progress>, found in <Scope: module >, value <Node module:time>
Resolved to attr time of <Node module:time>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
Attribute start_time of self in context <class '_ast.Load'>
Resolve self.start_time in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr start_time of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.start_time> (target obj <Node class:dqn.QLearner> known but target attr start_time not resolved; maybe fwd ref or unanalyzed import)
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Assign ['self.start_time'] [<_ast.Call object at 0x1023d7d30>]
Call time.time
Attribute time of time in context <class '_ast.Load'>
Resolve time.time in context <class '_ast.Load'>
Get time in <Scope: function log_progress>, found in <Scope: module >, value <Node module:time>
Resolved to attr time of <Node module:time>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
Attribute start_time of self in context <class '_ast.Store'>
Resolve self.start_time in context <class '_ast.Store'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr start_time of <Node class:dqn.QLearner>
setattr start_time on self to <Node attribute:time.time>
Call sys.stdout.flush
Attribute flush of sys.stdout in context <class '_ast.Load'>
Resolve sys.stdout.flush in context <class '_ast.Load'>
Resolve sys.stdout in context <class '_ast.Load'>
Get sys in <Scope: function log_progress>, found in <Scope: module >, value <Node module:sys>
Resolved to attr stdout of <Node module:sys>
Unresolved, returning attr flush of unknown
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.flush> (target obj sys.stdout not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.flush> (target obj sys.stdout not resolved; maybe fwd ref, function argument, or unanalyzed import)
With (context manager)
Call open
Attribute rew_file of self in context <class '_ast.Load'>
Resolve self.rew_file in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr rew_file of <Node class:dqn.QLearner>
getattr rew_file on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.log_progress> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.open>
New edge added for Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.open>
Use from <Node method:dqn.QLearner.log_progress> to With <Node ???:*.open>
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node method:*.open.__enter__>
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node method:*.open.__exit__>
Call open
Attribute rew_file of self in context <class '_ast.Load'>
Resolve self.rew_file in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr rew_file of <Node class:dqn.QLearner>
getattr rew_file on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.log_progress> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.open>
Name f in context <class '_ast.Store'>
Set f in <Scope: function log_progress> to <Node ???:*.open>
Call pickle.dump
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Name f in context <class '_ast.Load'>
Get f in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.open>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.open>
Attribute HIGHEST_PROTOCOL of pickle in context <class '_ast.Load'>
Resolve pickle.HIGHEST_PROTOCOL in context <class '_ast.Load'>
Get pickle in <Scope: function log_progress>, found in <Scope: module >, value <Node module:pickle>
Resolved to attr HIGHEST_PROTOCOL of <Node module:pickle>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:pickle.HIGHEST_PROTOCOL> (target obj <Node module:pickle> known but target attr HIGHEST_PROTOCOL not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:pickle.HIGHEST_PROTOCOL> (target obj <Node module:pickle> known but target attr HIGHEST_PROTOCOL not resolved; maybe fwd ref or unanalyzed import)
Attribute dump of pickle in context <class '_ast.Load'>
Resolve pickle.dump in context <class '_ast.Load'>
Get pickle in <Scope: function log_progress>, found in <Scope: module >, value <Node module:pickle>
Resolved to attr dump of <Node module:pickle>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:pickle.dump> (target obj <Node module:pickle> known but target attr dump not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:pickle.dump> (target obj <Node module:pickle> known but target attr dump not resolved; maybe fwd ref or unanalyzed import)
FunctionDef learn
Def from <Node module:dqn> to Function <Node function:dqn.learn>
Set learn in <Scope: module > to <Node function:dqn.learn>
Assign ['alg'] [<_ast.Call object at 0x1023db400>]
Call QLearner
Name args in context <class '_ast.Load'>
Get args in <Scope: function learn>: no Node value (or name not in scope)
Use from <Node function:dqn.learn> to Name <Node ???:*.args>
New edge added for Use from <Node function:dqn.learn> to Name <Node ???:*.args>
Name kwargs in context <class '_ast.Load'>
Get kwargs in <Scope: function learn>: no Node value (or name not in scope)
Use from <Node function:dqn.learn> to Name <Node ???:*.kwargs>
New edge added for Use from <Node function:dqn.learn> to Name <Node ???:*.kwargs>
Name QLearner in context <class '_ast.Load'>
Get QLearner in <Scope: function learn>, found in <Scope: module >, value <Node class:dqn.QLearner>
Use from <Node function:dqn.learn> to Name <Node class:dqn.QLearner>
New edge added for Use from <Node function:dqn.learn> to Name <Node class:dqn.QLearner>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.__init__> (call creates an instance)
New edge added for Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.__init__> (call creates an instance)
Name alg in context <class '_ast.Store'>
Set alg in <Scope: function learn> to <Node class:dqn.QLearner>
Call alg.stopping_criterion_met
Attribute stopping_criterion_met of alg in context <class '_ast.Load'>
Resolve alg.stopping_criterion_met in context <class '_ast.Load'>
Get alg in <Scope: function learn>, found in <Scope: function learn>, value <Node class:dqn.QLearner>
Resolved to attr stopping_criterion_met of <Node class:dqn.QLearner>
getattr stopping_criterion_met on alg returns <Node method:dqn.QLearner.stopping_criterion_met>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.stopping_criterion_met>
New edge added for Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.stopping_criterion_met>
Call alg.step_env
Attribute step_env of alg in context <class '_ast.Load'>
Resolve alg.step_env in context <class '_ast.Load'>
Get alg in <Scope: function learn>, found in <Scope: function learn>, value <Node class:dqn.QLearner>
Resolved to attr step_env of <Node class:dqn.QLearner>
getattr step_env on alg returns <Node method:dqn.QLearner.step_env>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.step_env>
New edge added for Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.step_env>
Call alg.update_model
Attribute update_model of alg in context <class '_ast.Load'>
Resolve alg.update_model in context <class '_ast.Load'>
Get alg in <Scope: function learn>, found in <Scope: function learn>, value <Node class:dqn.QLearner>
Resolved to attr update_model of <Node class:dqn.QLearner>
getattr update_model on alg returns <Node method:dqn.QLearner.update_model>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.update_model>
New edge added for Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.update_model>
Call alg.log_progress
Attribute log_progress of alg in context <class '_ast.Load'>
Resolve alg.log_progress in context <class '_ast.Load'>
Get alg in <Scope: function learn>, found in <Scope: function learn>, value <Node class:dqn.QLearner>
Resolved to attr log_progress of <Node class:dqn.QLearner>
getattr log_progress on alg returns <Node method:dqn.QLearner.log_progress>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.log_progress>
New edge added for Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.log_progress>
Resolving base classes
Get object in <Scope: module >: no Node value (or name not in scope)
All base classes (non-recursive, local level only): {<Node class:dqn.QLearner>: []}
Resolving method resolution order (MRO) for all analyzed classes
MRO: analyzing class <Node class:dqn.QLearner>
MRO: C3 linearizing <Node class:dqn.QLearner>
MRO: C3 linearized <Node class:dqn.QLearner>, result [<Node class:dqn.QLearner>]
Method resolution order (MRO) for all analyzed classes: {<Node class:dqn.QLearner>: [<Node class:dqn.QLearner>]}
========== pass 2, file 'dqn.py' ==========
Scopes now: {'dqn': <Scope: module >, 'dqn.QLearner': <Scope: class QLearner>, 'dqn.QLearner.__init__': <Scope: function __init__>, 'dqn.QLearner.__init__.lambda': <Scope: function lambda>, 'dqn.QLearner.stopping_criterion_met': <Scope: function stopping_criterion_met>, 'dqn.QLearner.step_env': <Scope: function step_env>, 'dqn.QLearner.update_model': <Scope: function update_model>, 'dqn.QLearner.log_progress': <Scope: function log_progress>, 'dqn.learn': <Scope: function learn>}
Module
Import ['uuid']
Set uuid in <Scope: module > to <Node module:uuid>
Use from <Node module:dqn> to Import <Node module:uuid>
Import ['time']
Set time in <Scope: module > to <Node module:time>
Use from <Node module:dqn> to Import <Node module:time>
Import ['pickle']
Set pickle in <Scope: module > to <Node module:pickle>
Use from <Node module:dqn> to Import <Node module:pickle>
Import ['sys']
Set sys in <Scope: module > to <Node module:sys>
Use from <Node module:dqn> to Import <Node module:sys>
Import ['gym.spaces']
Set: name gym.spaces not in scope
Use from <Node module:dqn> to Import <Node module:gym.spaces>
Import ['itertools']
Set itertools in <Scope: module > to <Node module:itertools>
Use from <Node module:dqn> to Import <Node module:itertools>
Import ['numpy as np']
Set np in <Scope: module > to <Node module:numpy>
Use from <Node module:dqn> to Import <Node import:np>
Import ['random']
Set random in <Scope: module > to <Node module:random>
Use from <Node module:dqn> to Import <Node module:random>
Import ['tensorflow as tf']
Set tf in <Scope: module > to <Node module:tensorflow>
Use from <Node module:dqn> to Import <Node import:tf>
Import ['tensorflow.contrib.layers as layers']
Set layers in <Scope: module > to <Node module:tensorflow.contrib.layers>
Use from <Node module:dqn> to Import <Node import:layers>
ImportFrom: from collections import ['namedtuple']
Use from <Node module:dqn> to ImportFrom <Node module:collections>
Set namedtuple in <Scope: module > to <Node import:collections.namedtuple>
From setting name namedtuple to <Node import:collections.namedtuple>
ImportFrom: from dqn_utils import ['*']
Use from <Node module:dqn> to ImportFrom <Node module:dqn_utils>
Set: name * not in scope
From setting name * to <Node import:dqn_utils.*>
Assign ['OptimizerSpec'] [<_ast.Call object at 0x1023f76a0>]
Call namedtuple
Name namedtuple in context <class '_ast.Load'>
Get namedtuple in <Scope: module >, found in <Scope: module >, value <Node import:collections.namedtuple>
Use from <Node module:dqn> to Name <Node import:collections.namedtuple>
Name OptimizerSpec in context <class '_ast.Store'>
Set OptimizerSpec in <Scope: module > to <Node import:collections.namedtuple>
ClassDef QLearner
Set QLearner in <Scope: module > to <Node class:dqn.QLearner>
Name object in context <class '_ast.Load'>
Get object in <Scope: class QLearner>: no Node value (or name not in scope)
Use from <Node class:dqn.QLearner> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class QLearner> to <Node method:dqn.QLearner.__init__>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Call LinearSchedule
Name LinearSchedule in context <class '_ast.Load'>
Get LinearSchedule in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.LinearSchedule>
Call type
Attribute observation_space of env in context <class '_ast.Load'>
Resolve env.observation_space in context <class '_ast.Load'>
Get env in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Resolved to attr observation_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.observation_space> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr observation_space not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.type>
Attribute Box of gym.spaces in context <class '_ast.Load'>
Resolve gym.spaces.Box in context <class '_ast.Load'>
Resolve gym.spaces in context <class '_ast.Load'>
Get gym in <Scope: function __init__>: no Node value (or name not in scope)
Resolved to attr spaces of None
Unresolved, returning attr Box of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.Box> (target obj gym.spaces not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call type
Attribute action_space of env in context <class '_ast.Load'>
Resolve env.action_space in context <class '_ast.Load'>
Get env in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Resolved to attr action_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.action_space> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr action_space not resolved; maybe fwd ref or unanalyzed import)
Name type in context <class '_ast.Load'>
Get type in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.type>
Attribute Discrete of gym.spaces in context <class '_ast.Load'>
Resolve gym.spaces.Discrete in context <class '_ast.Load'>
Resolve gym.spaces in context <class '_ast.Load'>
Get gym in <Scope: function __init__>: no Node value (or name not in scope)
Resolved to attr spaces of None
Unresolved, returning attr Discrete of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.Discrete> (target obj gym.spaces not resolved; maybe fwd ref, function argument, or unanalyzed import)
Assign ['self.target_update_freq'] ['target_update_freq']
Name target_update_freq in context <class '_ast.Load'>
Get target_update_freq in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute target_update_freq of self in context <class '_ast.Store'>
Resolve self.target_update_freq in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr target_update_freq of <Node class:dqn.QLearner>
setattr target_update_freq on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.optimizer_spec'] ['optimizer_spec']
Name optimizer_spec in context <class '_ast.Load'>
Get optimizer_spec in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute optimizer_spec of self in context <class '_ast.Store'>
Resolve self.optimizer_spec in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr optimizer_spec of <Node class:dqn.QLearner>
setattr optimizer_spec on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.batch_size'] ['batch_size']
Name batch_size in context <class '_ast.Load'>
Get batch_size in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute batch_size of self in context <class '_ast.Store'>
Resolve self.batch_size in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr batch_size of <Node class:dqn.QLearner>
setattr batch_size on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.learning_freq'] ['learning_freq']
Name learning_freq in context <class '_ast.Load'>
Get learning_freq in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute learning_freq of self in context <class '_ast.Store'>
Resolve self.learning_freq in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr learning_freq of <Node class:dqn.QLearner>
setattr learning_freq on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.learning_starts'] ['learning_starts']
Name learning_starts in context <class '_ast.Load'>
Get learning_starts in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute learning_starts of self in context <class '_ast.Store'>
Resolve self.learning_starts in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr learning_starts of <Node class:dqn.QLearner>
setattr learning_starts on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.stopping_criterion'] ['stopping_criterion']
Name stopping_criterion in context <class '_ast.Load'>
Get stopping_criterion in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute stopping_criterion of self in context <class '_ast.Store'>
Resolve self.stopping_criterion in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr stopping_criterion of <Node class:dqn.QLearner>
setattr stopping_criterion on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.env'] ['env']
Name env in context <class '_ast.Load'>
Get env in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute env of self in context <class '_ast.Store'>
Resolve self.env in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
setattr env on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.session'] ['session']
Name session in context <class '_ast.Load'>
Get session in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute session of self in context <class '_ast.Store'>
Resolve self.session in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr session of <Node class:dqn.QLearner>
setattr session on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.exploration'] ['exploration']
Name exploration in context <class '_ast.Load'>
Get exploration in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute exploration of self in context <class '_ast.Store'>
Resolve self.exploration in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr exploration of <Node class:dqn.QLearner>
setattr exploration on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['self.rew_file'] [<_ast.IfExp object at 0x1023f3b70>]
Name rew_file in context <class '_ast.Load'>
Get rew_file in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Call str
Call uuid.uuid4
Attribute uuid4 of uuid in context <class '_ast.Load'>
Resolve uuid.uuid4 in context <class '_ast.Load'>
Get uuid in <Scope: function __init__>, found in <Scope: module >, value <Node module:uuid>
Resolved to attr uuid4 of <Node module:uuid>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:uuid.uuid4> (target obj <Node module:uuid> known but target attr uuid4 not resolved; maybe fwd ref or unanalyzed import)
Name str in context <class '_ast.Load'>
Get str in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.str>
Name rew_file in context <class '_ast.Load'>
Get rew_file in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute rew_file of self in context <class '_ast.Store'>
Resolve self.rew_file in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr rew_file of <Node class:dqn.QLearner>
setattr rew_file on self to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Call len
Attribute shape of self.env.observation_space in context <class '_ast.Load'>
Resolve self.env.observation_space.shape in context <class '_ast.Load'>
Resolve self.env.observation_space in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr observation_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.shape> (target obj self.env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.len>
Assign ['input_shape'] ['self.env.observation_space.shape']
Attribute shape of self.env.observation_space in context <class '_ast.Load'>
Resolve self.env.observation_space.shape in context <class '_ast.Load'>
Resolve self.env.observation_space in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr observation_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.shape> (target obj self.env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name input_shape in context <class '_ast.Store'>
Set input_shape in <Scope: function __init__> to <Node ???:*.shape>
Assign ['img_h', 'img_w', 'img_c'] ['self.env.observation_space.shape']
Attribute shape of self.env.observation_space in context <class '_ast.Load'>
Resolve self.env.observation_space.shape in context <class '_ast.Load'>
Resolve self.env.observation_space in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr observation_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.shape> (target obj self.env.observation_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name img_h in context <class '_ast.Store'>
Set img_h in <Scope: function __init__> to <Node ???:*.shape>
Name img_w in context <class '_ast.Store'>
Set img_w in <Scope: function __init__> to <Node ???:*.shape>
Name img_c in context <class '_ast.Store'>
Set img_c in <Scope: function __init__> to <Node ???:*.shape>
Assign ['input_shape'] ['img_h', 'img_w', <_ast.BinOp object at 0x1023f64a8>]
Name img_h in context <class '_ast.Load'>
Get img_h in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name img_w in context <class '_ast.Load'>
Get img_w in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name frame_history_len in context <class '_ast.Load'>
Get frame_history_len in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name img_c in context <class '_ast.Load'>
Get img_c in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name input_shape in context <class '_ast.Store'>
Set input_shape in <Scope: function __init__> to <Node ???:*.shape>
Assign ['self.num_actions'] ['self.env.action_space.n']
Attribute n of self.env.action_space in context <class '_ast.Load'>
Resolve self.env.action_space.n in context <class '_ast.Load'>
Resolve self.env.action_space in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr action_space of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr n of unknown
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.n> (target obj self.env.action_space not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute num_actions of self in context <class '_ast.Store'>
Resolve self.num_actions in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr num_actions of <Node class:dqn.QLearner>
setattr num_actions on self to <Node ???:*.n>
Assign ['self.obs_t_ph'] [<_ast.Call object at 0x1023f6780>]
Call tf.placeholder
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute uint8 of tf in context <class '_ast.Load'>
Resolve tf.uint8 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr uint8 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.uint8> (target obj <Node module:tensorflow> known but target attr uint8 not resolved; maybe fwd ref or unanalyzed import)
Call list
Name input_shape in context <class '_ast.Load'>
Get input_shape in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name list in context <class '_ast.Load'>
Get list in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.list>
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute obs_t_ph of self in context <class '_ast.Store'>
Resolve self.obs_t_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_t_ph of <Node class:dqn.QLearner>
setattr obs_t_ph on self to <Node attribute:tensorflow.placeholder>
Assign ['self.act_t_ph'] [<_ast.Call object at 0x1023f6b70>]
Call tf.placeholder
Attribute int32 of tf in context <class '_ast.Load'>
Resolve tf.int32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr int32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.int32> (target obj <Node module:tensorflow> known but target attr int32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute act_t_ph of self in context <class '_ast.Store'>
Resolve self.act_t_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr act_t_ph of <Node class:dqn.QLearner>
setattr act_t_ph on self to <Node attribute:tensorflow.placeholder>
Assign ['self.rew_t_ph'] [<_ast.Call object at 0x1023f6da0>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute rew_t_ph of self in context <class '_ast.Store'>
Resolve self.rew_t_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr rew_t_ph of <Node class:dqn.QLearner>
setattr rew_t_ph on self to <Node attribute:tensorflow.placeholder>
Assign ['self.obs_tp1_ph'] [<_ast.Call object at 0x1023f6fd0>]
Call tf.placeholder
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute uint8 of tf in context <class '_ast.Load'>
Resolve tf.uint8 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr uint8 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.uint8> (target obj <Node module:tensorflow> known but target attr uint8 not resolved; maybe fwd ref or unanalyzed import)
Call list
Name input_shape in context <class '_ast.Load'>
Get input_shape in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.shape>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.shape>
Name list in context <class '_ast.Load'>
Get list in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.list>
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute obs_tp1_ph of self in context <class '_ast.Store'>
Resolve self.obs_tp1_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_tp1_ph of <Node class:dqn.QLearner>
setattr obs_tp1_ph on self to <Node attribute:tensorflow.placeholder>
Assign ['self.done_mask_ph'] [<_ast.Call object at 0x1023f9400>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute done_mask_ph of self in context <class '_ast.Store'>
Resolve self.done_mask_ph in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr done_mask_ph of <Node class:dqn.QLearner>
setattr done_mask_ph on self to <Node attribute:tensorflow.placeholder>
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Assign ['obs_t_float'] ['self.obs_t_ph']
Attribute obs_t_ph of self in context <class '_ast.Load'>
Resolve self.obs_t_ph in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_t_ph of <Node class:dqn.QLearner>
getattr obs_t_ph on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Name obs_t_float in context <class '_ast.Store'>
Set obs_t_float in <Scope: function __init__> to <Node attribute:tensorflow.placeholder>
Assign ['obs_tp1_float'] ['self.obs_tp1_ph']
Attribute obs_tp1_ph of self in context <class '_ast.Load'>
Resolve self.obs_tp1_ph in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_tp1_ph of <Node class:dqn.QLearner>
getattr obs_tp1_ph on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Name obs_tp1_float in context <class '_ast.Store'>
Set obs_tp1_float in <Scope: function __init__> to <Node attribute:tensorflow.placeholder>
Assign ['obs_t_float'] [<_ast.BinOp object at 0x1023f9828>]
Call tf.cast
Attribute obs_t_ph of self in context <class '_ast.Load'>
Resolve self.obs_t_ph in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_t_ph of <Node class:dqn.QLearner>
getattr obs_t_ph on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute cast of tf in context <class '_ast.Load'>
Resolve tf.cast in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr cast of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.cast> (target obj <Node module:tensorflow> known but target attr cast not resolved; maybe fwd ref or unanalyzed import)
Name obs_t_float in context <class '_ast.Store'>
Set obs_t_float in <Scope: function __init__> to <Node attribute:tensorflow.cast>
Assign ['obs_tp1_float'] [<_ast.BinOp object at 0x1023f9a90>]
Call tf.cast
Attribute obs_tp1_ph of self in context <class '_ast.Load'>
Resolve self.obs_tp1_ph in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr obs_tp1_ph of <Node class:dqn.QLearner>
getattr obs_tp1_ph on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute cast of tf in context <class '_ast.Load'>
Resolve tf.cast in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr cast of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.cast> (target obj <Node module:tensorflow> known but target attr cast not resolved; maybe fwd ref or unanalyzed import)
Name obs_tp1_float in context <class '_ast.Store'>
Set obs_tp1_float in <Scope: function __init__> to <Node attribute:tensorflow.cast>
Assign ['self.learning_rate'] [<_ast.Call object at 0x1023f9d30>]
Call tf.placeholder
Attribute float32 of tf in context <class '_ast.Load'>
Resolve tf.float32 in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr float32 of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> (target obj <Node module:tensorflow> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute placeholder of tf in context <class '_ast.Load'>
Resolve tf.placeholder in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr placeholder of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> (target obj <Node module:tensorflow> known but target attr placeholder not resolved; maybe fwd ref or unanalyzed import)
Attribute learning_rate of self in context <class '_ast.Store'>
Resolve self.learning_rate in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr learning_rate of <Node class:dqn.QLearner>
setattr learning_rate on self to <Node attribute:tensorflow.placeholder>
Assign ['optimizer'] [<_ast.Call object at 0x1023f9f60>]
Call self.optimizer_spec.constructor
Attribute learning_rate of self in context <class '_ast.Load'>
Resolve self.learning_rate in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr learning_rate of <Node class:dqn.QLearner>
getattr learning_rate on self returns <Node attribute:tensorflow.placeholder>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder>
Attribute kwargs of self.optimizer_spec in context <class '_ast.Load'>
Resolve self.optimizer_spec.kwargs in context <class '_ast.Load'>
Resolve self.optimizer_spec in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr optimizer_spec of <Node class:dqn.QLearner>
Resolved to attr kwargs of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.kwargs> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr kwargs not resolved; maybe fwd ref or unanalyzed import)
Attribute constructor of self.optimizer_spec in context <class '_ast.Load'>
Resolve self.optimizer_spec.constructor in context <class '_ast.Load'>
Resolve self.optimizer_spec in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr optimizer_spec of <Node class:dqn.QLearner>
Resolved to attr constructor of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr constructor not resolved; maybe fwd ref or unanalyzed import)
Name optimizer in context <class '_ast.Store'>
Set optimizer in <Scope: function __init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor>
Assign ['self.train_fn'] [<_ast.Call object at 0x1023fd2b0>]
Call minimize_and_clip
Name optimizer in context <class '_ast.Load'>
Get optimizer in <Scope: function __init__>, found in <Scope: function __init__>, value <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor>
Use from <Node method:dqn.QLearner.__init__> to Name <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor>
Attribute total_error of self in context <class '_ast.Load'>
Resolve self.total_error in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr total_error of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.total_error> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.total_error> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name q_func_vars in context <class '_ast.Load'>
Get q_func_vars in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.q_func_vars>
Name grad_norm_clipping in context <class '_ast.Load'>
Get grad_norm_clipping in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name minimize_and_clip in context <class '_ast.Load'>
Get minimize_and_clip in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.minimize_and_clip>
Attribute train_fn of self in context <class '_ast.Store'>
Resolve self.train_fn in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr train_fn of <Node class:dqn.QLearner>
setattr train_fn on self to <Node ???:*.minimize_and_clip>
Assign ['update_target_fn'] []
Name update_target_fn in context <class '_ast.Store'>
Set update_target_fn in <Scope: function __init__>: value None is not a Node
For-loop
Call zip
Call sorted
Name q_func_vars in context <class '_ast.Load'>
Get q_func_vars in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.q_func_vars>
Lambda
Attribute name of v in context <class '_ast.Load'>
Resolve v.name in context <class '_ast.Load'>
Get v in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr name of None
Use from <Node namespace:dqn.QLearner.__init__.lambda> to <Node ???:*.name> (target obj v not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sorted in context <class '_ast.Load'>
Get sorted in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.sorted>
Call sorted
Name target_q_func_vars in context <class '_ast.Load'>
Get target_q_func_vars in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.target_q_func_vars>
Lambda
Attribute name of v in context <class '_ast.Load'>
Resolve v.name in context <class '_ast.Load'>
Get v in <Scope: function lambda>: no Node value (or name not in scope)
Resolved to attr name of None
Use from <Node namespace:dqn.QLearner.__init__.lambda> to <Node ???:*.name> (target obj v not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name sorted in context <class '_ast.Load'>
Get sorted in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.sorted>
Name zip in context <class '_ast.Load'>
Get zip in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.zip>
Name var in context <class '_ast.Store'>
Set var in <Scope: function __init__> to <Node ???:*.zip>
Name var_target in context <class '_ast.Store'>
Set var_target in <Scope: function __init__> to <Node ???:*.zip>
Call update_target_fn.append
Call var_target.assign
Name var in context <class '_ast.Load'>
Get var in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.zip>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.zip>
Attribute assign of var_target in context <class '_ast.Load'>
Resolve var_target.assign in context <class '_ast.Load'>
Get var_target in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ???:*.zip>
Resolved to attr assign of <Node ???:*.zip>
Use from <Node method:dqn.QLearner.__init__> to <Node ???:*.assign> (target obj var_target not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute append of update_target_fn in context <class '_ast.Load'>
Resolve update_target_fn.append in context <class '_ast.Load'>
Get update_target_fn in <Scope: function __init__>, found in <Scope: class QLearner>, value <Node attribute:tensorflow.group>
Resolved to attr append of <Node attribute:tensorflow.group>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.group.append> (target obj <Node attribute:tensorflow.group> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.group.append> resolves <Node ???:*.append>; removing wildcard
New edge added for Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.group.append> (target obj <Node attribute:tensorflow.group> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.update_target_fn'] [<_ast.Call object at 0x1023fdcf8>]
Call tf.group
Name update_target_fn in context <class '_ast.Load'>
Get update_target_fn in <Scope: function __init__>, found in <Scope: class QLearner>, value <Node attribute:tensorflow.group>
Use from <Node method:dqn.QLearner.__init__> to Name <Node attribute:tensorflow.group>
Attribute group of tf in context <class '_ast.Load'>
Resolve tf.group in context <class '_ast.Load'>
Get tf in <Scope: function __init__>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr group of <Node module:tensorflow>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.group> (target obj <Node module:tensorflow> known but target attr group not resolved; maybe fwd ref or unanalyzed import)
Attribute update_target_fn of self in context <class '_ast.Store'>
Resolve self.update_target_fn in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr update_target_fn of <Node class:dqn.QLearner>
setattr update_target_fn on self to <Node attribute:tensorflow.group>
Assign ['self.replay_buffer'] [<_ast.Call object at 0x1023fdeb8>]
Call ReplayBuffer
Name replay_buffer_size in context <class '_ast.Load'>
Get replay_buffer_size in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name frame_history_len in context <class '_ast.Load'>
Get frame_history_len in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to Name <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name ReplayBuffer in context <class '_ast.Load'>
Get ReplayBuffer in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.ReplayBuffer>
Attribute replay_buffer of self in context <class '_ast.Store'>
Resolve self.replay_buffer in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr replay_buffer of <Node class:dqn.QLearner>
setattr replay_buffer on self to <Node ???:*.ReplayBuffer>
Assign ['self.replay_buffer_idx'] [<_ast.NameConstant object at 0x1024030f0>]
Attribute replay_buffer_idx of self in context <class '_ast.Store'>
Assign ['self.model_initialized'] [<_ast.NameConstant object at 0x1024031d0>]
Attribute model_initialized of self in context <class '_ast.Store'>
Assign ['self.num_param_updates'] [<_ast.Num object at 0x1024032b0>]
Attribute num_param_updates of self in context <class '_ast.Store'>
Assign ['self.mean_episode_reward'] [<_ast.UnaryOp object at 0x102403390>]
Call float
Name float in context <class '_ast.Load'>
Get float in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.float>
Attribute mean_episode_reward of self in context <class '_ast.Store'>
Resolve self.mean_episode_reward in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr mean_episode_reward of <Node class:dqn.QLearner>
setattr mean_episode_reward on self to <Node ???:*.float>
Assign ['self.best_mean_episode_reward'] [<_ast.UnaryOp object at 0x102403518>]
Call float
Name float in context <class '_ast.Load'>
Get float in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.__init__> to Name <Node ???:*.float>
Attribute best_mean_episode_reward of self in context <class '_ast.Store'>
Resolve self.best_mean_episode_reward in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr best_mean_episode_reward of <Node class:dqn.QLearner>
setattr best_mean_episode_reward on self to <Node ???:*.float>
Assign ['self.last_obs'] [<_ast.Call object at 0x1024036a0>]
Call self.env.reset
Attribute reset of self.env in context <class '_ast.Load'>
Resolve self.env.reset in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
Resolved to attr reset of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.reset> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr reset not resolved; maybe fwd ref or unanalyzed import)
Attribute last_obs of self in context <class '_ast.Store'>
Resolve self.last_obs in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn.QLearner>
Resolved to attr last_obs of <Node class:dqn.QLearner>
setattr last_obs on self to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.reset>
Assign ['self.log_every_n_steps'] [<_ast.Num object at 0x102403828>]
Attribute log_every_n_steps of self in context <class '_ast.Store'>
Assign ['self.start_time'] [<_ast.NameConstant object at 0x102403908>]
Attribute start_time of self in context <class '_ast.Store'>
Assign ['self.t'] [<_ast.Num object at 0x1024039e8>]
Attribute t of self in context <class '_ast.Store'>
FunctionDef stopping_criterion_met
Set stopping_criterion_met in <Scope: class QLearner> to <Node method:dqn.QLearner.stopping_criterion_met>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Attribute stopping_criterion of self in context <class '_ast.Load'>
Resolve self.stopping_criterion in context <class '_ast.Load'>
Get self in <Scope: function stopping_criterion_met>, found in <Scope: function stopping_criterion_met>, value <Node class:dqn.QLearner>
Resolved to attr stopping_criterion of <Node class:dqn.QLearner>
getattr stopping_criterion on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Call self.stopping_criterion
Attribute env of self in context <class '_ast.Load'>
Resolve self.env in context <class '_ast.Load'>
Get self in <Scope: function stopping_criterion_met>, found in <Scope: function stopping_criterion_met>, value <Node class:dqn.QLearner>
Resolved to attr env of <Node class:dqn.QLearner>
getattr env on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function stopping_criterion_met>, found in <Scope: function stopping_criterion_met>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute stopping_criterion of self in context <class '_ast.Load'>
Resolve self.stopping_criterion in context <class '_ast.Load'>
Get self in <Scope: function stopping_criterion_met>, found in <Scope: function stopping_criterion_met>, value <Node class:dqn.QLearner>
Resolved to attr stopping_criterion of <Node class:dqn.QLearner>
getattr stopping_criterion on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
FunctionDef step_env
Set step_env in <Scope: class QLearner> to <Node method:dqn.QLearner.step_env>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Call print
Name print in context <class '_ast.Load'>
Get print in <Scope: function step_env>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.step_env> to Name <Node ???:*.print>
FunctionDef update_model
Set update_model in <Scope: class QLearner> to <Node method:dqn.QLearner.update_model>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.update_model> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.update_model> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute learning_starts of self in context <class '_ast.Load'>
Resolve self.learning_starts in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr learning_starts of <Node class:dqn.QLearner>
getattr learning_starts on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.update_model> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.update_model> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute learning_freq of self in context <class '_ast.Load'>
Resolve self.learning_freq in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr learning_freq of <Node class:dqn.QLearner>
getattr learning_freq on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.update_model> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Call self.replay_buffer.can_sample
Attribute batch_size of self in context <class '_ast.Load'>
Resolve self.batch_size in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr batch_size of <Node class:dqn.QLearner>
getattr batch_size on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.update_model> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Attribute can_sample of self.replay_buffer in context <class '_ast.Load'>
Resolve self.replay_buffer.can_sample in context <class '_ast.Load'>
Resolve self.replay_buffer in context <class '_ast.Load'>
Get self in <Scope: function update_model>, found in <Scope: function update_model>, value <Node class:dqn.QLearner>
Resolved to attr replay_buffer of <Node class:dqn.QLearner>
Resolved to attr can_sample of <Node ???:*.ReplayBuffer>
Use from <Node method:dqn.QLearner.update_model> to <Node ???:*.can_sample> (target obj self.replay_buffer not resolved; maybe fwd ref, function argument, or unanalyzed import)
AugAssign ['self.num_param_updates'] <class '_ast.Add'> [<_ast.Num object at 0x102407518>]
Attribute num_param_updates of self in context <class '_ast.Store'>
AugAssign ['self.t'] <class '_ast.Add'> [<_ast.Num object at 0x1024075f8>]
Attribute t of self in context <class '_ast.Store'>
FunctionDef log_progress
Set log_progress in <Scope: class QLearner> to <Node method:dqn.QLearner.log_progress>
Method def: setting self name "self" to <Node class:dqn.QLearner>
Assign ['episode_rewards'] [<_ast.Call object at 0x102407748>]
Call <_ast.Call object at 0x1024077b8>.get_episode_rewards
Attribute get_episode_rewards of <_ast.Call object at 0x1024077b8> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x1024077b8>.get_episode_rewards in context <class '_ast.Load'>
Unresolved function call as obj, returning attr get_episode_rewards of unknown
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.get_episode_rewards> (target obj <_ast.Call object at 0x1024077b8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name episode_rewards in context <class '_ast.Store'>
Set episode_rewards in <Scope: function log_progress> to <Node ???:*.get_episode_rewards>
Call len
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Name len in context <class '_ast.Load'>
Get len in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.len>
Assign ['self.mean_episode_reward'] [<_ast.Call object at 0x102407ac8>]
Call np.mean
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Attribute mean of np in context <class '_ast.Load'>
Resolve np.mean in context <class '_ast.Load'>
Get np in <Scope: function log_progress>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr mean of <Node module:numpy>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:numpy.mean> (target obj <Node module:numpy> known but target attr mean not resolved; maybe fwd ref or unanalyzed import)
Attribute mean_episode_reward of self in context <class '_ast.Store'>
Resolve self.mean_episode_reward in context <class '_ast.Store'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr mean_episode_reward of <Node class:dqn.QLearner>
setattr mean_episode_reward on self to <Node attribute:numpy.mean>
Call len
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Name len in context <class '_ast.Load'>
Get len in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.len>
Assign ['self.best_mean_episode_reward'] [<_ast.Call object at 0x102407e80>]
Call max
Attribute best_mean_episode_reward of self in context <class '_ast.Load'>
Resolve self.best_mean_episode_reward in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr best_mean_episode_reward of <Node class:dqn.QLearner>
getattr best_mean_episode_reward on self returns <Node ???:*.float>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.float>
Attribute mean_episode_reward of self in context <class '_ast.Load'>
Resolve self.mean_episode_reward in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr mean_episode_reward of <Node class:dqn.QLearner>
getattr mean_episode_reward on self returns <Node attribute:numpy.mean>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:numpy.mean>
Name max in context <class '_ast.Load'>
Get max in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.max>
Attribute best_mean_episode_reward of self in context <class '_ast.Store'>
Resolve self.best_mean_episode_reward in context <class '_ast.Store'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr best_mean_episode_reward of <Node class:dqn.QLearner>
setattr best_mean_episode_reward on self to <Node ???:*.max>
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute log_every_n_steps of self in context <class '_ast.Load'>
Resolve self.log_every_n_steps in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr log_every_n_steps of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.log_every_n_steps> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.log_every_n_steps> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute model_initialized of self in context <class '_ast.Load'>
Resolve self.model_initialized in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr model_initialized of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.model_initialized> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.model_initialized> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call print
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Attribute mean_episode_reward of self in context <class '_ast.Load'>
Resolve self.mean_episode_reward in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr mean_episode_reward of <Node class:dqn.QLearner>
getattr mean_episode_reward on self returns <Node attribute:numpy.mean>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:numpy.mean>
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Attribute best_mean_episode_reward of self in context <class '_ast.Load'>
Resolve self.best_mean_episode_reward in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr best_mean_episode_reward of <Node class:dqn.QLearner>
getattr best_mean_episode_reward on self returns <Node ???:*.max>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.max>
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Call len
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Name len in context <class '_ast.Load'>
Get len in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.len>
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Call self.exploration.value
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute value of self.exploration in context <class '_ast.Load'>
Resolve self.exploration.value in context <class '_ast.Load'>
Resolve self.exploration in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr exploration of <Node class:dqn.QLearner>
Resolved to attr value of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.value> (target obj <Node ---:dqn.QLearner.__init__.^^^argument^^^> known but target attr value not resolved; maybe fwd ref or unanalyzed import)
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Call print
Call self.optimizer_spec.lr_schedule.value
Attribute t of self in context <class '_ast.Load'>
Resolve self.t in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr t of <Node class:dqn.QLearner>
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.t> (target obj self not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute value of self.optimizer_spec.lr_schedule in context <class '_ast.Load'>
Resolve self.optimizer_spec.lr_schedule.value in context <class '_ast.Load'>
Resolve self.optimizer_spec.lr_schedule in context <class '_ast.Load'>
Resolve self.optimizer_spec in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr optimizer_spec of <Node class:dqn.QLearner>
Resolved to attr lr_schedule of <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Unresolved, returning attr value of unknown
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.value> (target obj self.optimizer_spec.lr_schedule not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Attribute start_time of self in context <class '_ast.Load'>
Resolve self.start_time in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr start_time of <Node class:dqn.QLearner>
getattr start_time on self returns <Node attribute:time.time>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:time.time>
Call print
Call time.time
Attribute time of time in context <class '_ast.Load'>
Resolve time.time in context <class '_ast.Load'>
Get time in <Scope: function log_progress>, found in <Scope: module >, value <Node module:time>
Resolved to attr time of <Node module:time>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
Attribute start_time of self in context <class '_ast.Load'>
Resolve self.start_time in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr start_time of <Node class:dqn.QLearner>
getattr start_time on self returns <Node attribute:time.time>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:time.time>
Name print in context <class '_ast.Load'>
Get print in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.print>
Assign ['self.start_time'] [<_ast.Call object at 0x1024132e8>]
Call time.time
Attribute time of time in context <class '_ast.Load'>
Resolve time.time in context <class '_ast.Load'>
Get time in <Scope: function log_progress>, found in <Scope: module >, value <Node module:time>
Resolved to attr time of <Node module:time>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:time.time> (target obj <Node module:time> known but target attr time not resolved; maybe fwd ref or unanalyzed import)
Attribute start_time of self in context <class '_ast.Store'>
Resolve self.start_time in context <class '_ast.Store'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr start_time of <Node class:dqn.QLearner>
setattr start_time on self to <Node attribute:time.time>
Call sys.stdout.flush
Attribute flush of sys.stdout in context <class '_ast.Load'>
Resolve sys.stdout.flush in context <class '_ast.Load'>
Resolve sys.stdout in context <class '_ast.Load'>
Get sys in <Scope: function log_progress>, found in <Scope: module >, value <Node module:sys>
Resolved to attr stdout of <Node module:sys>
Unresolved, returning attr flush of unknown
Use from <Node method:dqn.QLearner.log_progress> to <Node ???:*.flush> (target obj sys.stdout not resolved; maybe fwd ref, function argument, or unanalyzed import)
With (context manager)
Call open
Attribute rew_file of self in context <class '_ast.Load'>
Resolve self.rew_file in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr rew_file of <Node class:dqn.QLearner>
getattr rew_file on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.log_progress> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.open>
Use from <Node method:dqn.QLearner.log_progress> to With <Node ???:*.open>
Call open
Attribute rew_file of self in context <class '_ast.Load'>
Resolve self.rew_file in context <class '_ast.Load'>
Get self in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node class:dqn.QLearner>
Resolved to attr rew_file of <Node class:dqn.QLearner>
getattr rew_file on self returns <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Use from <Node method:dqn.QLearner.log_progress> to <Node ---:dqn.QLearner.__init__.^^^argument^^^>
Name open in context <class '_ast.Load'>
Get open in <Scope: function log_progress>: no Node value (or name not in scope)
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.open>
Name f in context <class '_ast.Store'>
Set f in <Scope: function log_progress> to <Node ???:*.open>
Call pickle.dump
Name episode_rewards in context <class '_ast.Load'>
Get episode_rewards in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.get_episode_rewards>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.get_episode_rewards>
Name f in context <class '_ast.Load'>
Get f in <Scope: function log_progress>, found in <Scope: function log_progress>, value <Node ???:*.open>
Use from <Node method:dqn.QLearner.log_progress> to Name <Node ???:*.open>
Attribute HIGHEST_PROTOCOL of pickle in context <class '_ast.Load'>
Resolve pickle.HIGHEST_PROTOCOL in context <class '_ast.Load'>
Get pickle in <Scope: function log_progress>, found in <Scope: module >, value <Node module:pickle>
Resolved to attr HIGHEST_PROTOCOL of <Node module:pickle>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:pickle.HIGHEST_PROTOCOL> (target obj <Node module:pickle> known but target attr HIGHEST_PROTOCOL not resolved; maybe fwd ref or unanalyzed import)
Attribute dump of pickle in context <class '_ast.Load'>
Resolve pickle.dump in context <class '_ast.Load'>
Get pickle in <Scope: function log_progress>, found in <Scope: module >, value <Node module:pickle>
Resolved to attr dump of <Node module:pickle>
Use from <Node method:dqn.QLearner.log_progress> to <Node attribute:pickle.dump> (target obj <Node module:pickle> known but target attr dump not resolved; maybe fwd ref or unanalyzed import)
FunctionDef learn
Set learn in <Scope: module > to <Node function:dqn.learn>
Assign ['alg'] [<_ast.Call object at 0x102413978>]
Call QLearner
Name args in context <class '_ast.Load'>
Get args in <Scope: function learn>: no Node value (or name not in scope)
Use from <Node function:dqn.learn> to Name <Node ???:*.args>
Name kwargs in context <class '_ast.Load'>
Get kwargs in <Scope: function learn>: no Node value (or name not in scope)
Use from <Node function:dqn.learn> to Name <Node ???:*.kwargs>
Name QLearner in context <class '_ast.Load'>
Get QLearner in <Scope: function learn>, found in <Scope: module >, value <Node class:dqn.QLearner>
Use from <Node function:dqn.learn> to Name <Node class:dqn.QLearner>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.__init__> (call creates an instance)
Name alg in context <class '_ast.Store'>
Set alg in <Scope: function learn> to <Node class:dqn.QLearner>
Call alg.stopping_criterion_met
Attribute stopping_criterion_met of alg in context <class '_ast.Load'>
Resolve alg.stopping_criterion_met in context <class '_ast.Load'>
Get alg in <Scope: function learn>, found in <Scope: function learn>, value <Node class:dqn.QLearner>
Resolved to attr stopping_criterion_met of <Node class:dqn.QLearner>
getattr stopping_criterion_met on alg returns <Node method:dqn.QLearner.stopping_criterion_met>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.stopping_criterion_met>
Call alg.step_env
Attribute step_env of alg in context <class '_ast.Load'>
Resolve alg.step_env in context <class '_ast.Load'>
Get alg in <Scope: function learn>, found in <Scope: function learn>, value <Node class:dqn.QLearner>
Resolved to attr step_env of <Node class:dqn.QLearner>
getattr step_env on alg returns <Node method:dqn.QLearner.step_env>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.step_env>
Call alg.update_model
Attribute update_model of alg in context <class '_ast.Load'>
Resolve alg.update_model in context <class '_ast.Load'>
Get alg in <Scope: function learn>, found in <Scope: function learn>, value <Node class:dqn.QLearner>
Resolved to attr update_model of <Node class:dqn.QLearner>
getattr update_model on alg returns <Node method:dqn.QLearner.update_model>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.update_model>
Call alg.log_progress
Attribute log_progress of alg in context <class '_ast.Load'>
Resolve alg.log_progress in context <class '_ast.Load'>
Get alg in <Scope: function learn>, found in <Scope: function learn>, value <Node class:dqn.QLearner>
Resolved to attr log_progress of <Node class:dqn.QLearner>
getattr log_progress on alg returns <Node method:dqn.QLearner.log_progress>
Use from <Node function:dqn.learn> to <Node method:dqn.QLearner.log_progress>
Expanding unknowns: new uses edge from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.total_error>
Expanding unknowns: new uses edge from <Node method:dqn.QLearner.stopping_criterion_met> to <Node attribute:dqn.QLearner.t>
Expanding unknowns: new uses edge from <Node method:dqn.QLearner.update_model> to <Node attribute:dqn.QLearner.t>
Expanding unknowns: new uses edge from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.log_every_n_steps>
Expanding unknowns: new uses edge from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.model_initialized>
Expanding unknowns: new uses edge from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.t>
Expanding unknowns: new uses edge from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.value>
Expanding unknowns: new uses edge from <Node function:dqn.learn> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.kwargs>
Contracting non-existent from <Node module:dqn> to <Node import:tf> as <Node ---:*.tf>
Contracting non-existent from <Node module:dqn> to <Node module:collections> as <Node ---:*.collections>
Contracting non-existent from <Node module:dqn> to <Node module:pickle> as <Node ---:*.pickle>
Contracting non-existent from <Node module:dqn> to <Node import:layers> as <Node ---:*.layers>
Contracting non-existent from <Node module:dqn> to <Node module:gym.spaces> as <Node ---:*.gym.spaces>
Contracting non-existent from <Node module:dqn> to <Node module:sys> as <Node ---:*.sys>
Contracting non-existent from <Node module:dqn> to <Node module:dqn_utils> as <Node ---:*.dqn_utils>
Contracting non-existent from <Node module:dqn> to <Node import:collections.namedtuple> as <Node ---:*.namedtuple>
Contracting non-existent from <Node module:dqn> to <Node module:random> as <Node ---:*.random>
Contracting non-existent from <Node module:dqn> to <Node module:itertools> as <Node ---:*.itertools>
Contracting non-existent from <Node module:dqn> to <Node import:np> as <Node ---:*.np>
Contracting non-existent from <Node module:dqn> to <Node module:uuid> as <Node ---:*.uuid>
Contracting non-existent from <Node module:dqn> to <Node module:time> as <Node ---:*.time>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.action_space> as <Node ---:*.action_space>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.group.append> as <Node ???:*.append>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:uuid.uuid4> as <Node ---:*.uuid4>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.placeholder> as <Node ---:*.placeholder>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.constructor> as <Node ---:*.constructor>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.uint8> as <Node ---:*.uint8>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.float32> as <Node ---:*.float32>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.int32> as <Node ---:*.int32>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.cast> as <Node ---:*.cast>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.kwargs> as <Node ???:*.kwargs>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.total_error> as <Node ???:*.total_error>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:tensorflow.group> as <Node ---:*.group>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node ---:dqn.QLearner.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.reset> as <Node ---:*.reset>
Contracting non-existent from <Node method:dqn.QLearner.__init__> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.observation_space> as <Node ---:*.observation_space>
Contracting non-existent from <Node method:dqn.QLearner.stopping_criterion_met> to <Node attribute:dqn.QLearner.t> as <Node ???:*.t>
Contracting non-existent from <Node method:dqn.QLearner.stopping_criterion_met> to <Node ---:dqn.QLearner.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn.QLearner.update_model> to <Node attribute:dqn.QLearner.t> as <Node ???:*.t>
Contracting non-existent from <Node method:dqn.QLearner.update_model> to <Node ---:dqn.QLearner.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.model_initialized> as <Node ???:*.model_initialized>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:numpy.mean> as <Node ---:*.mean>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.log_every_n_steps> as <Node ???:*.log_every_n_steps>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.start_time> as <Node ---:*.start_time>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.value> as <Node ???:*.value>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node method:*.open.__enter__> as <Node ---:*.__enter__>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:time.time> as <Node ---:*.time>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node method:*.open.__exit__> as <Node ---:*.__exit__>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:pickle.dump> as <Node ---:*.dump>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:pickle.HIGHEST_PROTOCOL> as <Node ---:*.HIGHEST_PROTOCOL>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node ---:dqn.QLearner.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn.QLearner.log_progress> to <Node attribute:dqn.QLearner.t> as <Node ???:*.t>
Contracting non-existent from <Node function:dqn.learn> to <Node attribute:dqn.QLearner.__init__.^^^argument^^^.kwargs> as <Node ???:*.kwargs>
Collapsing inner from <Node namespace:dqn.QLearner.__init__.lambda> to <Node method:dqn.QLearner.__init__>, uses <Node ???:*.name>
Looking at dqn
Coloring dqn from file 'dqn.py'
Looking at QLearner
Coloring QLearner from file 'dqn.py'
New namespace dqn, old was 
Looking at learn
Coloring learn from file 'dqn.py'
New namespace dqn, old was 
Looking at __init__
Coloring __init__ from file 'dqn.py'
New namespace dqn.QLearner, old was 
Looking at log_progress
Coloring log_progress from file 'dqn.py'
New namespace dqn.QLearner, old was 
Looking at step_env
Coloring step_env from file 'dqn.py'
New namespace dqn.QLearner, old was 
Looking at stopping_criterion_met
Coloring stopping_criterion_met from file 'dqn.py'
New namespace dqn.QLearner, old was 
Looking at update_model
Coloring update_model from file 'dqn.py'
New namespace dqn.QLearner, old was 
<class 'pyan.writers.DotWriter'> running
Start subgraph 
Write node dqn
Start subgraph dqn
Write node QLearner\n(dqn.py:16)
Finish subgraph dqn
Start subgraph dqn
Write node learn\n(dqn.py:308)
Finish subgraph dqn
Start subgraph dqn.QLearner
Write node __init__\n(dqn.py:18)
Finish subgraph dqn.QLearner
Start subgraph dqn.QLearner
Write node log_progress\n(dqn.py:282)
Finish subgraph dqn.QLearner
Start subgraph dqn.QLearner
Write node step_env\n(dqn.py:198)
Finish subgraph dqn.QLearner
Start subgraph dqn.QLearner
Write node stopping_criterion_met\n(dqn.py:195)
Finish subgraph dqn.QLearner
Start subgraph dqn.QLearner
Write node update_model\n(dqn.py:233)
Finish subgraph dqn.QLearner
Finish subgraph 
