========== pass 1, file 'dqn_utils.py' ==========
Scopes now: {'dqn_utils': <Scope: module >, 'dqn_utils.huber_loss': <Scope: function huber_loss>, 'dqn_utils.sample_n_unique': <Scope: function sample_n_unique>, 'dqn_utils.Schedule': <Scope: class Schedule>, 'dqn_utils.Schedule.value': <Scope: function value>, 'dqn_utils.ConstantSchedule': <Scope: class ConstantSchedule>, 'dqn_utils.ConstantSchedule.__init__': <Scope: function __init__>, 'dqn_utils.ConstantSchedule.value': <Scope: function value>, 'dqn_utils.linear_interpolation': <Scope: function linear_interpolation>, 'dqn_utils.PiecewiseSchedule': <Scope: class PiecewiseSchedule>, 'dqn_utils.PiecewiseSchedule.__init__': <Scope: function __init__>, 'dqn_utils.PiecewiseSchedule.__init__.listcomp': <Scope: function listcomp>, 'dqn_utils.PiecewiseSchedule.value': <Scope: function value>, 'dqn_utils.LinearSchedule': <Scope: class LinearSchedule>, 'dqn_utils.LinearSchedule.__init__': <Scope: function __init__>, 'dqn_utils.LinearSchedule.value': <Scope: function value>, 'dqn_utils.compute_exponential_averages': <Scope: function compute_exponential_averages>, 'dqn_utils.compute_exponential_averages.listcomp': <Scope: function listcomp>, 'dqn_utils.minimize_and_clip': <Scope: function minimize_and_clip>, 'dqn_utils.initialize_interdependent_variables': <Scope: function initialize_interdependent_variables>, 'dqn_utils.get_wrapper_by_name': <Scope: function get_wrapper_by_name>, 'dqn_utils.ReplayBuffer': <Scope: class ReplayBuffer>, 'dqn_utils.ReplayBuffer.__init__': <Scope: function __init__>, 'dqn_utils.ReplayBuffer.can_sample': <Scope: function can_sample>, 'dqn_utils.ReplayBuffer._encode_sample': <Scope: function _encode_sample>, 'dqn_utils.ReplayBuffer._encode_sample.listcomp': <Scope: function listcomp>, 'dqn_utils.ReplayBuffer.sample': <Scope: function sample>, 'dqn_utils.ReplayBuffer.sample.lambda': <Scope: function lambda>, 'dqn_utils.ReplayBuffer.encode_recent_observation': <Scope: function encode_recent_observation>, 'dqn_utils.ReplayBuffer._encode_observation': <Scope: function _encode_observation>, 'dqn_utils.ReplayBuffer._encode_observation.listcomp': <Scope: function listcomp>, 'dqn_utils.ReplayBuffer.store_frame': <Scope: function store_frame>, 'dqn_utils.ReplayBuffer.store_effect': <Scope: function store_effect>}
Module
Import ['gym']
Set gym in <Scope: module > to <Node module:gym>
Use from <Node module:dqn_utils> to Import <Node module:gym>
New edge added for Use from <Node module:dqn_utils> to Import <Node module:gym>
Import ['tensorflow as tf']
Set tf in <Scope: module > to <Node module:tensorflow>
Use from <Node module:dqn_utils> to Import <Node import:tf>
New edge added for Use from <Node module:dqn_utils> to Import <Node import:tf>
Import ['numpy as np']
Set np in <Scope: module > to <Node module:numpy>
Use from <Node module:dqn_utils> to Import <Node import:np>
New edge added for Use from <Node module:dqn_utils> to Import <Node import:np>
Import ['random']
Set random in <Scope: module > to <Node module:random>
Use from <Node module:dqn_utils> to Import <Node module:random>
New edge added for Use from <Node module:dqn_utils> to Import <Node module:random>
FunctionDef huber_loss
Def from <Node module:dqn_utils> to Function <Node function:dqn_utils.huber_loss>
Set huber_loss in <Scope: module > to <Node function:dqn_utils.huber_loss>
Call tf.where
Call tf.abs
Name x in context <class '_ast.Load'>
Get x in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
New edge added for Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Attribute abs of tf in context <class '_ast.Load'>
Resolve tf.abs in context <class '_ast.Load'>
Get tf in <Scope: function huber_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr abs of <Node module:tensorflow>
Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.abs> (target obj <Node module:tensorflow> known but target attr abs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.abs> (target obj <Node module:tensorflow> known but target attr abs not resolved; maybe fwd ref or unanalyzed import)
Name delta in context <class '_ast.Load'>
Get delta in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Call tf.square
Name x in context <class '_ast.Load'>
Get x in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Attribute square of tf in context <class '_ast.Load'>
Resolve tf.square in context <class '_ast.Load'>
Get tf in <Scope: function huber_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr square of <Node module:tensorflow>
Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.square> (target obj <Node module:tensorflow> known but target attr square not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.square> (target obj <Node module:tensorflow> known but target attr square not resolved; maybe fwd ref or unanalyzed import)
Name delta in context <class '_ast.Load'>
Get delta in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Call tf.abs
Name x in context <class '_ast.Load'>
Get x in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Attribute abs of tf in context <class '_ast.Load'>
Resolve tf.abs in context <class '_ast.Load'>
Get tf in <Scope: function huber_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr abs of <Node module:tensorflow>
Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.abs> (target obj <Node module:tensorflow> known but target attr abs not resolved; maybe fwd ref or unanalyzed import)
Name delta in context <class '_ast.Load'>
Get delta in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Attribute where of tf in context <class '_ast.Load'>
Resolve tf.where in context <class '_ast.Load'>
Get tf in <Scope: function huber_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr where of <Node module:tensorflow>
Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.where> (target obj <Node module:tensorflow> known but target attr where not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.where> (target obj <Node module:tensorflow> known but target attr where not resolved; maybe fwd ref or unanalyzed import)
FunctionDef sample_n_unique
Def from <Node module:dqn_utils> to Function <Node function:dqn_utils.sample_n_unique>
Set sample_n_unique in <Scope: module > to <Node function:dqn_utils.sample_n_unique>
Assign ['res'] []
Name res in context <class '_ast.Store'>
Set res in <Scope: function sample_n_unique>: value None is not a Node
Call len
Name res in context <class '_ast.Load'>
Get res in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.res>
New edge added for Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.res>
Name len in context <class '_ast.Load'>
Get len in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.len>
New edge added for Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.len>
Name n in context <class '_ast.Load'>
Get n in <Scope: function sample_n_unique>, found in <Scope: function sample_n_unique>, value <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
New edge added for Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Assign ['candidate'] [<_ast.Call object at 0x1025a8828>]
Call sampling_f
Name sampling_f in context <class '_ast.Load'>
Get sampling_f in <Scope: function sample_n_unique>, found in <Scope: function sample_n_unique>, value <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Name candidate in context <class '_ast.Store'>
Set candidate in <Scope: function sample_n_unique> to <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Name candidate in context <class '_ast.Load'>
Get candidate in <Scope: function sample_n_unique>, found in <Scope: function sample_n_unique>, value <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Name res in context <class '_ast.Load'>
Get res in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.res>
Call res.append
Name candidate in context <class '_ast.Load'>
Get candidate in <Scope: function sample_n_unique>, found in <Scope: function sample_n_unique>, value <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Attribute append of res in context <class '_ast.Load'>
Resolve res.append in context <class '_ast.Load'>
Get res in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:dqn_utils.sample_n_unique> to <Node ???:*.append> (target obj res not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.sample_n_unique> to <Node ???:*.append> (target obj res not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name res in context <class '_ast.Load'>
Get res in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.res>
ClassDef Schedule
Def from <Node module:dqn_utils> to Class <Node class:dqn_utils.Schedule>
Set Schedule in <Scope: module > to <Node class:dqn_utils.Schedule>
Name object in context <class '_ast.Load'>
Get object in <Scope: class Schedule>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.Schedule> to Name <Node ???:*.object>
New edge added for Use from <Node class:dqn_utils.Schedule> to Name <Node ???:*.object>
FunctionDef value
Def from <Node class:dqn_utils.Schedule> to Function <Node method:dqn_utils.Schedule.value>
Set value in <Scope: class Schedule> to <Node method:dqn_utils.Schedule.value>
Method def: setting self name "self" to <Node class:dqn_utils.Schedule>
Call NotImplementedError
Name NotImplementedError in context <class '_ast.Load'>
Get NotImplementedError in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.Schedule.value> to Name <Node ???:*.NotImplementedError>
New edge added for Use from <Node method:dqn_utils.Schedule.value> to Name <Node ???:*.NotImplementedError>
ClassDef ConstantSchedule
Def from <Node module:dqn_utils> to Class <Node class:dqn_utils.ConstantSchedule>
Set ConstantSchedule in <Scope: module > to <Node class:dqn_utils.ConstantSchedule>
Name object in context <class '_ast.Load'>
Get object in <Scope: class ConstantSchedule>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.ConstantSchedule> to Name <Node ???:*.object>
New edge added for Use from <Node class:dqn_utils.ConstantSchedule> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:dqn_utils.ConstantSchedule> to Function <Node method:dqn_utils.ConstantSchedule.__init__>
Set __init__ in <Scope: class ConstantSchedule> to <Node method:dqn_utils.ConstantSchedule.__init__>
Method def: setting self name "self" to <Node class:dqn_utils.ConstantSchedule>
Assign ['self._v'] ['value']
Name value in context <class '_ast.Load'>
Get value in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ConstantSchedule.__init__> to Name <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ConstantSchedule.__init__> to Name <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
Attribute _v of self in context <class '_ast.Store'>
Resolve self._v in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.ConstantSchedule>
Resolved to attr _v of <Node class:dqn_utils.ConstantSchedule>
setattr _v on self to <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
FunctionDef value
Def from <Node class:dqn_utils.ConstantSchedule> to Function <Node method:dqn_utils.ConstantSchedule.value>
Set value in <Scope: class ConstantSchedule> to <Node method:dqn_utils.ConstantSchedule.value>
Method def: setting self name "self" to <Node class:dqn_utils.ConstantSchedule>
Attribute _v of self in context <class '_ast.Load'>
Resolve self._v in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.ConstantSchedule>
Resolved to attr _v of <Node class:dqn_utils.ConstantSchedule>
getattr _v on self returns <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ConstantSchedule.value> to <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ConstantSchedule.value> to <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
FunctionDef linear_interpolation
Def from <Node module:dqn_utils> to Function <Node function:dqn_utils.linear_interpolation>
Set linear_interpolation in <Scope: module > to <Node function:dqn_utils.linear_interpolation>
Name l in context <class '_ast.Load'>
Get l in <Scope: function linear_interpolation>, found in <Scope: function linear_interpolation>, value <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
New edge added for Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Name alpha in context <class '_ast.Load'>
Get alpha in <Scope: function linear_interpolation>, found in <Scope: function linear_interpolation>, value <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Name r in context <class '_ast.Load'>
Get r in <Scope: function linear_interpolation>, found in <Scope: function linear_interpolation>, value <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Name l in context <class '_ast.Load'>
Get l in <Scope: function linear_interpolation>, found in <Scope: function linear_interpolation>, value <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
ClassDef PiecewiseSchedule
Def from <Node module:dqn_utils> to Class <Node class:dqn_utils.PiecewiseSchedule>
Set PiecewiseSchedule in <Scope: module > to <Node class:dqn_utils.PiecewiseSchedule>
Name object in context <class '_ast.Load'>
Get object in <Scope: class PiecewiseSchedule>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.PiecewiseSchedule> to Name <Node ???:*.object>
New edge added for Use from <Node class:dqn_utils.PiecewiseSchedule> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:dqn_utils.PiecewiseSchedule> to Function <Node method:dqn_utils.PiecewiseSchedule.__init__>
Set __init__ in <Scope: class PiecewiseSchedule> to <Node method:dqn_utils.PiecewiseSchedule.__init__>
Method def: setting self name "self" to <Node class:dqn_utils.PiecewiseSchedule>
Name linear_interpolation in context <class '_ast.Load'>
Get linear_interpolation in <Scope: function __init__>, found in <Scope: module >, value <Node function:dqn_utils.linear_interpolation>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node function:dqn_utils.linear_interpolation>
New edge added for Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node function:dqn_utils.linear_interpolation>
Assign ['idxes'] [<_ast.ListComp object at 0x1025b4828>]
ListComp
Name e in context <class '_ast.Load'>
Get e in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to Name <Node ???:*.e>
New edge added for Use from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to Name <Node ???:*.e>
Name endpoints in context <class '_ast.Load'>
Get endpoints in <Scope: function listcomp>, found in <Scope: function __init__>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
New edge added for Use from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Name e in context <class '_ast.Store'>
Set e in <Scope: function listcomp> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Def from <Node method:dqn_utils.PiecewiseSchedule.__init__> to listcomp <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Name idxes in context <class '_ast.Store'>
Set idxes in <Scope: function __init__> to <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function __init__>, found in <Scope: function __init__>, value <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
New edge added for Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Call sorted
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function __init__>, found in <Scope: function __init__>, value <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Name sorted in context <class '_ast.Load'>
Get sorted in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ???:*.sorted>
New edge added for Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ???:*.sorted>
Assign ['self._interpolation'] ['interpolation']
Name interpolation in context <class '_ast.Load'>
Get interpolation in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _interpolation of self in context <class '_ast.Store'>
Resolve self._interpolation in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _interpolation of <Node class:dqn_utils.PiecewiseSchedule>
setattr _interpolation on self to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Assign ['self._outside_value'] ['outside_value']
Name outside_value in context <class '_ast.Load'>
Get outside_value in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _outside_value of self in context <class '_ast.Store'>
Resolve self._outside_value in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _outside_value of <Node class:dqn_utils.PiecewiseSchedule>
setattr _outside_value on self to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Assign ['self._endpoints'] ['endpoints']
Name endpoints in context <class '_ast.Load'>
Get endpoints in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _endpoints of self in context <class '_ast.Store'>
Resolve self._endpoints in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _endpoints of <Node class:dqn_utils.PiecewiseSchedule>
setattr _endpoints on self to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
FunctionDef value
Def from <Node class:dqn_utils.PiecewiseSchedule> to Function <Node method:dqn_utils.PiecewiseSchedule.value>
Set value in <Scope: class PiecewiseSchedule> to <Node method:dqn_utils.PiecewiseSchedule.value>
Method def: setting self name "self" to <Node class:dqn_utils.PiecewiseSchedule>
For-loop
Call zip
Attribute _endpoints of self in context <class '_ast.Load'>
Resolve self._endpoints in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _endpoints of <Node class:dqn_utils.PiecewiseSchedule>
getattr _endpoints on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _endpoints of self in context <class '_ast.Load'>
Resolve self._endpoints in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _endpoints of <Node class:dqn_utils.PiecewiseSchedule>
getattr _endpoints on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Name zip in context <class '_ast.Load'>
Get zip in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
New edge added for Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name l_t in context <class '_ast.Store'>
Set l_t in <Scope: function value> to <Node ???:*.zip>
Name l in context <class '_ast.Store'>
Set l in <Scope: function value> to <Node ???:*.zip>
Name r_t in context <class '_ast.Store'>
Set r_t in <Scope: function value> to <Node ???:*.zip>
Name r in context <class '_ast.Store'>
Set r in <Scope: function value> to <Node ???:*.zip>
Name l_t in context <class '_ast.Load'>
Get l_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name t in context <class '_ast.Load'>
Get t in <Scope: function value>, found in <Scope: function value>, value <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Name t in context <class '_ast.Load'>
Get t in <Scope: function value>, found in <Scope: function value>, value <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Name r_t in context <class '_ast.Load'>
Get r_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Assign ['alpha'] [<_ast.BinOp object at 0x1025b8630>]
Call float
Name t in context <class '_ast.Load'>
Get t in <Scope: function value>, found in <Scope: function value>, value <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Name l_t in context <class '_ast.Load'>
Get l_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name float in context <class '_ast.Load'>
Get float in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.float>
New edge added for Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.float>
Name r_t in context <class '_ast.Load'>
Get r_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name l_t in context <class '_ast.Load'>
Get l_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name alpha in context <class '_ast.Store'>
Set alpha in <Scope: function value> to <Node ???:*.zip>
Call self._interpolation
Name l in context <class '_ast.Load'>
Get l in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name r in context <class '_ast.Load'>
Get r in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name alpha in context <class '_ast.Load'>
Get alpha in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Attribute _interpolation of self in context <class '_ast.Load'>
Resolve self._interpolation in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _interpolation of <Node class:dqn_utils.PiecewiseSchedule>
getattr _interpolation on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _outside_value of self in context <class '_ast.Load'>
Resolve self._outside_value in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _outside_value of <Node class:dqn_utils.PiecewiseSchedule>
getattr _outside_value on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _outside_value of self in context <class '_ast.Load'>
Resolve self._outside_value in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _outside_value of <Node class:dqn_utils.PiecewiseSchedule>
getattr _outside_value on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
ClassDef LinearSchedule
Def from <Node module:dqn_utils> to Class <Node class:dqn_utils.LinearSchedule>
Set LinearSchedule in <Scope: module > to <Node class:dqn_utils.LinearSchedule>
Name object in context <class '_ast.Load'>
Get object in <Scope: class LinearSchedule>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.LinearSchedule> to Name <Node ???:*.object>
New edge added for Use from <Node class:dqn_utils.LinearSchedule> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:dqn_utils.LinearSchedule> to Function <Node method:dqn_utils.LinearSchedule.__init__>
Set __init__ in <Scope: class LinearSchedule> to <Node method:dqn_utils.LinearSchedule.__init__>
Method def: setting self name "self" to <Node class:dqn_utils.LinearSchedule>
Assign ['self.schedule_timesteps'] ['schedule_timesteps']
Name schedule_timesteps in context <class '_ast.Load'>
Get schedule_timesteps in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.__init__> to Name <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.LinearSchedule.__init__> to Name <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Attribute schedule_timesteps of self in context <class '_ast.Store'>
Resolve self.schedule_timesteps in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr schedule_timesteps of <Node class:dqn_utils.LinearSchedule>
setattr schedule_timesteps on self to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Assign ['self.final_p'] ['final_p']
Name final_p in context <class '_ast.Load'>
Get final_p in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.__init__> to Name <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Attribute final_p of self in context <class '_ast.Store'>
Resolve self.final_p in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr final_p of <Node class:dqn_utils.LinearSchedule>
setattr final_p on self to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Assign ['self.initial_p'] ['initial_p']
Name initial_p in context <class '_ast.Load'>
Get initial_p in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.__init__> to Name <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Attribute initial_p of self in context <class '_ast.Store'>
Resolve self.initial_p in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr initial_p of <Node class:dqn_utils.LinearSchedule>
setattr initial_p on self to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
FunctionDef value
Def from <Node class:dqn_utils.LinearSchedule> to Function <Node method:dqn_utils.LinearSchedule.value>
Set value in <Scope: class LinearSchedule> to <Node method:dqn_utils.LinearSchedule.value>
Method def: setting self name "self" to <Node class:dqn_utils.LinearSchedule>
Assign ['fraction'] [<_ast.Call object at 0x1025bb278>]
Call min
Call float
Name t in context <class '_ast.Load'>
Get t in <Scope: function value>, found in <Scope: function value>, value <Node ---:dqn_utils.LinearSchedule.value.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ---:dqn_utils.LinearSchedule.value.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ---:dqn_utils.LinearSchedule.value.^^^argument^^^>
Name float in context <class '_ast.Load'>
Get float in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ???:*.float>
New edge added for Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ???:*.float>
Attribute schedule_timesteps of self in context <class '_ast.Load'>
Resolve self.schedule_timesteps in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr schedule_timesteps of <Node class:dqn_utils.LinearSchedule>
getattr schedule_timesteps on self returns <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Name min in context <class '_ast.Load'>
Get min in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ???:*.min>
New edge added for Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ???:*.min>
Name fraction in context <class '_ast.Store'>
Set fraction in <Scope: function value> to <Node ???:*.min>
Attribute initial_p of self in context <class '_ast.Load'>
Resolve self.initial_p in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr initial_p of <Node class:dqn_utils.LinearSchedule>
getattr initial_p on self returns <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Name fraction in context <class '_ast.Load'>
Get fraction in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.min>
Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ???:*.min>
Attribute final_p of self in context <class '_ast.Load'>
Resolve self.final_p in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr final_p of <Node class:dqn_utils.LinearSchedule>
getattr final_p on self returns <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Attribute initial_p of self in context <class '_ast.Load'>
Resolve self.initial_p in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr initial_p of <Node class:dqn_utils.LinearSchedule>
getattr initial_p on self returns <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
FunctionDef compute_exponential_averages
Def from <Node module:dqn_utils> to Function <Node function:dqn_utils.compute_exponential_averages>
Set compute_exponential_averages in <Scope: module > to <Node function:dqn_utils.compute_exponential_averages>
Assign ['averager'] [<_ast.Call object at 0x1025bb898>]
Call tf.train.ExponentialMovingAverage
Name decay in context <class '_ast.Load'>
Get decay in <Scope: function compute_exponential_averages>, found in <Scope: function compute_exponential_averages>, value <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Use from <Node function:dqn_utils.compute_exponential_averages> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
New edge added for Use from <Node function:dqn_utils.compute_exponential_averages> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Attribute ExponentialMovingAverage of tf.train in context <class '_ast.Load'>
Resolve tf.train.ExponentialMovingAverage in context <class '_ast.Load'>
Resolve tf.train in context <class '_ast.Load'>
Get tf in <Scope: function compute_exponential_averages>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr train of <Node module:tensorflow>
Unresolved, returning attr ExponentialMovingAverage of unknown
Use from <Node function:dqn_utils.compute_exponential_averages> to <Node ???:*.ExponentialMovingAverage> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.compute_exponential_averages> to <Node ???:*.ExponentialMovingAverage> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name averager in context <class '_ast.Store'>
Set averager in <Scope: function compute_exponential_averages> to <Node ???:*.ExponentialMovingAverage>
Assign ['apply_op'] [<_ast.Call object at 0x1025bba58>]
Call averager.apply
Name variables in context <class '_ast.Load'>
Get variables in <Scope: function compute_exponential_averages>, found in <Scope: function compute_exponential_averages>, value <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Use from <Node function:dqn_utils.compute_exponential_averages> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Attribute apply of averager in context <class '_ast.Load'>
Resolve averager.apply in context <class '_ast.Load'>
Get averager in <Scope: function compute_exponential_averages>, found in <Scope: function compute_exponential_averages>, value <Node ???:*.ExponentialMovingAverage>
Resolved to attr apply of <Node ???:*.ExponentialMovingAverage>
Use from <Node function:dqn_utils.compute_exponential_averages> to <Node ???:*.apply> (target obj averager not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.compute_exponential_averages> to <Node ???:*.apply> (target obj averager not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name apply_op in context <class '_ast.Store'>
Set apply_op in <Scope: function compute_exponential_averages> to <Node ???:*.apply>
ListComp
Call averager.average
Name v in context <class '_ast.Load'>
Get v in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to Name <Node ???:*.v>
New edge added for Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to Name <Node ???:*.v>
Attribute average of averager in context <class '_ast.Load'>
Resolve averager.average in context <class '_ast.Load'>
Get averager in <Scope: function listcomp>, found in <Scope: function compute_exponential_averages>, value <Node ???:*.ExponentialMovingAverage>
Resolved to attr average of <Node ???:*.ExponentialMovingAverage>
Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to <Node ???:*.average> (target obj averager not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to <Node ???:*.average> (target obj averager not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name variables in context <class '_ast.Load'>
Get variables in <Scope: function listcomp>, found in <Scope: function compute_exponential_averages>, value <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
New edge added for Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Name v in context <class '_ast.Store'>
Set v in <Scope: function listcomp> to <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Def from <Node function:dqn_utils.compute_exponential_averages> to listcomp <Node namespace:dqn_utils.compute_exponential_averages.listcomp>
Name apply_op in context <class '_ast.Load'>
Get apply_op in <Scope: function compute_exponential_averages>, found in <Scope: function compute_exponential_averages>, value <Node ???:*.apply>
Use from <Node function:dqn_utils.compute_exponential_averages> to Name <Node ???:*.apply>
FunctionDef minimize_and_clip
Def from <Node module:dqn_utils> to Function <Node function:dqn_utils.minimize_and_clip>
Set minimize_and_clip in <Scope: module > to <Node function:dqn_utils.minimize_and_clip>
Assign ['gradients'] [<_ast.Call object at 0x1025bf048>]
Call optimizer.compute_gradients
Name objective in context <class '_ast.Load'>
Get objective in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
New edge added for Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Name var_list in context <class '_ast.Load'>
Get var_list in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Attribute compute_gradients of optimizer in context <class '_ast.Load'>
Resolve optimizer.compute_gradients in context <class '_ast.Load'>
Get optimizer in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Resolved to attr compute_gradients of <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients> (target obj <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^> known but target attr compute_gradients not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients> (target obj <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^> known but target attr compute_gradients not resolved; maybe fwd ref or unanalyzed import)
Name gradients in context <class '_ast.Store'>
Set gradients in <Scope: function minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
For-loop
Call enumerate
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Name enumerate in context <class '_ast.Load'>
Get enumerate in <Scope: function minimize_and_clip>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
New edge added for Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Name i in context <class '_ast.Store'>
Set i in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name grad in context <class '_ast.Store'>
Set grad in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name var in context <class '_ast.Store'>
Set var in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name grad in context <class '_ast.Load'>
Get grad in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Assign [<_ast.Subscript object at 0x1025bf4a8>] [<_ast.Call object at 0x1025bf5c0>, 'var']
Call tf.clip_by_norm
Name grad in context <class '_ast.Load'>
Get grad in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Name clip_val in context <class '_ast.Load'>
Get clip_val in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Attribute clip_by_norm of tf in context <class '_ast.Load'>
Resolve tf.clip_by_norm in context <class '_ast.Load'>
Get tf in <Scope: function minimize_and_clip>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr clip_by_norm of <Node module:tensorflow>
Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:tensorflow.clip_by_norm> (target obj <Node module:tensorflow> known but target attr clip_by_norm not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:tensorflow.clip_by_norm> (target obj <Node module:tensorflow> known but target attr clip_by_norm not resolved; maybe fwd ref or unanalyzed import)
Name var in context <class '_ast.Load'>
Get var in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Name i in context <class '_ast.Load'>
Get i in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Call optimizer.apply_gradients
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Attribute apply_gradients of optimizer in context <class '_ast.Load'>
Resolve optimizer.apply_gradients in context <class '_ast.Load'>
Get optimizer in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Resolved to attr apply_gradients of <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.apply_gradients> (target obj <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^> known but target attr apply_gradients not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.apply_gradients> (target obj <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^> known but target attr apply_gradients not resolved; maybe fwd ref or unanalyzed import)
FunctionDef initialize_interdependent_variables
Def from <Node module:dqn_utils> to Function <Node function:dqn_utils.initialize_interdependent_variables>
Set initialize_interdependent_variables in <Scope: module > to <Node function:dqn_utils.initialize_interdependent_variables>
Assign ['vars_left'] ['vars_list']
Name vars_list in context <class '_ast.Load'>
Get vars_list in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
New edge added for Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Name vars_left in context <class '_ast.Store'>
Set vars_left in <Scope: function initialize_interdependent_variables> to <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Call len
Name vars_left in context <class '_ast.Load'>
Get vars_left in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.len>
New edge added for Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.len>
Assign ['new_vars_left'] []
Name new_vars_left in context <class '_ast.Store'>
Set new_vars_left in <Scope: function initialize_interdependent_variables>: value None is not a Node
For-loop
Name vars_left in context <class '_ast.Load'>
Get vars_left in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Name v in context <class '_ast.Store'>
Set v in <Scope: function initialize_interdependent_variables> to <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Call session.run
Call tf.variables_initializer
Name v in context <class '_ast.Load'>
Get v in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Attribute variables_initializer of tf in context <class '_ast.Load'>
Resolve tf.variables_initializer in context <class '_ast.Load'>
Get tf in <Scope: function initialize_interdependent_variables>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variables_initializer of <Node module:tensorflow>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:tensorflow.variables_initializer> (target obj <Node module:tensorflow> known but target attr variables_initializer not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:tensorflow.variables_initializer> (target obj <Node module:tensorflow> known but target attr variables_initializer not resolved; maybe fwd ref or unanalyzed import)
Name feed_dict in context <class '_ast.Load'>
Get feed_dict in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Attribute run of session in context <class '_ast.Load'>
Resolve session.run in context <class '_ast.Load'>
Get session in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Resolved to attr run of <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:dqn_utils.initialize_interdependent_variables.^^^argument^^^.run> (target obj <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:dqn_utils.initialize_interdependent_variables.^^^argument^^^.run> (target obj <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Attribute FailedPreconditionError of tf.errors in context <class '_ast.Load'>
Resolve tf.errors.FailedPreconditionError in context <class '_ast.Load'>
Resolve tf.errors in context <class '_ast.Load'>
Get tf in <Scope: function initialize_interdependent_variables>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr errors of <Node module:tensorflow>
Unresolved, returning attr FailedPreconditionError of unknown
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node ???:*.FailedPreconditionError> (target obj tf.errors not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node ???:*.FailedPreconditionError> (target obj tf.errors not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call new_vars_left.append
Name v in context <class '_ast.Load'>
Get v in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Attribute append of new_vars_left in context <class '_ast.Load'>
Resolve new_vars_left.append in context <class '_ast.Load'>
Get new_vars_left in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node ???:*.append> (target obj new_vars_left not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node ???:*.append> (target obj new_vars_left not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call len
Name new_vars_left in context <class '_ast.Load'>
Get new_vars_left in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.new_vars_left>
New edge added for Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.new_vars_left>
Name len in context <class '_ast.Load'>
Get len in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.len>
Call len
Name vars_left in context <class '_ast.Load'>
Get vars_left in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.len>
Call Exception
Name Exception in context <class '_ast.Load'>
Get Exception in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.Exception>
New edge added for Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.Exception>
Assign ['vars_left'] ['new_vars_left']
Name new_vars_left in context <class '_ast.Load'>
Get new_vars_left in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.new_vars_left>
Name vars_left in context <class '_ast.Store'>
Set vars_left in <Scope: function initialize_interdependent_variables> to <Node ???:*.new_vars_left>
FunctionDef get_wrapper_by_name
Def from <Node module:dqn_utils> to Function <Node function:dqn_utils.get_wrapper_by_name>
Set get_wrapper_by_name in <Scope: module > to <Node function:dqn_utils.get_wrapper_by_name>
Assign ['currentenv'] ['env']
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
New edge added for Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Name currentenv in context <class '_ast.Store'>
Set currentenv in <Scope: function get_wrapper_by_name> to <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Name classname in context <class '_ast.Load'>
Get classname in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Attribute __name__ of currentenv.__class__ in context <class '_ast.Load'>
Resolve currentenv.__class__.__name__ in context <class '_ast.Load'>
Resolve currentenv.__class__ in context <class '_ast.Load'>
Get currentenv in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Resolved to attr __class__ of <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Unresolved, returning attr __name__ of unknown
Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node ???:*.__name__> (target obj currentenv.__class__ not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node ???:*.__name__> (target obj currentenv.__class__ not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name currentenv in context <class '_ast.Load'>
Get currentenv in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Call isinstance
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Attribute Wrapper of gym in context <class '_ast.Load'>
Resolve gym.Wrapper in context <class '_ast.Load'>
Get gym in <Scope: function get_wrapper_by_name>, found in <Scope: module >, value <Node module:gym>
Resolved to attr Wrapper of <Node module:gym>
Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node attribute:gym.Wrapper> (target obj <Node module:gym> known but target attr Wrapper not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node attribute:gym.Wrapper> (target obj <Node module:gym> known but target attr Wrapper not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_wrapper_by_name>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ???:*.isinstance>
New edge added for Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ???:*.isinstance>
Assign ['currentenv'] ['currentenv.env']
Attribute env of currentenv in context <class '_ast.Load'>
Resolve currentenv.env in context <class '_ast.Load'>
Get currentenv in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Resolved to attr env of <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node attribute:dqn_utils.get_wrapper_by_name.^^^argument^^^.env> (target obj <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^> known but target attr env not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node attribute:dqn_utils.get_wrapper_by_name.^^^argument^^^.env> (target obj <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^> known but target attr env not resolved; maybe fwd ref or unanalyzed import)
Name currentenv in context <class '_ast.Store'>
Set currentenv in <Scope: function get_wrapper_by_name> to <Node attribute:dqn_utils.get_wrapper_by_name.^^^argument^^^.env>
Call ValueError
Name classname in context <class '_ast.Load'>
Get classname in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function get_wrapper_by_name>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ???:*.ValueError>
New edge added for Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ???:*.ValueError>
ClassDef ReplayBuffer
Def from <Node module:dqn_utils> to Class <Node class:dqn_utils.ReplayBuffer>
Set ReplayBuffer in <Scope: module > to <Node class:dqn_utils.ReplayBuffer>
Name object in context <class '_ast.Load'>
Get object in <Scope: class ReplayBuffer>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.ReplayBuffer> to Name <Node ???:*.object>
New edge added for Use from <Node class:dqn_utils.ReplayBuffer> to Name <Node ???:*.object>
FunctionDef __init__
Def from <Node class:dqn_utils.ReplayBuffer> to Function <Node method:dqn_utils.ReplayBuffer.__init__>
Set __init__ in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.__init__>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Assign ['self.lander'] ['lander']
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.__init__> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.__init__> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute lander of self in context <class '_ast.Store'>
Resolve self.lander in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr lander of <Node class:dqn_utils.ReplayBuffer>
setattr lander on self to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.size'] ['size']
Name size in context <class '_ast.Load'>
Get size in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.__init__> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Store'>
Resolve self.size in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
setattr size on self to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.frame_history_len'] ['frame_history_len']
Name frame_history_len in context <class '_ast.Load'>
Get frame_history_len in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.__init__> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute frame_history_len of self in context <class '_ast.Store'>
Resolve self.frame_history_len in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr frame_history_len of <Node class:dqn_utils.ReplayBuffer>
setattr frame_history_len on self to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.next_idx'] [<_ast.Num object at 0x1025c6208>]
Attribute next_idx of self in context <class '_ast.Store'>
Assign ['self.num_in_buffer'] [<_ast.Num object at 0x1025c62e8>]
Attribute num_in_buffer of self in context <class '_ast.Store'>
Assign ['self.obs'] [<_ast.NameConstant object at 0x1025c63c8>]
Attribute obs of self in context <class '_ast.Store'>
Assign ['self.action'] [<_ast.NameConstant object at 0x1025c64a8>]
Attribute action of self in context <class '_ast.Store'>
Assign ['self.reward'] [<_ast.NameConstant object at 0x1025c6588>]
Attribute reward of self in context <class '_ast.Store'>
Assign ['self.done'] [<_ast.NameConstant object at 0x1025c6668>]
Attribute done of self in context <class '_ast.Store'>
FunctionDef can_sample
Def from <Node class:dqn_utils.ReplayBuffer> to Function <Node method:dqn_utils.ReplayBuffer.can_sample>
Set can_sample in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.can_sample>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Name batch_size in context <class '_ast.Load'>
Get batch_size in <Scope: function can_sample>, found in <Scope: function can_sample>, value <Node ---:dqn_utils.ReplayBuffer.can_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.can_sample> to Name <Node ---:dqn_utils.ReplayBuffer.can_sample.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.can_sample> to Name <Node ---:dqn_utils.ReplayBuffer.can_sample.^^^argument^^^>
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function can_sample>, found in <Scope: function can_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.can_sample> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.can_sample> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
FunctionDef _encode_sample
Def from <Node class:dqn_utils.ReplayBuffer> to Function <Node method:dqn_utils.ReplayBuffer._encode_sample>
Set _encode_sample in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer._encode_sample>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Assign ['obs_batch'] [<_ast.Call object at 0x1025c6ac8>]
Call np.concatenate
ListComp
Call self._encode_observation
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ???:*.idx>
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ???:*.idx>
Attribute _encode_observation of self in context <class '_ast.Load'>
Resolve self._encode_observation in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr _encode_observation of <Node class:dqn_utils.ReplayBuffer>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr _encode_observation not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr _encode_observation not resolved; maybe fwd ref or unanalyzed import)
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function listcomp> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Def from <Node method:dqn_utils.ReplayBuffer._encode_sample> to listcomp <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp>
Attribute concatenate of np in context <class '_ast.Load'>
Resolve np.concatenate in context <class '_ast.Load'>
Get np in <Scope: function _encode_sample>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr concatenate of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.concatenate> (target obj <Node module:numpy> known but target attr concatenate not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.concatenate> (target obj <Node module:numpy> known but target attr concatenate not resolved; maybe fwd ref or unanalyzed import)
Name obs_batch in context <class '_ast.Store'>
Set obs_batch in <Scope: function _encode_sample> to <Node attribute:numpy.concatenate>
Assign ['act_batch'] [<_ast.Subscript object at 0x1025c6e80>]
Attribute action of self in context <class '_ast.Load'>
Resolve self.action in context <class '_ast.Load'>
Get self in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr action of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:dqn_utils.ReplayBuffer.action> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr action not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:dqn_utils.ReplayBuffer.action> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr action not resolved; maybe fwd ref or unanalyzed import)
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name act_batch in context <class '_ast.Store'>
Set act_batch in <Scope: function _encode_sample> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Assign ['rew_batch'] [<_ast.Subscript object at 0x1025cc048>]
Attribute reward of self in context <class '_ast.Load'>
Resolve self.reward in context <class '_ast.Load'>
Get self in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr reward of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:dqn_utils.ReplayBuffer.reward> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr reward not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:dqn_utils.ReplayBuffer.reward> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr reward not resolved; maybe fwd ref or unanalyzed import)
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name rew_batch in context <class '_ast.Store'>
Set rew_batch in <Scope: function _encode_sample> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Assign ['next_obs_batch'] [<_ast.Call object at 0x1025cc1d0>]
Call np.concatenate
ListComp
Call self._encode_observation
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Attribute _encode_observation of self in context <class '_ast.Load'>
Resolve self._encode_observation in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr _encode_observation of <Node class:dqn_utils.ReplayBuffer>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr _encode_observation not resolved; maybe fwd ref or unanalyzed import)
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function listcomp> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Attribute concatenate of np in context <class '_ast.Load'>
Resolve np.concatenate in context <class '_ast.Load'>
Get np in <Scope: function _encode_sample>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr concatenate of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.concatenate> (target obj <Node module:numpy> known but target attr concatenate not resolved; maybe fwd ref or unanalyzed import)
Name next_obs_batch in context <class '_ast.Store'>
Set next_obs_batch in <Scope: function _encode_sample> to <Node attribute:numpy.concatenate>
Assign ['done_mask'] [<_ast.Call object at 0x1025cc5f8>]
Call np.array
ListComp
Attribute done of self in context <class '_ast.Load'>
Resolve self.done in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr done of <Node class:dqn_utils.ReplayBuffer>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:dqn_utils.ReplayBuffer.done> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr done not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:dqn_utils.ReplayBuffer.done> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr done not resolved; maybe fwd ref or unanalyzed import)
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function listcomp> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Attribute float32 of np in context <class '_ast.Load'>
Resolve np.float32 in context <class '_ast.Load'>
Get np in <Scope: function _encode_sample>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr float32 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute array of np in context <class '_ast.Load'>
Resolve np.array in context <class '_ast.Load'>
Get np in <Scope: function _encode_sample>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr array of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.array> (target obj <Node module:numpy> known but target attr array not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.array> (target obj <Node module:numpy> known but target attr array not resolved; maybe fwd ref or unanalyzed import)
Name done_mask in context <class '_ast.Store'>
Set done_mask in <Scope: function _encode_sample> to <Node attribute:numpy.array>
Name obs_batch in context <class '_ast.Load'>
Get obs_batch in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node attribute:numpy.concatenate>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node attribute:numpy.concatenate>
Name act_batch in context <class '_ast.Load'>
Get act_batch in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name rew_batch in context <class '_ast.Load'>
Get rew_batch in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name next_obs_batch in context <class '_ast.Load'>
Get next_obs_batch in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node attribute:numpy.concatenate>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node attribute:numpy.concatenate>
Name done_mask in context <class '_ast.Load'>
Get done_mask in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node attribute:numpy.array>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node attribute:numpy.array>
FunctionDef sample
Def from <Node class:dqn_utils.ReplayBuffer> to Function <Node method:dqn_utils.ReplayBuffer.sample>
Set sample in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.sample>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Call self.can_sample
Name batch_size in context <class '_ast.Load'>
Get batch_size in <Scope: function sample>, found in <Scope: function sample>, value <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
Attribute can_sample of self in context <class '_ast.Load'>
Resolve self.can_sample in context <class '_ast.Load'>
Get self in <Scope: function sample>, found in <Scope: function sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr can_sample of <Node class:dqn_utils.ReplayBuffer>
getattr can_sample on self returns <Node method:dqn_utils.ReplayBuffer.can_sample>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to <Node method:dqn_utils.ReplayBuffer.can_sample>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.sample> to <Node method:dqn_utils.ReplayBuffer.can_sample>
Assign ['idxes'] [<_ast.Call object at 0x1025cce48>]
Call sample_n_unique
Lambda
Call random.randint
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function lambda>, found in <Scope: function sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
Use from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
Attribute randint of random in context <class '_ast.Load'>
Resolve random.randint in context <class '_ast.Load'>
Get random in <Scope: function lambda>, found in <Scope: module >, value <Node module:random>
Resolved to attr randint of <Node module:random>
Use from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node attribute:random.randint> (target obj <Node module:random> known but target attr randint not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node attribute:random.randint> (target obj <Node module:random> known but target attr randint not resolved; maybe fwd ref or unanalyzed import)
Def from <Node method:dqn_utils.ReplayBuffer.sample> to lambda <Node namespace:dqn_utils.ReplayBuffer.sample.lambda>
Name batch_size in context <class '_ast.Load'>
Get batch_size in <Scope: function sample>, found in <Scope: function sample>, value <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
Name sample_n_unique in context <class '_ast.Load'>
Get sample_n_unique in <Scope: function sample>, found in <Scope: module >, value <Node function:dqn_utils.sample_n_unique>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node function:dqn_utils.sample_n_unique>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node function:dqn_utils.sample_n_unique>
Name idxes in context <class '_ast.Store'>
Set idxes in <Scope: function sample> to <Node function:dqn_utils.sample_n_unique>
Call self._encode_sample
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function sample>, found in <Scope: function sample>, value <Node function:dqn_utils.sample_n_unique>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node function:dqn_utils.sample_n_unique>
Attribute _encode_sample of self in context <class '_ast.Load'>
Resolve self._encode_sample in context <class '_ast.Load'>
Get self in <Scope: function sample>, found in <Scope: function sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr _encode_sample of <Node class:dqn_utils.ReplayBuffer>
getattr _encode_sample on self returns <Node method:dqn_utils.ReplayBuffer._encode_sample>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to <Node method:dqn_utils.ReplayBuffer._encode_sample>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.sample> to <Node method:dqn_utils.ReplayBuffer._encode_sample>
FunctionDef encode_recent_observation
Def from <Node class:dqn_utils.ReplayBuffer> to Function <Node method:dqn_utils.ReplayBuffer.encode_recent_observation>
Set encode_recent_observation in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.encode_recent_observation>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function encode_recent_observation>, found in <Scope: function encode_recent_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
Call self._encode_observation
Attribute next_idx of self in context <class '_ast.Load'>
Resolve self.next_idx in context <class '_ast.Load'>
Get self in <Scope: function encode_recent_observation>, found in <Scope: function encode_recent_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node attribute:dqn_utils.ReplayBuffer.next_idx> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr next_idx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node attribute:dqn_utils.ReplayBuffer.next_idx> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr next_idx not resolved; maybe fwd ref or unanalyzed import)
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function encode_recent_observation>, found in <Scope: function encode_recent_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute _encode_observation of self in context <class '_ast.Load'>
Resolve self._encode_observation in context <class '_ast.Load'>
Get self in <Scope: function encode_recent_observation>, found in <Scope: function encode_recent_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr _encode_observation of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr _encode_observation not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr _encode_observation not resolved; maybe fwd ref or unanalyzed import)
FunctionDef _encode_observation
Def from <Node class:dqn_utils.ReplayBuffer> to Function <Node method:dqn_utils.ReplayBuffer._encode_observation>
Set _encode_observation in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer._encode_observation>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Assign ['end_idx'] [<_ast.BinOp object at 0x1025cf898>]
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name end_idx in context <class '_ast.Store'>
Set end_idx in <Scope: function _encode_observation> to <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Assign ['start_idx'] [<_ast.BinOp object at 0x1025cf9b0>]
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Attribute frame_history_len of self in context <class '_ast.Load'>
Resolve self.frame_history_len in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr frame_history_len of <Node class:dqn_utils.ReplayBuffer>
getattr frame_history_len on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Name start_idx in context <class '_ast.Store'>
Set start_idx in <Scope: function _encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Call len
Attribute shape of self.obs in context <class '_ast.Load'>
Resolve self.obs.shape in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.shape> (target obj self.obs not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.shape> (target obj self.obs not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function _encode_observation>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.len>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.len>
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.obs> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr obs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.obs> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr obs not resolved; maybe fwd ref or unanalyzed import)
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['start_idx'] [<_ast.Num object at 0x1025d30f0>]
Name start_idx in context <class '_ast.Store'>
Set start_idx in <Scope: function _encode_observation>: value None is not a Node
For-loop
Call range
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function _encode_observation>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function _encode_observation> to <Node ???:*.range>
Attribute done of self in context <class '_ast.Load'>
Resolve self.done in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr done of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.done> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr done not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.done> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr done not resolved; maybe fwd ref or unanalyzed import)
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['start_idx'] [<_ast.BinOp object at 0x1025d3550>]
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name start_idx in context <class '_ast.Store'>
Set start_idx in <Scope: function _encode_observation> to <Node ???:*.range>
Assign ['missing_context'] [<_ast.BinOp object at 0x1025d3668>]
Attribute frame_history_len of self in context <class '_ast.Load'>
Resolve self.frame_history_len in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr frame_history_len of <Node class:dqn_utils.ReplayBuffer>
getattr frame_history_len on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name missing_context in context <class '_ast.Store'>
Set missing_context in <Scope: function _encode_observation> to <Node ???:*.range>
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name missing_context in context <class '_ast.Load'>
Get missing_context in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Assign ['frames'] [<_ast.ListComp object at 0x1025d39e8>]
ListComp
Call np.zeros_like
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:dqn_utils.ReplayBuffer.obs> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr obs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:dqn_utils.ReplayBuffer.obs> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr obs not resolved; maybe fwd ref or unanalyzed import)
Attribute zeros_like of np in context <class '_ast.Load'>
Resolve np.zeros_like in context <class '_ast.Load'>
Get np in <Scope: function listcomp>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr zeros_like of <Node module:numpy>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:numpy.zeros_like> (target obj <Node module:numpy> known but target attr zeros_like not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:numpy.zeros_like> (target obj <Node module:numpy> known but target attr zeros_like not resolved; maybe fwd ref or unanalyzed import)
Call range
Name missing_context in context <class '_ast.Load'>
Get missing_context in <Scope: function listcomp>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to Name <Node ???:*.range>
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to Name <Node ???:*.range>
Name range in context <class '_ast.Load'>
Get range in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to Name <Node ???:*.range>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function listcomp> to <Node ???:*.range>
Def from <Node method:dqn_utils.ReplayBuffer._encode_observation> to listcomp <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Name frames in context <class '_ast.Store'>
Set frames in <Scope: function _encode_observation> to <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
For-loop
Call range
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function _encode_observation>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function _encode_observation> to <Node ???:*.range>
Call frames.append
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.obs> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr obs not resolved; maybe fwd ref or unanalyzed import)
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute append of frames in context <class '_ast.Load'>
Resolve frames.append in context <class '_ast.Load'>
Get frames in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Resolved to attr append of <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append> (target obj <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append> (target obj <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Call np.concatenate
Name frames in context <class '_ast.Load'>
Get frames in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Attribute concatenate of np in context <class '_ast.Load'>
Resolve np.concatenate in context <class '_ast.Load'>
Get np in <Scope: function _encode_observation>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr concatenate of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.concatenate> (target obj <Node module:numpy> known but target attr concatenate not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.concatenate> (target obj <Node module:numpy> known but target attr concatenate not resolved; maybe fwd ref or unanalyzed import)
Assign ['img_h', 'img_w'] [<_ast.Subscript object at 0x1025d5390>, <_ast.Subscript object at 0x1025d54e0>]
Attribute shape of self.obs in context <class '_ast.Load'>
Resolve self.obs.shape in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.shape> (target obj self.obs not resolved; maybe fwd ref, function argument, or unanalyzed import)
Attribute shape of self.obs in context <class '_ast.Load'>
Resolve self.obs.shape in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Unresolved, returning attr shape of unknown
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.shape> (target obj self.obs not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name img_h in context <class '_ast.Store'>
Set img_h in <Scope: function _encode_observation> to <Node ???:*.shape>
Name img_w in context <class '_ast.Store'>
Set img_w in <Scope: function _encode_observation> to <Node ???:*.shape>
Call <_ast.Call object at 0x1025d56d8>.reshape
Name img_h in context <class '_ast.Load'>
Get img_h in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.shape>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.shape>
Name img_w in context <class '_ast.Load'>
Get img_w in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.shape>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.shape>
Attribute reshape of <_ast.Call object at 0x1025d56d8> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x1025d56d8>.reshape in context <class '_ast.Load'>
Unresolved function call as obj, returning attr reshape of unknown
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.reshape> (target obj <_ast.Call object at 0x1025d56d8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.reshape> (target obj <_ast.Call object at 0x1025d56d8> not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef store_frame
Def from <Node class:dqn_utils.ReplayBuffer> to Function <Node method:dqn_utils.ReplayBuffer.store_frame>
Set store_frame in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.store_frame>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.obs> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr obs not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.obs> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr obs not resolved; maybe fwd ref or unanalyzed import)
Assign ['self.obs'] [<_ast.Call object at 0x1025d5da0>]
Call np.empty
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Call list
Attribute shape of frame in context <class '_ast.Load'>
Resolve frame.shape in context <class '_ast.Load'>
Get frame in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
Resolved to attr shape of <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^.shape> (target obj <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^.shape> (target obj <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Name list in context <class '_ast.Load'>
Get list in <Scope: function store_frame>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ???:*.list>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ???:*.list>
Attribute lander of self in context <class '_ast.Load'>
Resolve self.lander in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr lander of <Node class:dqn_utils.ReplayBuffer>
getattr lander on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute float32 of np in context <class '_ast.Load'>
Resolve np.float32 in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr float32 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute uint8 of np in context <class '_ast.Load'>
Resolve np.uint8 in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr uint8 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.uint8> (target obj <Node module:numpy> known but target attr uint8 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.uint8> (target obj <Node module:numpy> known but target attr uint8 not resolved; maybe fwd ref or unanalyzed import)
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Attribute obs of self in context <class '_ast.Store'>
Resolve self.obs in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
setattr obs on self to <Node attribute:numpy.empty>
Assign ['self.action'] [<_ast.Call object at 0x1025d92b0>]
Call np.empty
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute int32 of np in context <class '_ast.Load'>
Resolve np.int32 in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr int32 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.int32> (target obj <Node module:numpy> known but target attr int32 not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.int32> (target obj <Node module:numpy> known but target attr int32 not resolved; maybe fwd ref or unanalyzed import)
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Attribute action of self in context <class '_ast.Store'>
Resolve self.action in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr action of <Node class:dqn_utils.ReplayBuffer>
setattr action on self to <Node attribute:numpy.empty>
Assign ['self.reward'] [<_ast.Call object at 0x1025d9550>]
Call np.empty
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute float32 of np in context <class '_ast.Load'>
Resolve np.float32 in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr float32 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Attribute reward of self in context <class '_ast.Store'>
Resolve self.reward in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr reward of <Node class:dqn_utils.ReplayBuffer>
setattr reward on self to <Node attribute:numpy.empty>
Assign ['self.done'] [<_ast.Call object at 0x1025d97f0>]
Call np.empty
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute bool of np in context <class '_ast.Load'>
Resolve np.bool in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr bool of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.bool> (target obj <Node module:numpy> known but target attr bool not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.bool> (target obj <Node module:numpy> known but target attr bool not resolved; maybe fwd ref or unanalyzed import)
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Attribute done of self in context <class '_ast.Store'>
Resolve self.done in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr done of <Node class:dqn_utils.ReplayBuffer>
setattr done on self to <Node attribute:numpy.empty>
Assign [<_ast.Subscript object at 0x1025d9a20>] ['frame']
Name frame in context <class '_ast.Load'>
Get frame in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
getattr obs on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty>
Attribute next_idx of self in context <class '_ast.Load'>
Resolve self.next_idx in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.next_idx> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr next_idx not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.next_idx> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr next_idx not resolved; maybe fwd ref or unanalyzed import)
Assign ['ret'] ['self.next_idx']
Attribute next_idx of self in context <class '_ast.Load'>
Resolve self.next_idx in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.next_idx> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr next_idx not resolved; maybe fwd ref or unanalyzed import)
Name ret in context <class '_ast.Store'>
Set ret in <Scope: function store_frame> to <Node attribute:dqn_utils.ReplayBuffer.next_idx>
Assign ['self.next_idx'] [<_ast.BinOp object at 0x1025d9d30>]
Attribute next_idx of self in context <class '_ast.Load'>
Resolve self.next_idx in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.next_idx> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr next_idx not resolved; maybe fwd ref or unanalyzed import)
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute next_idx of self in context <class '_ast.Store'>
Resolve self.next_idx in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
setattr next_idx on self to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.num_in_buffer'] [<_ast.Call object at 0x1025d9f60>]
Call min
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> (target obj <Node class:dqn_utils.ReplayBuffer> known but target attr num_in_buffer not resolved; maybe fwd ref or unanalyzed import)
Name min in context <class '_ast.Load'>
Get min in <Scope: function store_frame>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ???:*.min>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ???:*.min>
Attribute num_in_buffer of self in context <class '_ast.Store'>
Resolve self.num_in_buffer in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
setattr num_in_buffer on self to <Node ???:*.min>
Name ret in context <class '_ast.Load'>
Get ret in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node attribute:dqn_utils.ReplayBuffer.next_idx>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node attribute:dqn_utils.ReplayBuffer.next_idx>
FunctionDef store_effect
Def from <Node class:dqn_utils.ReplayBuffer> to Function <Node method:dqn_utils.ReplayBuffer.store_effect>
Set store_effect in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.store_effect>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Assign [<_ast.Subscript object at 0x10260f400>] ['action']
Name action in context <class '_ast.Load'>
Get action in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Attribute action of self in context <class '_ast.Load'>
Resolve self.action in context <class '_ast.Load'>
Get self in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr action of <Node class:dqn_utils.ReplayBuffer>
getattr action on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node attribute:numpy.empty>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Assign [<_ast.Subscript object at 0x10260f588>] ['reward']
Name reward in context <class '_ast.Load'>
Get reward in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Attribute reward of self in context <class '_ast.Load'>
Resolve self.reward in context <class '_ast.Load'>
Get self in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr reward of <Node class:dqn_utils.ReplayBuffer>
getattr reward on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Assign [<_ast.Subscript object at 0x10260f710>] ['done']
Name done in context <class '_ast.Load'>
Get done in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Attribute done of self in context <class '_ast.Load'>
Resolve self.done in context <class '_ast.Load'>
Get self in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr done of <Node class:dqn_utils.ReplayBuffer>
getattr done on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Resolving base classes
Get object in <Scope: module >: no Node value (or name not in scope)
Get object in <Scope: module >: no Node value (or name not in scope)
Get object in <Scope: module >: no Node value (or name not in scope)
Get object in <Scope: module >: no Node value (or name not in scope)
Get object in <Scope: module >: no Node value (or name not in scope)
All base classes (non-recursive, local level only): {<Node class:dqn_utils.Schedule>: [], <Node class:dqn_utils.ConstantSchedule>: [], <Node class:dqn_utils.PiecewiseSchedule>: [], <Node class:dqn_utils.LinearSchedule>: [], <Node class:dqn_utils.ReplayBuffer>: []}
Resolving method resolution order (MRO) for all analyzed classes
MRO: analyzing class <Node class:dqn_utils.Schedule>
MRO: C3 linearizing <Node class:dqn_utils.Schedule>
MRO: C3 linearized <Node class:dqn_utils.Schedule>, result [<Node class:dqn_utils.Schedule>]
MRO: analyzing class <Node class:dqn_utils.ConstantSchedule>
MRO: C3 linearizing <Node class:dqn_utils.ConstantSchedule>
MRO: C3 linearized <Node class:dqn_utils.ConstantSchedule>, result [<Node class:dqn_utils.ConstantSchedule>]
MRO: analyzing class <Node class:dqn_utils.PiecewiseSchedule>
MRO: C3 linearizing <Node class:dqn_utils.PiecewiseSchedule>
MRO: C3 linearized <Node class:dqn_utils.PiecewiseSchedule>, result [<Node class:dqn_utils.PiecewiseSchedule>]
MRO: analyzing class <Node class:dqn_utils.LinearSchedule>
MRO: C3 linearizing <Node class:dqn_utils.LinearSchedule>
MRO: C3 linearized <Node class:dqn_utils.LinearSchedule>, result [<Node class:dqn_utils.LinearSchedule>]
MRO: analyzing class <Node class:dqn_utils.ReplayBuffer>
MRO: C3 linearizing <Node class:dqn_utils.ReplayBuffer>
MRO: C3 linearized <Node class:dqn_utils.ReplayBuffer>, result [<Node class:dqn_utils.ReplayBuffer>]
Method resolution order (MRO) for all analyzed classes: {<Node class:dqn_utils.Schedule>: [<Node class:dqn_utils.Schedule>], <Node class:dqn_utils.ConstantSchedule>: [<Node class:dqn_utils.ConstantSchedule>], <Node class:dqn_utils.PiecewiseSchedule>: [<Node class:dqn_utils.PiecewiseSchedule>], <Node class:dqn_utils.LinearSchedule>: [<Node class:dqn_utils.LinearSchedule>], <Node class:dqn_utils.ReplayBuffer>: [<Node class:dqn_utils.ReplayBuffer>]}
========== pass 2, file 'dqn_utils.py' ==========
Scopes now: {'dqn_utils': <Scope: module >, 'dqn_utils.huber_loss': <Scope: function huber_loss>, 'dqn_utils.sample_n_unique': <Scope: function sample_n_unique>, 'dqn_utils.Schedule': <Scope: class Schedule>, 'dqn_utils.Schedule.value': <Scope: function value>, 'dqn_utils.ConstantSchedule': <Scope: class ConstantSchedule>, 'dqn_utils.ConstantSchedule.__init__': <Scope: function __init__>, 'dqn_utils.ConstantSchedule.value': <Scope: function value>, 'dqn_utils.linear_interpolation': <Scope: function linear_interpolation>, 'dqn_utils.PiecewiseSchedule': <Scope: class PiecewiseSchedule>, 'dqn_utils.PiecewiseSchedule.__init__': <Scope: function __init__>, 'dqn_utils.PiecewiseSchedule.__init__.listcomp': <Scope: function listcomp>, 'dqn_utils.PiecewiseSchedule.value': <Scope: function value>, 'dqn_utils.LinearSchedule': <Scope: class LinearSchedule>, 'dqn_utils.LinearSchedule.__init__': <Scope: function __init__>, 'dqn_utils.LinearSchedule.value': <Scope: function value>, 'dqn_utils.compute_exponential_averages': <Scope: function compute_exponential_averages>, 'dqn_utils.compute_exponential_averages.listcomp': <Scope: function listcomp>, 'dqn_utils.minimize_and_clip': <Scope: function minimize_and_clip>, 'dqn_utils.initialize_interdependent_variables': <Scope: function initialize_interdependent_variables>, 'dqn_utils.get_wrapper_by_name': <Scope: function get_wrapper_by_name>, 'dqn_utils.ReplayBuffer': <Scope: class ReplayBuffer>, 'dqn_utils.ReplayBuffer.__init__': <Scope: function __init__>, 'dqn_utils.ReplayBuffer.can_sample': <Scope: function can_sample>, 'dqn_utils.ReplayBuffer._encode_sample': <Scope: function _encode_sample>, 'dqn_utils.ReplayBuffer._encode_sample.listcomp': <Scope: function listcomp>, 'dqn_utils.ReplayBuffer.sample': <Scope: function sample>, 'dqn_utils.ReplayBuffer.sample.lambda': <Scope: function lambda>, 'dqn_utils.ReplayBuffer.encode_recent_observation': <Scope: function encode_recent_observation>, 'dqn_utils.ReplayBuffer._encode_observation': <Scope: function _encode_observation>, 'dqn_utils.ReplayBuffer._encode_observation.listcomp': <Scope: function listcomp>, 'dqn_utils.ReplayBuffer.store_frame': <Scope: function store_frame>, 'dqn_utils.ReplayBuffer.store_effect': <Scope: function store_effect>}
Module
Import ['gym']
Set gym in <Scope: module > to <Node module:gym>
Use from <Node module:dqn_utils> to Import <Node module:gym>
Import ['tensorflow as tf']
Set tf in <Scope: module > to <Node module:tensorflow>
Use from <Node module:dqn_utils> to Import <Node import:tf>
Import ['numpy as np']
Set np in <Scope: module > to <Node module:numpy>
Use from <Node module:dqn_utils> to Import <Node import:np>
Import ['random']
Set random in <Scope: module > to <Node module:random>
Use from <Node module:dqn_utils> to Import <Node module:random>
FunctionDef huber_loss
Set huber_loss in <Scope: module > to <Node function:dqn_utils.huber_loss>
Call tf.where
Call tf.abs
Name x in context <class '_ast.Load'>
Get x in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Attribute abs of tf in context <class '_ast.Load'>
Resolve tf.abs in context <class '_ast.Load'>
Get tf in <Scope: function huber_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr abs of <Node module:tensorflow>
Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.abs> (target obj <Node module:tensorflow> known but target attr abs not resolved; maybe fwd ref or unanalyzed import)
Name delta in context <class '_ast.Load'>
Get delta in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Call tf.square
Name x in context <class '_ast.Load'>
Get x in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Attribute square of tf in context <class '_ast.Load'>
Resolve tf.square in context <class '_ast.Load'>
Get tf in <Scope: function huber_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr square of <Node module:tensorflow>
Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.square> (target obj <Node module:tensorflow> known but target attr square not resolved; maybe fwd ref or unanalyzed import)
Name delta in context <class '_ast.Load'>
Get delta in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Call tf.abs
Name x in context <class '_ast.Load'>
Get x in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Attribute abs of tf in context <class '_ast.Load'>
Resolve tf.abs in context <class '_ast.Load'>
Get tf in <Scope: function huber_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr abs of <Node module:tensorflow>
Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.abs> (target obj <Node module:tensorflow> known but target attr abs not resolved; maybe fwd ref or unanalyzed import)
Name delta in context <class '_ast.Load'>
Get delta in <Scope: function huber_loss>, found in <Scope: function huber_loss>, value <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Use from <Node function:dqn_utils.huber_loss> to Name <Node ---:dqn_utils.huber_loss.^^^argument^^^>
Attribute where of tf in context <class '_ast.Load'>
Resolve tf.where in context <class '_ast.Load'>
Get tf in <Scope: function huber_loss>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr where of <Node module:tensorflow>
Use from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.where> (target obj <Node module:tensorflow> known but target attr where not resolved; maybe fwd ref or unanalyzed import)
FunctionDef sample_n_unique
Set sample_n_unique in <Scope: module > to <Node function:dqn_utils.sample_n_unique>
Assign ['res'] []
Name res in context <class '_ast.Store'>
Set res in <Scope: function sample_n_unique>: value None is not a Node
Call len
Name res in context <class '_ast.Load'>
Get res in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.res>
Name len in context <class '_ast.Load'>
Get len in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.len>
Name n in context <class '_ast.Load'>
Get n in <Scope: function sample_n_unique>, found in <Scope: function sample_n_unique>, value <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Assign ['candidate'] [<_ast.Call object at 0x1025f3710>]
Call sampling_f
Name sampling_f in context <class '_ast.Load'>
Get sampling_f in <Scope: function sample_n_unique>, found in <Scope: function sample_n_unique>, value <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Name candidate in context <class '_ast.Store'>
Set candidate in <Scope: function sample_n_unique> to <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Name candidate in context <class '_ast.Load'>
Get candidate in <Scope: function sample_n_unique>, found in <Scope: function sample_n_unique>, value <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Name res in context <class '_ast.Load'>
Get res in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.res>
Call res.append
Name candidate in context <class '_ast.Load'>
Get candidate in <Scope: function sample_n_unique>, found in <Scope: function sample_n_unique>, value <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ---:dqn_utils.sample_n_unique.^^^argument^^^>
Attribute append of res in context <class '_ast.Load'>
Resolve res.append in context <class '_ast.Load'>
Get res in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:dqn_utils.sample_n_unique> to <Node ???:*.append> (target obj res not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name res in context <class '_ast.Load'>
Get res in <Scope: function sample_n_unique>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.sample_n_unique> to Name <Node ???:*.res>
ClassDef Schedule
Set Schedule in <Scope: module > to <Node class:dqn_utils.Schedule>
Name object in context <class '_ast.Load'>
Get object in <Scope: class Schedule>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.Schedule> to Name <Node ???:*.object>
FunctionDef value
Set value in <Scope: class Schedule> to <Node method:dqn_utils.Schedule.value>
Method def: setting self name "self" to <Node class:dqn_utils.Schedule>
Call NotImplementedError
Name NotImplementedError in context <class '_ast.Load'>
Get NotImplementedError in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.Schedule.value> to Name <Node ???:*.NotImplementedError>
ClassDef ConstantSchedule
Set ConstantSchedule in <Scope: module > to <Node class:dqn_utils.ConstantSchedule>
Name object in context <class '_ast.Load'>
Get object in <Scope: class ConstantSchedule>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.ConstantSchedule> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class ConstantSchedule> to <Node method:dqn_utils.ConstantSchedule.__init__>
Method def: setting self name "self" to <Node class:dqn_utils.ConstantSchedule>
Assign ['self._v'] ['value']
Name value in context <class '_ast.Load'>
Get value in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ConstantSchedule.__init__> to Name <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
Attribute _v of self in context <class '_ast.Store'>
Resolve self._v in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.ConstantSchedule>
Resolved to attr _v of <Node class:dqn_utils.ConstantSchedule>
setattr _v on self to <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
FunctionDef value
Set value in <Scope: class ConstantSchedule> to <Node method:dqn_utils.ConstantSchedule.value>
Method def: setting self name "self" to <Node class:dqn_utils.ConstantSchedule>
Attribute _v of self in context <class '_ast.Load'>
Resolve self._v in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.ConstantSchedule>
Resolved to attr _v of <Node class:dqn_utils.ConstantSchedule>
getattr _v on self returns <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ConstantSchedule.value> to <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^>
FunctionDef linear_interpolation
Set linear_interpolation in <Scope: module > to <Node function:dqn_utils.linear_interpolation>
Name l in context <class '_ast.Load'>
Get l in <Scope: function linear_interpolation>, found in <Scope: function linear_interpolation>, value <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Name alpha in context <class '_ast.Load'>
Get alpha in <Scope: function linear_interpolation>, found in <Scope: function linear_interpolation>, value <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Name r in context <class '_ast.Load'>
Get r in <Scope: function linear_interpolation>, found in <Scope: function linear_interpolation>, value <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Name l in context <class '_ast.Load'>
Get l in <Scope: function linear_interpolation>, found in <Scope: function linear_interpolation>, value <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
Use from <Node function:dqn_utils.linear_interpolation> to Name <Node ---:dqn_utils.linear_interpolation.^^^argument^^^>
ClassDef PiecewiseSchedule
Set PiecewiseSchedule in <Scope: module > to <Node class:dqn_utils.PiecewiseSchedule>
Name object in context <class '_ast.Load'>
Get object in <Scope: class PiecewiseSchedule>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.PiecewiseSchedule> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class PiecewiseSchedule> to <Node method:dqn_utils.PiecewiseSchedule.__init__>
Method def: setting self name "self" to <Node class:dqn_utils.PiecewiseSchedule>
Name linear_interpolation in context <class '_ast.Load'>
Get linear_interpolation in <Scope: function __init__>, found in <Scope: module >, value <Node function:dqn_utils.linear_interpolation>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node function:dqn_utils.linear_interpolation>
Assign ['idxes'] [<_ast.ListComp object at 0x1025fa710>]
ListComp
Name e in context <class '_ast.Load'>
Get e in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Name endpoints in context <class '_ast.Load'>
Get endpoints in <Scope: function listcomp>, found in <Scope: function __init__>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Name e in context <class '_ast.Store'>
Set e in <Scope: function listcomp> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Name idxes in context <class '_ast.Store'>
Set idxes in <Scope: function __init__> to <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function __init__>, found in <Scope: function __init__>, value <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Call sorted
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function __init__>, found in <Scope: function __init__>, value <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp>
Name sorted in context <class '_ast.Load'>
Get sorted in <Scope: function __init__>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ???:*.sorted>
Assign ['self._interpolation'] ['interpolation']
Name interpolation in context <class '_ast.Load'>
Get interpolation in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _interpolation of self in context <class '_ast.Store'>
Resolve self._interpolation in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _interpolation of <Node class:dqn_utils.PiecewiseSchedule>
setattr _interpolation on self to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Assign ['self._outside_value'] ['outside_value']
Name outside_value in context <class '_ast.Load'>
Get outside_value in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _outside_value of self in context <class '_ast.Store'>
Resolve self._outside_value in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _outside_value of <Node class:dqn_utils.PiecewiseSchedule>
setattr _outside_value on self to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Assign ['self._endpoints'] ['endpoints']
Name endpoints in context <class '_ast.Load'>
Get endpoints in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.__init__> to Name <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _endpoints of self in context <class '_ast.Store'>
Resolve self._endpoints in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _endpoints of <Node class:dqn_utils.PiecewiseSchedule>
setattr _endpoints on self to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
FunctionDef value
Set value in <Scope: class PiecewiseSchedule> to <Node method:dqn_utils.PiecewiseSchedule.value>
Method def: setting self name "self" to <Node class:dqn_utils.PiecewiseSchedule>
For-loop
Call zip
Attribute _endpoints of self in context <class '_ast.Load'>
Resolve self._endpoints in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _endpoints of <Node class:dqn_utils.PiecewiseSchedule>
getattr _endpoints on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _endpoints of self in context <class '_ast.Load'>
Resolve self._endpoints in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _endpoints of <Node class:dqn_utils.PiecewiseSchedule>
getattr _endpoints on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Name zip in context <class '_ast.Load'>
Get zip in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name l_t in context <class '_ast.Store'>
Set l_t in <Scope: function value> to <Node ???:*.zip>
Name l in context <class '_ast.Store'>
Set l in <Scope: function value> to <Node ???:*.zip>
Name r_t in context <class '_ast.Store'>
Set r_t in <Scope: function value> to <Node ???:*.zip>
Name r in context <class '_ast.Store'>
Set r in <Scope: function value> to <Node ???:*.zip>
Name l_t in context <class '_ast.Load'>
Get l_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name t in context <class '_ast.Load'>
Get t in <Scope: function value>, found in <Scope: function value>, value <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Name t in context <class '_ast.Load'>
Get t in <Scope: function value>, found in <Scope: function value>, value <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Name r_t in context <class '_ast.Load'>
Get r_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Assign ['alpha'] [<_ast.BinOp object at 0x1025fe518>]
Call float
Name t in context <class '_ast.Load'>
Get t in <Scope: function value>, found in <Scope: function value>, value <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^>
Name l_t in context <class '_ast.Load'>
Get l_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name float in context <class '_ast.Load'>
Get float in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.float>
Name r_t in context <class '_ast.Load'>
Get r_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name l_t in context <class '_ast.Load'>
Get l_t in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name alpha in context <class '_ast.Store'>
Set alpha in <Scope: function value> to <Node ???:*.zip>
Call self._interpolation
Name l in context <class '_ast.Load'>
Get l in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name r in context <class '_ast.Load'>
Get r in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Name alpha in context <class '_ast.Load'>
Get alpha in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.zip>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to Name <Node ???:*.zip>
Attribute _interpolation of self in context <class '_ast.Load'>
Resolve self._interpolation in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _interpolation of <Node class:dqn_utils.PiecewiseSchedule>
getattr _interpolation on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _outside_value of self in context <class '_ast.Load'>
Resolve self._outside_value in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _outside_value of <Node class:dqn_utils.PiecewiseSchedule>
getattr _outside_value on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Attribute _outside_value of self in context <class '_ast.Load'>
Resolve self._outside_value in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.PiecewiseSchedule>
Resolved to attr _outside_value of <Node class:dqn_utils.PiecewiseSchedule>
getattr _outside_value on self returns <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^>
ClassDef LinearSchedule
Set LinearSchedule in <Scope: module > to <Node class:dqn_utils.LinearSchedule>
Name object in context <class '_ast.Load'>
Get object in <Scope: class LinearSchedule>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.LinearSchedule> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class LinearSchedule> to <Node method:dqn_utils.LinearSchedule.__init__>
Method def: setting self name "self" to <Node class:dqn_utils.LinearSchedule>
Assign ['self.schedule_timesteps'] ['schedule_timesteps']
Name schedule_timesteps in context <class '_ast.Load'>
Get schedule_timesteps in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.__init__> to Name <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Attribute schedule_timesteps of self in context <class '_ast.Store'>
Resolve self.schedule_timesteps in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr schedule_timesteps of <Node class:dqn_utils.LinearSchedule>
setattr schedule_timesteps on self to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Assign ['self.final_p'] ['final_p']
Name final_p in context <class '_ast.Load'>
Get final_p in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.__init__> to Name <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Attribute final_p of self in context <class '_ast.Store'>
Resolve self.final_p in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr final_p of <Node class:dqn_utils.LinearSchedule>
setattr final_p on self to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Assign ['self.initial_p'] ['initial_p']
Name initial_p in context <class '_ast.Load'>
Get initial_p in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.__init__> to Name <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Attribute initial_p of self in context <class '_ast.Store'>
Resolve self.initial_p in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr initial_p of <Node class:dqn_utils.LinearSchedule>
setattr initial_p on self to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
FunctionDef value
Set value in <Scope: class LinearSchedule> to <Node method:dqn_utils.LinearSchedule.value>
Method def: setting self name "self" to <Node class:dqn_utils.LinearSchedule>
Assign ['fraction'] [<_ast.Call object at 0x102600160>]
Call min
Call float
Name t in context <class '_ast.Load'>
Get t in <Scope: function value>, found in <Scope: function value>, value <Node ---:dqn_utils.LinearSchedule.value.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ---:dqn_utils.LinearSchedule.value.^^^argument^^^>
Name float in context <class '_ast.Load'>
Get float in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ???:*.float>
Attribute schedule_timesteps of self in context <class '_ast.Load'>
Resolve self.schedule_timesteps in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr schedule_timesteps of <Node class:dqn_utils.LinearSchedule>
getattr schedule_timesteps on self returns <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Name min in context <class '_ast.Load'>
Get min in <Scope: function value>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ???:*.min>
Name fraction in context <class '_ast.Store'>
Set fraction in <Scope: function value> to <Node ???:*.min>
Attribute initial_p of self in context <class '_ast.Load'>
Resolve self.initial_p in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr initial_p of <Node class:dqn_utils.LinearSchedule>
getattr initial_p on self returns <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Name fraction in context <class '_ast.Load'>
Get fraction in <Scope: function value>, found in <Scope: function value>, value <Node ???:*.min>
Use from <Node method:dqn_utils.LinearSchedule.value> to Name <Node ???:*.min>
Attribute final_p of self in context <class '_ast.Load'>
Resolve self.final_p in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr final_p of <Node class:dqn_utils.LinearSchedule>
getattr final_p on self returns <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Attribute initial_p of self in context <class '_ast.Load'>
Resolve self.initial_p in context <class '_ast.Load'>
Get self in <Scope: function value>, found in <Scope: function value>, value <Node class:dqn_utils.LinearSchedule>
Resolved to attr initial_p of <Node class:dqn_utils.LinearSchedule>
getattr initial_p on self returns <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^>
FunctionDef compute_exponential_averages
Set compute_exponential_averages in <Scope: module > to <Node function:dqn_utils.compute_exponential_averages>
Assign ['averager'] [<_ast.Call object at 0x102600780>]
Call tf.train.ExponentialMovingAverage
Name decay in context <class '_ast.Load'>
Get decay in <Scope: function compute_exponential_averages>, found in <Scope: function compute_exponential_averages>, value <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Use from <Node function:dqn_utils.compute_exponential_averages> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Attribute ExponentialMovingAverage of tf.train in context <class '_ast.Load'>
Resolve tf.train.ExponentialMovingAverage in context <class '_ast.Load'>
Resolve tf.train in context <class '_ast.Load'>
Get tf in <Scope: function compute_exponential_averages>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr train of <Node module:tensorflow>
Unresolved, returning attr ExponentialMovingAverage of unknown
Use from <Node function:dqn_utils.compute_exponential_averages> to <Node ???:*.ExponentialMovingAverage> (target obj tf.train not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name averager in context <class '_ast.Store'>
Set averager in <Scope: function compute_exponential_averages> to <Node ???:*.ExponentialMovingAverage>
Assign ['apply_op'] [<_ast.Call object at 0x102600940>]
Call averager.apply
Name variables in context <class '_ast.Load'>
Get variables in <Scope: function compute_exponential_averages>, found in <Scope: function compute_exponential_averages>, value <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Use from <Node function:dqn_utils.compute_exponential_averages> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Attribute apply of averager in context <class '_ast.Load'>
Resolve averager.apply in context <class '_ast.Load'>
Get averager in <Scope: function compute_exponential_averages>, found in <Scope: function compute_exponential_averages>, value <Node ???:*.ExponentialMovingAverage>
Resolved to attr apply of <Node ???:*.ExponentialMovingAverage>
Use from <Node function:dqn_utils.compute_exponential_averages> to <Node ???:*.apply> (target obj averager not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name apply_op in context <class '_ast.Store'>
Set apply_op in <Scope: function compute_exponential_averages> to <Node ???:*.apply>
ListComp
Call averager.average
Name v in context <class '_ast.Load'>
Get v in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Attribute average of averager in context <class '_ast.Load'>
Resolve averager.average in context <class '_ast.Load'>
Get averager in <Scope: function listcomp>, found in <Scope: function compute_exponential_averages>, value <Node ???:*.ExponentialMovingAverage>
Resolved to attr average of <Node ???:*.ExponentialMovingAverage>
Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to <Node ???:*.average> (target obj averager not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name variables in context <class '_ast.Load'>
Get variables in <Scope: function listcomp>, found in <Scope: function compute_exponential_averages>, value <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Use from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to Name <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Name v in context <class '_ast.Store'>
Set v in <Scope: function listcomp> to <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^>
Name apply_op in context <class '_ast.Load'>
Get apply_op in <Scope: function compute_exponential_averages>, found in <Scope: function compute_exponential_averages>, value <Node ???:*.apply>
Use from <Node function:dqn_utils.compute_exponential_averages> to Name <Node ???:*.apply>
FunctionDef minimize_and_clip
Set minimize_and_clip in <Scope: module > to <Node function:dqn_utils.minimize_and_clip>
Assign ['gradients'] [<_ast.Call object at 0x102600ef0>]
Call optimizer.compute_gradients
Name objective in context <class '_ast.Load'>
Get objective in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Name var_list in context <class '_ast.Load'>
Get var_list in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Attribute compute_gradients of optimizer in context <class '_ast.Load'>
Resolve optimizer.compute_gradients in context <class '_ast.Load'>
Get optimizer in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Resolved to attr compute_gradients of <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients> (target obj <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^> known but target attr compute_gradients not resolved; maybe fwd ref or unanalyzed import)
Name gradients in context <class '_ast.Store'>
Set gradients in <Scope: function minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
For-loop
Call enumerate
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Name enumerate in context <class '_ast.Load'>
Get enumerate in <Scope: function minimize_and_clip>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Name i in context <class '_ast.Store'>
Set i in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name grad in context <class '_ast.Store'>
Set grad in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name var in context <class '_ast.Store'>
Set var in <Scope: function minimize_and_clip> to <Node ???:*.enumerate>
Name grad in context <class '_ast.Load'>
Get grad in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Assign [<_ast.Subscript object at 0x102601390>] [<_ast.Call object at 0x1026014a8>, 'var']
Call tf.clip_by_norm
Name grad in context <class '_ast.Load'>
Get grad in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Name clip_val in context <class '_ast.Load'>
Get clip_val in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Attribute clip_by_norm of tf in context <class '_ast.Load'>
Resolve tf.clip_by_norm in context <class '_ast.Load'>
Get tf in <Scope: function minimize_and_clip>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr clip_by_norm of <Node module:tensorflow>
Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:tensorflow.clip_by_norm> (target obj <Node module:tensorflow> known but target attr clip_by_norm not resolved; maybe fwd ref or unanalyzed import)
Name var in context <class '_ast.Load'>
Get var in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Name i in context <class '_ast.Load'>
Get i in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ???:*.enumerate>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node ???:*.enumerate>
Call optimizer.apply_gradients
Name gradients in context <class '_ast.Load'>
Get gradients in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Use from <Node function:dqn_utils.minimize_and_clip> to Name <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients>
Attribute apply_gradients of optimizer in context <class '_ast.Load'>
Resolve optimizer.apply_gradients in context <class '_ast.Load'>
Get optimizer in <Scope: function minimize_and_clip>, found in <Scope: function minimize_and_clip>, value <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Resolved to attr apply_gradients of <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^>
Use from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.apply_gradients> (target obj <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^> known but target attr apply_gradients not resolved; maybe fwd ref or unanalyzed import)
FunctionDef initialize_interdependent_variables
Set initialize_interdependent_variables in <Scope: module > to <Node function:dqn_utils.initialize_interdependent_variables>
Assign ['vars_left'] ['vars_list']
Name vars_list in context <class '_ast.Load'>
Get vars_list in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Name vars_left in context <class '_ast.Store'>
Set vars_left in <Scope: function initialize_interdependent_variables> to <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Call len
Name vars_left in context <class '_ast.Load'>
Get vars_left in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.len>
Assign ['new_vars_left'] []
Name new_vars_left in context <class '_ast.Store'>
Set new_vars_left in <Scope: function initialize_interdependent_variables>: value None is not a Node
For-loop
Name vars_left in context <class '_ast.Load'>
Get vars_left in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Name v in context <class '_ast.Store'>
Set v in <Scope: function initialize_interdependent_variables> to <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Call session.run
Call tf.variables_initializer
Name v in context <class '_ast.Load'>
Get v in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Attribute variables_initializer of tf in context <class '_ast.Load'>
Resolve tf.variables_initializer in context <class '_ast.Load'>
Get tf in <Scope: function initialize_interdependent_variables>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr variables_initializer of <Node module:tensorflow>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:tensorflow.variables_initializer> (target obj <Node module:tensorflow> known but target attr variables_initializer not resolved; maybe fwd ref or unanalyzed import)
Name feed_dict in context <class '_ast.Load'>
Get feed_dict in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Attribute run of session in context <class '_ast.Load'>
Resolve session.run in context <class '_ast.Load'>
Get session in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Resolved to attr run of <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:dqn_utils.initialize_interdependent_variables.^^^argument^^^.run> (target obj <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^> known but target attr run not resolved; maybe fwd ref or unanalyzed import)
Attribute FailedPreconditionError of tf.errors in context <class '_ast.Load'>
Resolve tf.errors.FailedPreconditionError in context <class '_ast.Load'>
Resolve tf.errors in context <class '_ast.Load'>
Get tf in <Scope: function initialize_interdependent_variables>, found in <Scope: module >, value <Node module:tensorflow>
Resolved to attr errors of <Node module:tensorflow>
Unresolved, returning attr FailedPreconditionError of unknown
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node ???:*.FailedPreconditionError> (target obj tf.errors not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call new_vars_left.append
Name v in context <class '_ast.Load'>
Get v in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Attribute append of new_vars_left in context <class '_ast.Load'>
Resolve new_vars_left.append in context <class '_ast.Load'>
Get new_vars_left in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Resolved to attr append of None
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node ???:*.append> (target obj new_vars_left not resolved; maybe fwd ref, function argument, or unanalyzed import)
Call len
Name new_vars_left in context <class '_ast.Load'>
Get new_vars_left in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.new_vars_left>
Name len in context <class '_ast.Load'>
Get len in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.len>
Call len
Name vars_left in context <class '_ast.Load'>
Get vars_left in <Scope: function initialize_interdependent_variables>, found in <Scope: function initialize_interdependent_variables>, value <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^>
Name len in context <class '_ast.Load'>
Get len in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.len>
Call Exception
Name Exception in context <class '_ast.Load'>
Get Exception in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.Exception>
Assign ['vars_left'] ['new_vars_left']
Name new_vars_left in context <class '_ast.Load'>
Get new_vars_left in <Scope: function initialize_interdependent_variables>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.initialize_interdependent_variables> to Name <Node ???:*.new_vars_left>
Name vars_left in context <class '_ast.Store'>
Set vars_left in <Scope: function initialize_interdependent_variables> to <Node ???:*.new_vars_left>
FunctionDef get_wrapper_by_name
Set get_wrapper_by_name in <Scope: module > to <Node function:dqn_utils.get_wrapper_by_name>
Assign ['currentenv'] ['env']
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Name currentenv in context <class '_ast.Store'>
Set currentenv in <Scope: function get_wrapper_by_name> to <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Name classname in context <class '_ast.Load'>
Get classname in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Attribute __name__ of currentenv.__class__ in context <class '_ast.Load'>
Resolve currentenv.__class__.__name__ in context <class '_ast.Load'>
Resolve currentenv.__class__ in context <class '_ast.Load'>
Get currentenv in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Resolved to attr __class__ of <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Unresolved, returning attr __name__ of unknown
Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node ???:*.__name__> (target obj currentenv.__class__ not resolved; maybe fwd ref, function argument, or unanalyzed import)
Name currentenv in context <class '_ast.Load'>
Get currentenv in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Call isinstance
Name env in context <class '_ast.Load'>
Get env in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Attribute Wrapper of gym in context <class '_ast.Load'>
Resolve gym.Wrapper in context <class '_ast.Load'>
Get gym in <Scope: function get_wrapper_by_name>, found in <Scope: module >, value <Node module:gym>
Resolved to attr Wrapper of <Node module:gym>
Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node attribute:gym.Wrapper> (target obj <Node module:gym> known but target attr Wrapper not resolved; maybe fwd ref or unanalyzed import)
Name isinstance in context <class '_ast.Load'>
Get isinstance in <Scope: function get_wrapper_by_name>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ???:*.isinstance>
Assign ['currentenv'] ['currentenv.env']
Attribute env of currentenv in context <class '_ast.Load'>
Resolve currentenv.env in context <class '_ast.Load'>
Get currentenv in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Resolved to attr env of <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to <Node attribute:dqn_utils.get_wrapper_by_name.^^^argument^^^.env> (target obj <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^> known but target attr env not resolved; maybe fwd ref or unanalyzed import)
Name currentenv in context <class '_ast.Store'>
Set currentenv in <Scope: function get_wrapper_by_name> to <Node attribute:dqn_utils.get_wrapper_by_name.^^^argument^^^.env>
Call ValueError
Name classname in context <class '_ast.Load'>
Get classname in <Scope: function get_wrapper_by_name>, found in <Scope: function get_wrapper_by_name>, value <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^>
Name ValueError in context <class '_ast.Load'>
Get ValueError in <Scope: function get_wrapper_by_name>: no Node value (or name not in scope)
Use from <Node function:dqn_utils.get_wrapper_by_name> to Name <Node ???:*.ValueError>
ClassDef ReplayBuffer
Set ReplayBuffer in <Scope: module > to <Node class:dqn_utils.ReplayBuffer>
Name object in context <class '_ast.Load'>
Get object in <Scope: class ReplayBuffer>: no Node value (or name not in scope)
Use from <Node class:dqn_utils.ReplayBuffer> to Name <Node ???:*.object>
FunctionDef __init__
Set __init__ in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.__init__>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Assign ['self.lander'] ['lander']
Name lander in context <class '_ast.Load'>
Get lander in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.__init__> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute lander of self in context <class '_ast.Store'>
Resolve self.lander in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr lander of <Node class:dqn_utils.ReplayBuffer>
setattr lander on self to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.size'] ['size']
Name size in context <class '_ast.Load'>
Get size in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.__init__> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Store'>
Resolve self.size in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
setattr size on self to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.frame_history_len'] ['frame_history_len']
Name frame_history_len in context <class '_ast.Load'>
Get frame_history_len in <Scope: function __init__>, found in <Scope: function __init__>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.__init__> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute frame_history_len of self in context <class '_ast.Store'>
Resolve self.frame_history_len in context <class '_ast.Store'>
Get self in <Scope: function __init__>, found in <Scope: function __init__>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr frame_history_len of <Node class:dqn_utils.ReplayBuffer>
setattr frame_history_len on self to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.next_idx'] [<_ast.Num object at 0x10260d0f0>]
Attribute next_idx of self in context <class '_ast.Store'>
Assign ['self.num_in_buffer'] [<_ast.Num object at 0x10260d1d0>]
Attribute num_in_buffer of self in context <class '_ast.Store'>
Assign ['self.obs'] [<_ast.NameConstant object at 0x10260d2b0>]
Attribute obs of self in context <class '_ast.Store'>
Assign ['self.action'] [<_ast.NameConstant object at 0x10260d390>]
Attribute action of self in context <class '_ast.Store'>
Assign ['self.reward'] [<_ast.NameConstant object at 0x10260d470>]
Attribute reward of self in context <class '_ast.Store'>
Assign ['self.done'] [<_ast.NameConstant object at 0x10260d550>]
Attribute done of self in context <class '_ast.Store'>
FunctionDef can_sample
Set can_sample in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.can_sample>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Name batch_size in context <class '_ast.Load'>
Get batch_size in <Scope: function can_sample>, found in <Scope: function can_sample>, value <Node ---:dqn_utils.ReplayBuffer.can_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.can_sample> to Name <Node ---:dqn_utils.ReplayBuffer.can_sample.^^^argument^^^>
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function can_sample>, found in <Scope: function can_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
getattr num_in_buffer on self returns <Node ???:*.min>
Use from <Node method:dqn_utils.ReplayBuffer.can_sample> to <Node ???:*.min>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.can_sample> to <Node ???:*.min>
FunctionDef _encode_sample
Set _encode_sample in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer._encode_sample>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Assign ['obs_batch'] [<_ast.Call object at 0x10260d9b0>]
Call np.concatenate
ListComp
Call self._encode_observation
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Attribute _encode_observation of self in context <class '_ast.Load'>
Resolve self._encode_observation in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr _encode_observation of <Node class:dqn_utils.ReplayBuffer>
getattr _encode_observation on self returns <Node method:dqn_utils.ReplayBuffer._encode_observation>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_observation>
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function listcomp> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Attribute concatenate of np in context <class '_ast.Load'>
Resolve np.concatenate in context <class '_ast.Load'>
Get np in <Scope: function _encode_sample>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr concatenate of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.concatenate> (target obj <Node module:numpy> known but target attr concatenate not resolved; maybe fwd ref or unanalyzed import)
Name obs_batch in context <class '_ast.Store'>
Set obs_batch in <Scope: function _encode_sample> to <Node attribute:numpy.concatenate>
Assign ['act_batch'] [<_ast.Subscript object at 0x10260dd68>]
Attribute action of self in context <class '_ast.Load'>
Resolve self.action in context <class '_ast.Load'>
Get self in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr action of <Node class:dqn_utils.ReplayBuffer>
getattr action on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.empty>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.empty>
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name act_batch in context <class '_ast.Store'>
Set act_batch in <Scope: function _encode_sample> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Assign ['rew_batch'] [<_ast.Subscript object at 0x10260def0>]
Attribute reward of self in context <class '_ast.Load'>
Resolve self.reward in context <class '_ast.Load'>
Get self in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr reward of <Node class:dqn_utils.ReplayBuffer>
getattr reward on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.empty>
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name rew_batch in context <class '_ast.Store'>
Set rew_batch in <Scope: function _encode_sample> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Assign ['next_obs_batch'] [<_ast.Call object at 0x1026120b8>]
Call np.concatenate
ListComp
Call self._encode_observation
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Attribute _encode_observation of self in context <class '_ast.Load'>
Resolve self._encode_observation in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr _encode_observation of <Node class:dqn_utils.ReplayBuffer>
getattr _encode_observation on self returns <Node method:dqn_utils.ReplayBuffer._encode_observation>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_observation>
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function listcomp> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Attribute concatenate of np in context <class '_ast.Load'>
Resolve np.concatenate in context <class '_ast.Load'>
Get np in <Scope: function _encode_sample>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr concatenate of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.concatenate> (target obj <Node module:numpy> known but target attr concatenate not resolved; maybe fwd ref or unanalyzed import)
Name next_obs_batch in context <class '_ast.Store'>
Set next_obs_batch in <Scope: function _encode_sample> to <Node attribute:numpy.concatenate>
Assign ['done_mask'] [<_ast.Call object at 0x1026124e0>]
Call np.array
ListComp
Attribute done of self in context <class '_ast.Load'>
Resolve self.done in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr done of <Node class:dqn_utils.ReplayBuffer>
getattr done on self returns <Node attribute:numpy.empty>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:numpy.empty>
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function listcomp>, found in <Scope: function listcomp>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function listcomp>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function listcomp> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Attribute float32 of np in context <class '_ast.Load'>
Resolve np.float32 in context <class '_ast.Load'>
Get np in <Scope: function _encode_sample>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr float32 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute array of np in context <class '_ast.Load'>
Resolve np.array in context <class '_ast.Load'>
Get np in <Scope: function _encode_sample>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr array of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.array> (target obj <Node module:numpy> known but target attr array not resolved; maybe fwd ref or unanalyzed import)
Name done_mask in context <class '_ast.Store'>
Set done_mask in <Scope: function _encode_sample> to <Node attribute:numpy.array>
Name obs_batch in context <class '_ast.Load'>
Get obs_batch in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node attribute:numpy.concatenate>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node attribute:numpy.concatenate>
Name act_batch in context <class '_ast.Load'>
Get act_batch in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name rew_batch in context <class '_ast.Load'>
Get rew_batch in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^>
Name next_obs_batch in context <class '_ast.Load'>
Get next_obs_batch in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node attribute:numpy.concatenate>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node attribute:numpy.concatenate>
Name done_mask in context <class '_ast.Load'>
Get done_mask in <Scope: function _encode_sample>, found in <Scope: function _encode_sample>, value <Node attribute:numpy.array>
Use from <Node method:dqn_utils.ReplayBuffer._encode_sample> to Name <Node attribute:numpy.array>
FunctionDef sample
Set sample in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.sample>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Call self.can_sample
Name batch_size in context <class '_ast.Load'>
Get batch_size in <Scope: function sample>, found in <Scope: function sample>, value <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
Attribute can_sample of self in context <class '_ast.Load'>
Resolve self.can_sample in context <class '_ast.Load'>
Get self in <Scope: function sample>, found in <Scope: function sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr can_sample of <Node class:dqn_utils.ReplayBuffer>
getattr can_sample on self returns <Node method:dqn_utils.ReplayBuffer.can_sample>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to <Node method:dqn_utils.ReplayBuffer.can_sample>
Assign ['idxes'] [<_ast.Call object at 0x102612d30>]
Call sample_n_unique
Lambda
Call random.randint
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function lambda>, found in <Scope: function sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
getattr num_in_buffer on self returns <Node ???:*.min>
Use from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node ???:*.min>
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node ???:*.min>
Attribute randint of random in context <class '_ast.Load'>
Resolve random.randint in context <class '_ast.Load'>
Get random in <Scope: function lambda>, found in <Scope: module >, value <Node module:random>
Resolved to attr randint of <Node module:random>
Use from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node attribute:random.randint> (target obj <Node module:random> known but target attr randint not resolved; maybe fwd ref or unanalyzed import)
Name batch_size in context <class '_ast.Load'>
Get batch_size in <Scope: function sample>, found in <Scope: function sample>, value <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^>
Name sample_n_unique in context <class '_ast.Load'>
Get sample_n_unique in <Scope: function sample>, found in <Scope: module >, value <Node function:dqn_utils.sample_n_unique>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node function:dqn_utils.sample_n_unique>
Name idxes in context <class '_ast.Store'>
Set idxes in <Scope: function sample> to <Node function:dqn_utils.sample_n_unique>
Call self._encode_sample
Name idxes in context <class '_ast.Load'>
Get idxes in <Scope: function sample>, found in <Scope: function sample>, value <Node function:dqn_utils.sample_n_unique>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to Name <Node function:dqn_utils.sample_n_unique>
Attribute _encode_sample of self in context <class '_ast.Load'>
Resolve self._encode_sample in context <class '_ast.Load'>
Get self in <Scope: function sample>, found in <Scope: function sample>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr _encode_sample of <Node class:dqn_utils.ReplayBuffer>
getattr _encode_sample on self returns <Node method:dqn_utils.ReplayBuffer._encode_sample>
Use from <Node method:dqn_utils.ReplayBuffer.sample> to <Node method:dqn_utils.ReplayBuffer._encode_sample>
FunctionDef encode_recent_observation
Set encode_recent_observation in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.encode_recent_observation>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function encode_recent_observation>, found in <Scope: function encode_recent_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
getattr num_in_buffer on self returns <Node ???:*.min>
Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node ???:*.min>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node ???:*.min>
Call self._encode_observation
Attribute next_idx of self in context <class '_ast.Load'>
Resolve self.next_idx in context <class '_ast.Load'>
Get self in <Scope: function encode_recent_observation>, found in <Scope: function encode_recent_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
getattr next_idx on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function encode_recent_observation>, found in <Scope: function encode_recent_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute _encode_observation of self in context <class '_ast.Load'>
Resolve self._encode_observation in context <class '_ast.Load'>
Get self in <Scope: function encode_recent_observation>, found in <Scope: function encode_recent_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr _encode_observation of <Node class:dqn_utils.ReplayBuffer>
getattr _encode_observation on self returns <Node method:dqn_utils.ReplayBuffer._encode_observation>
Use from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node method:dqn_utils.ReplayBuffer._encode_observation>
FunctionDef _encode_observation
Set _encode_observation in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer._encode_observation>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Assign ['end_idx'] [<_ast.BinOp object at 0x102617780>]
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name end_idx in context <class '_ast.Store'>
Set end_idx in <Scope: function _encode_observation> to <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Assign ['start_idx'] [<_ast.BinOp object at 0x102617898>]
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Attribute frame_history_len of self in context <class '_ast.Load'>
Resolve self.frame_history_len in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr frame_history_len of <Node class:dqn_utils.ReplayBuffer>
getattr frame_history_len on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Name start_idx in context <class '_ast.Store'>
Set start_idx in <Scope: function _encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Call len
Attribute shape of self.obs in context <class '_ast.Load'>
Resolve self.obs.shape in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Resolved to attr shape of <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty.shape> (target obj <Node attribute:numpy.empty> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty.shape> resolves <Node ???:*.shape>; removing wildcard
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty.shape> (target obj <Node attribute:numpy.empty> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Name len in context <class '_ast.Load'>
Get len in <Scope: function _encode_observation>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.len>
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
getattr obs on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty>
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
getattr num_in_buffer on self returns <Node ???:*.min>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.min>
New edge added for Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.min>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['start_idx'] [<_ast.Num object at 0x102617f98>]
Name start_idx in context <class '_ast.Store'>
Set start_idx in <Scope: function _encode_observation>: value None is not a Node
For-loop
Call range
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function _encode_observation>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function _encode_observation> to <Node ???:*.range>
Attribute done of self in context <class '_ast.Load'>
Resolve self.done in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr done of <Node class:dqn_utils.ReplayBuffer>
getattr done on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['start_idx'] [<_ast.BinOp object at 0x10261c438>]
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name start_idx in context <class '_ast.Store'>
Set start_idx in <Scope: function _encode_observation> to <Node ???:*.range>
Assign ['missing_context'] [<_ast.BinOp object at 0x10261c550>]
Attribute frame_history_len of self in context <class '_ast.Load'>
Resolve self.frame_history_len in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr frame_history_len of <Node class:dqn_utils.ReplayBuffer>
getattr frame_history_len on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name missing_context in context <class '_ast.Store'>
Set missing_context in <Scope: function _encode_observation> to <Node ???:*.range>
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name missing_context in context <class '_ast.Load'>
Get missing_context in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Assign ['frames'] [<_ast.ListComp object at 0x10261c8d0>]
ListComp
Call np.zeros_like
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function listcomp>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
getattr obs on self returns <Node attribute:numpy.empty>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:numpy.empty>
New edge added for Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:numpy.empty>
Attribute zeros_like of np in context <class '_ast.Load'>
Resolve np.zeros_like in context <class '_ast.Load'>
Get np in <Scope: function listcomp>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr zeros_like of <Node module:numpy>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:numpy.zeros_like> (target obj <Node module:numpy> known but target attr zeros_like not resolved; maybe fwd ref or unanalyzed import)
Call range
Name missing_context in context <class '_ast.Load'>
Get missing_context in <Scope: function listcomp>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to Name <Node ???:*.range>
Name range in context <class '_ast.Load'>
Get range in <Scope: function listcomp>: no Node value (or name not in scope)
Use from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to Name <Node ???:*.range>
Name _ in context <class '_ast.Store'>
Set _ in <Scope: function listcomp> to <Node ???:*.range>
Name frames in context <class '_ast.Store'>
Set frames in <Scope: function _encode_observation> to <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
For-loop
Call range
Name start_idx in context <class '_ast.Load'>
Get start_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name end_idx in context <class '_ast.Load'>
Get end_idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^>
Name range in context <class '_ast.Load'>
Get range in <Scope: function _encode_observation>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Name idx in context <class '_ast.Store'>
Set idx in <Scope: function _encode_observation> to <Node ???:*.range>
Call frames.append
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
getattr obs on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node ???:*.range>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node ???:*.range>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute append of frames in context <class '_ast.Load'>
Resolve frames.append in context <class '_ast.Load'>
Get frames in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Resolved to attr append of <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append> (target obj <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> known but target attr append not resolved; maybe fwd ref or unanalyzed import)
Call np.concatenate
Name frames in context <class '_ast.Load'>
Get frames in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp>
Attribute concatenate of np in context <class '_ast.Load'>
Resolve np.concatenate in context <class '_ast.Load'>
Get np in <Scope: function _encode_observation>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr concatenate of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.concatenate> (target obj <Node module:numpy> known but target attr concatenate not resolved; maybe fwd ref or unanalyzed import)
Assign ['img_h', 'img_w'] [<_ast.Subscript object at 0x102656278>, <_ast.Subscript object at 0x1026563c8>]
Attribute shape of self.obs in context <class '_ast.Load'>
Resolve self.obs.shape in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Resolved to attr shape of <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty.shape> (target obj <Node attribute:numpy.empty> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Attribute shape of self.obs in context <class '_ast.Load'>
Resolve self.obs.shape in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
Resolved to attr shape of <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty.shape> (target obj <Node attribute:numpy.empty> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Name img_h in context <class '_ast.Store'>
Set img_h in <Scope: function _encode_observation> to <Node attribute:numpy.empty.shape>
Name img_w in context <class '_ast.Store'>
Set img_w in <Scope: function _encode_observation> to <Node attribute:numpy.empty.shape>
Call <_ast.Call object at 0x1026565c0>.reshape
Name img_h in context <class '_ast.Load'>
Get img_h in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node attribute:numpy.empty.shape>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node attribute:numpy.empty.shape>
Name img_w in context <class '_ast.Load'>
Get img_w in <Scope: function _encode_observation>, found in <Scope: function _encode_observation>, value <Node attribute:numpy.empty.shape>
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to Name <Node attribute:numpy.empty.shape>
Attribute reshape of <_ast.Call object at 0x1026565c0> in context <class '_ast.Load'>
Resolve <_ast.Call object at 0x1026565c0>.reshape in context <class '_ast.Load'>
Unresolved function call as obj, returning attr reshape of unknown
Use from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ???:*.reshape> (target obj <_ast.Call object at 0x1026565c0> not resolved; maybe fwd ref, function argument, or unanalyzed import)
FunctionDef store_frame
Set store_frame in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.store_frame>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
getattr obs on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty>
Assign ['self.obs'] [<_ast.Call object at 0x102656c88>]
Call np.empty
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Call list
Attribute shape of frame in context <class '_ast.Load'>
Resolve frame.shape in context <class '_ast.Load'>
Get frame in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
Resolved to attr shape of <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^.shape> (target obj <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^> known but target attr shape not resolved; maybe fwd ref or unanalyzed import)
Name list in context <class '_ast.Load'>
Get list in <Scope: function store_frame>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ???:*.list>
Attribute lander of self in context <class '_ast.Load'>
Resolve self.lander in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr lander of <Node class:dqn_utils.ReplayBuffer>
getattr lander on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute float32 of np in context <class '_ast.Load'>
Resolve np.float32 in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr float32 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute uint8 of np in context <class '_ast.Load'>
Resolve np.uint8 in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr uint8 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.uint8> (target obj <Node module:numpy> known but target attr uint8 not resolved; maybe fwd ref or unanalyzed import)
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Attribute obs of self in context <class '_ast.Store'>
Resolve self.obs in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
setattr obs on self to <Node attribute:numpy.empty>
Assign ['self.action'] [<_ast.Call object at 0x102622198>]
Call np.empty
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute int32 of np in context <class '_ast.Load'>
Resolve np.int32 in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr int32 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.int32> (target obj <Node module:numpy> known but target attr int32 not resolved; maybe fwd ref or unanalyzed import)
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Attribute action of self in context <class '_ast.Store'>
Resolve self.action in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr action of <Node class:dqn_utils.ReplayBuffer>
setattr action on self to <Node attribute:numpy.empty>
Assign ['self.reward'] [<_ast.Call object at 0x102622438>]
Call np.empty
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute float32 of np in context <class '_ast.Load'>
Resolve np.float32 in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr float32 of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.float32> (target obj <Node module:numpy> known but target attr float32 not resolved; maybe fwd ref or unanalyzed import)
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Attribute reward of self in context <class '_ast.Store'>
Resolve self.reward in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr reward of <Node class:dqn_utils.ReplayBuffer>
setattr reward on self to <Node attribute:numpy.empty>
Assign ['self.done'] [<_ast.Call object at 0x1026226d8>]
Call np.empty
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute bool of np in context <class '_ast.Load'>
Resolve np.bool in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr bool of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.bool> (target obj <Node module:numpy> known but target attr bool not resolved; maybe fwd ref or unanalyzed import)
Attribute empty of np in context <class '_ast.Load'>
Resolve np.empty in context <class '_ast.Load'>
Get np in <Scope: function store_frame>, found in <Scope: module >, value <Node module:numpy>
Resolved to attr empty of <Node module:numpy>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> (target obj <Node module:numpy> known but target attr empty not resolved; maybe fwd ref or unanalyzed import)
Attribute done of self in context <class '_ast.Store'>
Resolve self.done in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr done of <Node class:dqn_utils.ReplayBuffer>
setattr done on self to <Node attribute:numpy.empty>
Assign [<_ast.Subscript object at 0x102622908>] ['frame']
Name frame in context <class '_ast.Load'>
Get frame in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^>
Attribute obs of self in context <class '_ast.Load'>
Resolve self.obs in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr obs of <Node class:dqn_utils.ReplayBuffer>
getattr obs on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty>
Attribute next_idx of self in context <class '_ast.Load'>
Resolve self.next_idx in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
getattr next_idx on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['ret'] ['self.next_idx']
Attribute next_idx of self in context <class '_ast.Load'>
Resolve self.next_idx in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
getattr next_idx on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Name ret in context <class '_ast.Store'>
Set ret in <Scope: function store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.next_idx'] [<_ast.BinOp object at 0x102622c18>]
Attribute next_idx of self in context <class '_ast.Load'>
Resolve self.next_idx in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
getattr next_idx on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute next_idx of self in context <class '_ast.Store'>
Resolve self.next_idx in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr next_idx of <Node class:dqn_utils.ReplayBuffer>
setattr next_idx on self to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Assign ['self.num_in_buffer'] [<_ast.Call object at 0x102622e48>]
Call min
Attribute size of self in context <class '_ast.Load'>
Resolve self.size in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr size of <Node class:dqn_utils.ReplayBuffer>
getattr size on self returns <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Attribute num_in_buffer of self in context <class '_ast.Load'>
Resolve self.num_in_buffer in context <class '_ast.Load'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
getattr num_in_buffer on self returns <Node ???:*.min>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ???:*.min>
Name min in context <class '_ast.Load'>
Get min in <Scope: function store_frame>: no Node value (or name not in scope)
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ???:*.min>
Attribute num_in_buffer of self in context <class '_ast.Store'>
Resolve self.num_in_buffer in context <class '_ast.Store'>
Get self in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr num_in_buffer of <Node class:dqn_utils.ReplayBuffer>
setattr num_in_buffer on self to <Node ???:*.min>
Name ret in context <class '_ast.Load'>
Get ret in <Scope: function store_frame>, found in <Scope: function store_frame>, value <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_frame> to Name <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^>
FunctionDef store_effect
Set store_effect in <Scope: class ReplayBuffer> to <Node method:dqn_utils.ReplayBuffer.store_effect>
Method def: setting self name "self" to <Node class:dqn_utils.ReplayBuffer>
Assign [<_ast.Subscript object at 0x1026242e8>] ['action']
Name action in context <class '_ast.Load'>
Get action in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Attribute action of self in context <class '_ast.Load'>
Resolve self.action in context <class '_ast.Load'>
Get self in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr action of <Node class:dqn_utils.ReplayBuffer>
getattr action on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Assign [<_ast.Subscript object at 0x102624470>] ['reward']
Name reward in context <class '_ast.Load'>
Get reward in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Attribute reward of self in context <class '_ast.Load'>
Resolve self.reward in context <class '_ast.Load'>
Get self in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr reward of <Node class:dqn_utils.ReplayBuffer>
getattr reward on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Assign [<_ast.Subscript object at 0x1026245f8>] ['done']
Name done in context <class '_ast.Load'>
Get done in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Attribute done of self in context <class '_ast.Load'>
Resolve self.done in context <class '_ast.Load'>
Get self in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node class:dqn_utils.ReplayBuffer>
Resolved to attr done of <Node class:dqn_utils.ReplayBuffer>
getattr done on self returns <Node attribute:numpy.empty>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node attribute:numpy.empty>
Name idx in context <class '_ast.Load'>
Get idx in <Scope: function store_effect>, found in <Scope: function store_effect>, value <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node method:dqn_utils.ReplayBuffer.store_effect> to Name <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^>
Use from <Node function:dqn_utils.sample_n_unique> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append> resolves <Node ???:*.append>; removing wildcard
Expanding unknowns: new uses edge from <Node function:dqn_utils.sample_n_unique> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append>
Use from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append> resolves <Node ???:*.append>; removing wildcard
Expanding unknowns: new uses edge from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append>
Contracting non-existent from <Node module:dqn_utils> to <Node module:random> as <Node ---:*.random>
Contracting non-existent from <Node module:dqn_utils> to <Node module:gym> as <Node ---:*.gym>
Contracting non-existent from <Node module:dqn_utils> to <Node import:np> as <Node ---:*.np>
Contracting non-existent from <Node module:dqn_utils> to <Node import:tf> as <Node ---:*.tf>
Contracting non-existent from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.abs> as <Node ---:*.abs>
Contracting non-existent from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.where> as <Node ---:*.where>
Contracting non-existent from <Node function:dqn_utils.huber_loss> to <Node ---:dqn_utils.huber_loss.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:dqn_utils.huber_loss> to <Node attribute:tensorflow.square> as <Node ---:*.square>
Contracting non-existent from <Node function:dqn_utils.sample_n_unique> to <Node ---:dqn_utils.sample_n_unique.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:dqn_utils.sample_n_unique> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append> as <Node ???:*.append>
Contracting non-existent from <Node method:dqn_utils.ConstantSchedule.__init__> to <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ConstantSchedule.value> to <Node ---:dqn_utils.ConstantSchedule.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:dqn_utils.linear_interpolation> to <Node ---:dqn_utils.linear_interpolation.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.PiecewiseSchedule.__init__> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.value.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.PiecewiseSchedule.value> to <Node ---:dqn_utils.PiecewiseSchedule.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.LinearSchedule.__init__> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.LinearSchedule.value> to <Node ---:dqn_utils.LinearSchedule.value.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:dqn_utils.compute_exponential_averages> to <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to <Node ---:dqn_utils.compute_exponential_averages.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:tensorflow.clip_by_norm> as <Node ---:*.clip_by_norm>
Contracting non-existent from <Node function:dqn_utils.minimize_and_clip> to <Node ---:dqn_utils.minimize_and_clip.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.apply_gradients> as <Node ---:*.apply_gradients>
Contracting non-existent from <Node function:dqn_utils.minimize_and_clip> to <Node attribute:dqn_utils.minimize_and_clip.^^^argument^^^.compute_gradients> as <Node ---:*.compute_gradients>
Contracting non-existent from <Node function:dqn_utils.initialize_interdependent_variables> to <Node ---:dqn_utils.initialize_interdependent_variables.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append> as <Node ???:*.append>
Contracting non-existent from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:dqn_utils.initialize_interdependent_variables.^^^argument^^^.run> as <Node ---:*.run>
Contracting non-existent from <Node function:dqn_utils.initialize_interdependent_variables> to <Node attribute:tensorflow.variables_initializer> as <Node ---:*.variables_initializer>
Contracting non-existent from <Node function:dqn_utils.get_wrapper_by_name> to <Node ---:dqn_utils.get_wrapper_by_name.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node function:dqn_utils.get_wrapper_by_name> to <Node attribute:dqn_utils.get_wrapper_by_name.^^^argument^^^.env> as <Node ---:*.env>
Contracting non-existent from <Node function:dqn_utils.get_wrapper_by_name> to <Node attribute:gym.Wrapper> as <Node ---:*.Wrapper>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.__init__> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.can_sample> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> as <Node ---:*.num_in_buffer>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.can_sample> to <Node ---:dqn_utils.ReplayBuffer.can_sample.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:dqn_utils.ReplayBuffer.done> as <Node ---:*.done>
Contracting non-existent from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node attribute:numpy.empty> as <Node ---:*.empty>
Contracting non-existent from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:dqn_utils.ReplayBuffer.reward> as <Node ---:*.reward>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:dqn_utils.ReplayBuffer.action> as <Node ---:*.action>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.float32> as <Node ---:*.float32>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.concatenate> as <Node ---:*.concatenate>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.array> as <Node ---:*.array>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node attribute:numpy.empty> as <Node ---:*.empty>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_sample> to <Node ---:dqn_utils.ReplayBuffer._encode_sample.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.sample> to <Node ---:dqn_utils.ReplayBuffer.sample.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> as <Node ---:*.num_in_buffer>
Contracting non-existent from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node attribute:random.randint> as <Node ---:*.randint>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node attribute:dqn_utils.ReplayBuffer.next_idx> as <Node ---:*.next_idx>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> as <Node ---:*.num_in_buffer>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.encode_recent_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty> as <Node ---:*.empty>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer._encode_observation.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer._encode_observation.listcomp.append> as <Node ???:*.append>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.empty.shape> as <Node ???:*.shape>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> as <Node ---:*.num_in_buffer>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:numpy.concatenate> as <Node ---:*.concatenate>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.done> as <Node ---:*.done>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer._encode_observation> to <Node attribute:dqn_utils.ReplayBuffer.obs> as <Node ---:*.obs>
Contracting non-existent from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:numpy.empty> as <Node ---:*.empty>
Contracting non-existent from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:dqn_utils.ReplayBuffer.obs> as <Node ---:*.obs>
Contracting non-existent from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node attribute:numpy.zeros_like> as <Node ---:*.zeros_like>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.empty> as <Node ---:*.empty>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.store_frame.^^^argument^^^.shape> as <Node ???:*.shape>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.uint8> as <Node ---:*.uint8>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.int32> as <Node ---:*.int32>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.float32> as <Node ---:*.float32>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.next_idx> as <Node ---:*.next_idx>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.num_in_buffer> as <Node ---:*.num_in_buffer>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:numpy.bool> as <Node ---:*.bool>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node ---:dqn_utils.ReplayBuffer.__init__.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_frame> to <Node attribute:dqn_utils.ReplayBuffer.obs> as <Node ---:*.obs>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node ---:dqn_utils.ReplayBuffer.store_effect.^^^argument^^^> as <Node ---:*.^^^argument^^^>
Contracting non-existent from <Node method:dqn_utils.ReplayBuffer.store_effect> to <Node attribute:numpy.empty> as <Node ---:*.empty>
Collapsing inner from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to <Node method:dqn_utils.PiecewiseSchedule.__init__>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:dqn_utils.PiecewiseSchedule.__init__.listcomp> to <Node method:dqn_utils.PiecewiseSchedule.__init__>, uses <Node ???:*.e>
Collapsing inner from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to <Node function:dqn_utils.compute_exponential_averages>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to <Node function:dqn_utils.compute_exponential_averages>, uses <Node ???:*.average>
Collapsing inner from <Node namespace:dqn_utils.compute_exponential_averages.listcomp> to <Node function:dqn_utils.compute_exponential_averages>, uses <Node ???:*.v>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_sample>, uses <Node method:dqn_utils.ReplayBuffer._encode_observation>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_sample>, uses <Node ???:*.idx>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_sample>, uses <Node ---:*.^^^argument^^^>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_sample>, uses <Node ---:*.empty>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_sample.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_sample>, uses <Node ---:*.done>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_observation>, uses <Node ???:*.range>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_observation>, uses <Node ---:*.empty>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_observation>, uses <Node ---:*.obs>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer._encode_observation.listcomp> to <Node method:dqn_utils.ReplayBuffer._encode_observation>, uses <Node ---:*.zeros_like>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node method:dqn_utils.ReplayBuffer.sample>, uses <Node ---:*.randint>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node method:dqn_utils.ReplayBuffer.sample>, uses <Node ???:*.min>
Collapsing inner from <Node namespace:dqn_utils.ReplayBuffer.sample.lambda> to <Node method:dqn_utils.ReplayBuffer.sample>, uses <Node ---:*.num_in_buffer>
Looking at dqn_utils
Coloring dqn_utils from file 'dqn_utils.py'
Looking at ConstantSchedule
Coloring ConstantSchedule from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at LinearSchedule
Coloring LinearSchedule from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at PiecewiseSchedule
Coloring PiecewiseSchedule from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at ReplayBuffer
Coloring ReplayBuffer from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at Schedule
Coloring Schedule from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at compute_exponential_averages
Coloring compute_exponential_averages from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at get_wrapper_by_name
Coloring get_wrapper_by_name from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at huber_loss
Coloring huber_loss from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at initialize_interdependent_variables
Coloring initialize_interdependent_variables from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at linear_interpolation
Coloring linear_interpolation from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at minimize_and_clip
Coloring minimize_and_clip from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at sample_n_unique
Coloring sample_n_unique from file 'dqn_utils.py'
New namespace dqn_utils, old was 
Looking at __init__
Coloring __init__ from file 'dqn_utils.py'
New namespace dqn_utils.ConstantSchedule, old was 
Looking at value
Coloring value from file 'dqn_utils.py'
New namespace dqn_utils.ConstantSchedule, old was 
Looking at __init__
Coloring __init__ from file 'dqn_utils.py'
New namespace dqn_utils.LinearSchedule, old was 
Looking at value
Coloring value from file 'dqn_utils.py'
New namespace dqn_utils.LinearSchedule, old was 
Looking at __init__
Coloring __init__ from file 'dqn_utils.py'
New namespace dqn_utils.PiecewiseSchedule, old was 
Looking at value
Coloring value from file 'dqn_utils.py'
New namespace dqn_utils.PiecewiseSchedule, old was 
Looking at __init__
Coloring __init__ from file 'dqn_utils.py'
New namespace dqn_utils.ReplayBuffer, old was 
Looking at _encode_observation
Coloring _encode_observation from file 'dqn_utils.py'
New namespace dqn_utils.ReplayBuffer, old was 
Looking at _encode_sample
Coloring _encode_sample from file 'dqn_utils.py'
New namespace dqn_utils.ReplayBuffer, old was 
Looking at can_sample
Coloring can_sample from file 'dqn_utils.py'
New namespace dqn_utils.ReplayBuffer, old was 
Looking at encode_recent_observation
Coloring encode_recent_observation from file 'dqn_utils.py'
New namespace dqn_utils.ReplayBuffer, old was 
Looking at sample
Coloring sample from file 'dqn_utils.py'
New namespace dqn_utils.ReplayBuffer, old was 
Looking at store_effect
Coloring store_effect from file 'dqn_utils.py'
New namespace dqn_utils.ReplayBuffer, old was 
Looking at store_frame
Coloring store_frame from file 'dqn_utils.py'
New namespace dqn_utils.ReplayBuffer, old was 
Looking at value
Coloring value from file 'dqn_utils.py'
New namespace dqn_utils.Schedule, old was 
<class 'pyan.writers.DotWriter'> running
Start subgraph 
Write node dqn_utils
Start subgraph dqn_utils
Write node ConstantSchedule\n(dqn_utils.py:32)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node LinearSchedule\n(dqn_utils.py:85)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node PiecewiseSchedule\n(dqn_utils.py:49)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node ReplayBuffer\n(dqn_utils.py:174)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node Schedule\n(dqn_utils.py:27)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node compute_exponential_averages\n(dqn_utils.py:109)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node get_wrapper_by_name\n(dqn_utils.py:164)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node huber_loss\n(dqn_utils.py:8)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node initialize_interdependent_variables\n(dqn_utils.py:141)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node linear_interpolation\n(dqn_utils.py:46)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node minimize_and_clip\n(dqn_utils.py:130)
Finish subgraph dqn_utils
Start subgraph dqn_utils
Write node sample_n_unique\n(dqn_utils.py:16)
Finish subgraph dqn_utils
Start subgraph dqn_utils.ConstantSchedule
Write node __init__\n(dqn_utils.py:33)
Finish subgraph dqn_utils.ConstantSchedule
Start subgraph dqn_utils.ConstantSchedule
Write node value\n(dqn_utils.py:42)
Finish subgraph dqn_utils.ConstantSchedule
Start subgraph dqn_utils.LinearSchedule
Write node __init__\n(dqn_utils.py:86)
Finish subgraph dqn_utils.LinearSchedule
Start subgraph dqn_utils.LinearSchedule
Write node value\n(dqn_utils.py:104)
Finish subgraph dqn_utils.LinearSchedule
Start subgraph dqn_utils.PiecewiseSchedule
Write node __init__\n(dqn_utils.py:50)
Finish subgraph dqn_utils.PiecewiseSchedule
Start subgraph dqn_utils.PiecewiseSchedule
Write node value\n(dqn_utils.py:74)
Finish subgraph dqn_utils.PiecewiseSchedule
Start subgraph dqn_utils.ReplayBuffer
Write node __init__\n(dqn_utils.py:175)
Finish subgraph dqn_utils.ReplayBuffer
Start subgraph dqn_utils.ReplayBuffer
Write node _encode_observation\n(dqn_utils.py:278)
Finish subgraph dqn_utils.ReplayBuffer
Start subgraph dqn_utils.ReplayBuffer
Write node _encode_sample\n(dqn_utils.py:218)
Finish subgraph dqn_utils.ReplayBuffer
Start subgraph dqn_utils.ReplayBuffer
Write node can_sample\n(dqn_utils.py:214)
Finish subgraph dqn_utils.ReplayBuffer
Start subgraph dqn_utils.ReplayBuffer
Write node encode_recent_observation\n(dqn_utils.py:265)
Finish subgraph dqn_utils.ReplayBuffer
Start subgraph dqn_utils.ReplayBuffer
Write node sample\n(dqn_utils.py:228)
Finish subgraph dqn_utils.ReplayBuffer
Start subgraph dqn_utils.ReplayBuffer
Write node store_effect\n(dqn_utils.py:332)
Finish subgraph dqn_utils.ReplayBuffer
Start subgraph dqn_utils.ReplayBuffer
Write node store_frame\n(dqn_utils.py:304)
Finish subgraph dqn_utils.ReplayBuffer
Start subgraph dqn_utils.Schedule
Write node value\n(dqn_utils.py:28)
Finish subgraph dqn_utils.Schedule
Finish subgraph 
